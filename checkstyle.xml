<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (C) 2014 Institute for Bioinformatics and Systems Biology, University Giessen, Germany

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<!DOCTYPE module PUBLIC
"-//Puppy Crawl//DTD Check Configuration 1.3//EN"
"http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<!-- This is a checkstyle configuration file. For descriptions of
what the following rules do, please see the checkstyle configuration
page at http://checkstyle.sourceforge.net/config.html -->
<module name="Checker">


    <property name="basedir" value="${projectdir}/src/main/java"/>


    <module name="Header">
        <property name="headerFile" value="${checkstyle.header.file}"/>
        <!--<property name="ignoreLines" value="2, 3"/>-->
        <property name="fileExtensions" value="java"/>
    </module>


    <!-- detects tab characters (\t) in source code -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
        <property name="fileExtensions" value="java"/>
        <property name="severity" value="error"/>
    </module>


    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf"/>
    </module>


    <module name="RegexpSingleline">
        <!-- Checks that FIXME is not used in comments. TODO is preferred.
        -->
        <property name="format" value="((//.*)|(\*.*))FIXME" />
        <property name="message" value='TODO is preferred to FIXME. e.g. "TODO(johndoe): Refactor when v2 is released."' />
    </module>


    <!-- All Java AST specific tests live under TreeWalker module. -->
    <module name="TreeWalker">

        <property name="tabWidth" value="4"/>

        <!--
        IMPORT CHECKS
        -->


        <module name="RedundantImport">
            <!-- Checks for redundant import statements. -->
            <property name="severity" value="error"/>
        </module>


        <!--
        NAMING CHECKS
        -->


        <!-- Item 38 - Adhere to generally accepted naming conventions -->
        <module name="PackageName">
            <!-- Validates identifiers for package names against the
            supplied expression. -->
            <!-- Here the default checkstyle rule restricts package name parts to
            seven characters, this is not in line with common practice at Google.
            -->
            <property name="format" value="^(de|bio)(\.[a-z]{3,})*$"/>
            <property name="severity" value="error"/>
        </module>


        <module name="TypeName">
            <property name="format" value="^[A-Z][a-zA-Z0-9]*$"/>
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF"/>
        </module>


        <module name="ConstantNameCheck">
            <!-- Validates non-private, static, final fields against the supplied
            public/package final fields "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$". -->
            <metadata name="altname" value="ConstantName"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
            <property name="format" value="^([A-Z][A-Z0-9]*(_[A-Z0-9]+)*|FLAG_.*)$"/>
            <message key="name.invalidPattern" value="Variable ''{0}'' should be in ALL_CAPS (if it is a constant) or be private (otherwise)."/>
            <property name="severity" value="error"/>
        </module>


        <module name="StaticVariableNameCheck">
            <!-- Validates static, non-final fields against the supplied
            expression "^[a-z][a-zA-Z0-9]*_?$". -->
            <metadata name="altname" value="StaticVariableName"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*_?$"/>
            <property name="severity" value="warning"/>
        </module>


        <module name="MemberNameCheck">
            <!-- Validates non-static members against the supplied expression. -->
            <metadata name="altname" value="MemberName"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="severity" value="error"/>
        </module>


        <module name="MethodNameCheck">
            <!-- Validates identifiers for method names. -->
            <metadata name="altname" value="MethodName"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$"/>
            <property name="severity" value="error"/>
        </module>


        <module name="ParameterName">
            <!-- Validates identifiers for method parameters against the
            expression "^[a-z][a-zA-Z0-9]*$". -->
            <property name="severity" value="error"/>
        </module>


        <module name="LocalFinalVariableName">
            <!-- Validates identifiers for local final variables against the
            expression "^[a-z][a-zA-Z0-9]*$". -->
            <property name="severity" value="warning"/>
        </module>


        <module name="LocalVariableName">
            <!-- Validates identifiers for local variables against the
            expression "^[a-z][a-zA-Z0-9]*$". -->
            <property name="severity" value="error"/>
        </module>


        <!--
        LENGTH and CODING CHECKS
        -->


        <module name="LeftCurly">
            <!-- Checks for placement of the left curly brace ('{'). -->
            <property name="severity" value="warning"/>
        </module>


        <module name="RightCurly">
            <!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on
            the same line. e.g., the following example is fine:
            <pre>
            if {
            ...
            } else
            </pre>
            -->
            <!-- This next example is not fine:
            <pre>
            if {
            ...
            }
            else
            </pre>
            -->
            <property name="option" value="same"/>
            <property name="severity" value="warning"/>
        </module>


        <!-- Checks for braces around if and else blocks -->
        <module name="NeedBraces">
            <property name="severity" value="warning"/>
            <property name="tokens" value="LITERAL_FOR, LITERAL_WHILE, LITERAL_DO"/>
        </module>


        <module name="UpperEll">
            <!-- Checks that long constants are defined with an upper ell.-->
            <property name="severity" value="error"/>
        </module>


        <!-- detects empty blocks -->
        <module name="EmptyBlock"/>


        <!-- restricts boolean expression complexity -->
        <module name="BooleanExpressionComplexity"/>


        <!-- detects empty statements -->
        <module name="EmptyStatement"/>


        <!-- detects possible null pointer references in equals invocations -->
        <module name="EqualsAvoidNull"/>


        <!-- detects overridden equals without hashCode -->
        <module name="EqualsHashCode"/>


        <!-- Makes sure that utility classes (classes that contain only static methods or fields in their API) do not have a public constructor -->
        <module name="HideUtilityClassConstructor"/>


        <!-- Checks that certain exception types do not appear in a catch statement -->
        <module name="IllegalCatch"/>


        <!-- Checks for imports from a set of illegal packages. By default, the check rejects all sun.* packages since programs that contain direct calls to the sun.* packages are "not guaranteed to work on all Java-compatible platforms" -->
        <module name="IllegalImport"/>


        <!-- This check can be used to ensure that types are not declared to be thrown. Declaring that a method throws java.lang.Error or java.lang.RuntimeException is almost never acceptable -->
        <module name="IllegalThrows"/>


        <!-- Checks the ordering/grouping of imports -->
        <module name="ImportOrder"/>


        <!-- Checks intendation -->
        <!--
            <module name="Indentation"/>
        -->


        <!-- Checks that there are no "magic numbers", where a magic number is a numeric literal that is not defined as a constant. By default, -1, 0, 1, and 2 are not considered to be magic numbers. -->
        <!--
        <module name="MagicNumber">
            <property name="ignoreNumbers" value="-1, 0, 0.5, 1, 2, 3, 29, 1000, 1024"/>
        </module>
        -->


        <!-- Checks for long methods and constructors. -->
        <module name="MethodLength">
           <property name="max" value="300"/>
        </module>


        <!-- Verifies that the java.lang.Override annotation is present when the {@inheritDoc} javadoc tag is present. -->
        <module name="MissingOverride"/>


        <!-- Check for ensuring that for loop control variables are not modified inside the for block -->
        <module name="ModifiedControlVariable"/>


        <!-- Checks for multiple occurrences of the same string literal within a single file -->
        <module name="MultipleStringLiterals">
            <property name="allowedDuplicates" value="2"/>
            <property name="ignoreStringsRegexp" value='^(("")|([a-zA-Z])|(".+Msg.+"))$'/>
        </module>


        <!-- Verifies there are no finalize() methods defined in a class -->
        <module name="NoFinalizer"/>


        <!-- Checks the distance between declaration of variable and its first usage -->
        <module name="VariableDeclarationUsageDistance">
            <property name="allowedDistance" value="1"/>
        </module>


        <!-- Checks that each top-level class, interface or enum resides in a source file of its own -->
        <module name="OneTopLevelClass"/>


        <!-- Checks for unused import statements -->
        <module name="UnusedImports"/>


        <!-- Checks for the use of unnecessary parentheses -->
        <module name="UnnecessaryParentheses"/>


        <!-- Checks that string literals are not used with == or != -->
        <module name="StringLiteralEquality"/>


        <!-- Restrict using Unicode escapes (e.g. \u221e) -->
        <module name="AvoidEscapedUnicodeCharacters"/>


        <!-- Checks that there is only one statement per line -->
        <module name="OneStatementPerLine"/>


        <!-- Checks that overload methods are grouped together -->
        <module name="OverloadMethodsDeclarationOrder"/>


        <!-- Checks visibility of class members. Only static final members may be public -->
        <module name="VisibilityModifier">
            <property name="protectedAllowed" value="true"/>
        </module>


        <!--
        WHITESPACE CHECKS
        -->
        <module name="WhitespaceAround">
            <!-- Checks that various tokens are surrounded by whitespace.
            This includes most binary operators and keywords followed
            by regular or curly braces.
            -->
            <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR,
BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON,
LAND, LITERAL_DO, LITERAL_ELSE,
LITERAL_FINALLY, LITERAL_RETURN, LOR,
MINUS_ASSIGN, MOD_ASSIGN, EQUAL, NOT_EQUAL, PLUS_ASSIGN, QUESTION,
SL, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN"/>
            <property name="severity" value="error"/>
        </module>


        <module name="WhitespaceAfter">
            <!-- Checks that commas, semicolons and typecasts are followed by
            whitespace.
            -->
            <property name="tokens" value="COMMA, SEMI, TYPECAST"/>
        </module>


        <module name="NoWhitespaceAfter">
            <!-- Checks that there is no whitespace after various unary operators.
            Linebreaks are allowed.
            -->
            <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,
UNARY_PLUS"/>
            <property name="allowLineBreaks" value="true"/>
            <property name="severity" value="error"/>
        </module>


        <module name="NoWhitespaceBefore">
            <!-- Checks that there is no whitespace before various unary operators.
            Linebreaks are allowed.
            -->
            <property name="tokens" value="SEMI, DOT, POST_DEC, POST_INC"/>
            <property name="allowLineBreaks" value="true"/>
            <property name="severity" value="error"/>
        </module>


    </module>


</module>

