package vamp.view.dataVisualisation.trackViewer;

import vamp.view.dataVisualisation.basePanel.AbstractInfoPanel;
import java.util.logging.Level;
import java.util.logging.Logger;
import vamp.databackend.dataObjects.PersistantCoverage;

/**
 *
 * @author ddoppmeier
 */
public class TrackInfoPanel extends AbstractInfoPanel {

    private static final long serialVersionUID = 72348356;
    private PersistantCoverage cov;
    private boolean mouseOverWanted;

    /** Creates new form TrackInfoPanel */
    public TrackInfoPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        coverageInfoPanel1 = new vamp.view.dataVisualisation.trackViewer.CoverageInfoPanel();

        setMinimumSize(new java.awt.Dimension(237, 250));
        setPreferredSize(new java.awt.Dimension(237, 250));

        coverageInfoPanel1.setToolTipText("");
        jTabbedPane1.addTab("Current position", coverageInfoPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void setCurrentMousePosition(int logPos) {

        if(mouseOverWanted && cov != null){

            coverageInfoPanel1.setZeroFwd(cov.getzFwMult(logPos));
            coverageInfoPanel1.setZeroRev(cov.getzRvMult(logPos));
            coverageInfoPanel1.setBmFwd(cov.getBmFwMult(logPos));
            coverageInfoPanel1.setBmRev(cov.getBmRvMult(logPos));
            coverageInfoPanel1.setNFwd(cov.getnFwMult(logPos));
            coverageInfoPanel1.setNRev(cov.getnRvMult(logPos));

        } else {
            coverageInfoPanel1.setZeroFwd(-1);
            coverageInfoPanel1.setZeroRev(-1);
            coverageInfoPanel1.setBmFwd(-1);
            coverageInfoPanel1.setBmRev(-1);
            coverageInfoPanel1.setNFwd(-1);
            coverageInfoPanel1.setNRev(-1);
        }
    }

    @Override
    public void setMouseOverPaintingRequested(boolean requested) {
        mouseOverWanted = requested;
        if(!requested){
            setCurrentMousePosition(-1);
        }
    }

    public void setCoverage(PersistantCoverage cov, int leftBound, int rightBound){
        this.cov = cov;
    }



    private int getIntervalCoverage(PersistantCoverage cov, boolean isForwardStrand, int covType, int from, int to){

        int sum = 0;

        if(isForwardStrand){
            if(covType == PersistantCoverage.PERFECT){
                for(int i = from; i<= to; i++){
                    sum += cov.getzFwMult(i);
                }
            } else if(covType == PersistantCoverage.BM){
                for(int i = from; i<= to; i++){
                    sum += cov.getBmFwMult(i);
                }
            } else if(covType == PersistantCoverage.NERROR){
                for(int i = from; i<= to; i++){
                    sum += cov.getnFwMult(i);
                }
            } else {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, "found unknown coverage type!");
            }
        } else {
            if(covType == PersistantCoverage.PERFECT){
                for(int i = from; i<= to; i++){
                    sum += cov.getzRvMult(i);
                }
            } else if(covType == PersistantCoverage.BM){
                for(int i = from; i<= to; i++){
                    sum += cov.getBmRvMult(i);
                }
            } else if(covType == PersistantCoverage.NERROR){
                for(int i = from; i<= to; i++){
                    sum += cov.getnRvMult(i);
                }
            } else {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, "found unknown coverage type!");
            }
        }

        return sum;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private vamp.view.dataVisualisation.trackViewer.CoverageInfoPanel coverageInfoPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void close() {
        cov = null;
    }

}
