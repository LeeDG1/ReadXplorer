package vamp.view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import vamp.ApplicationController;
import vamp.RunningTaskI;
import vamp.databackend.dataObjects.PersistantTrack;
import vamp.importer.ImportThread;
import vamp.dataAdministration.DeletionThread;
import vamp.view.dataVisualisation.basePanel.BasePanel;
import vamp.view.dataVisualisation.trackViewer.TrackItem;

/**
 *
 * @author ddoppmeier
 */
public class ApplicationFrame extends javax.swing.JFrame implements ApplicationFrameI {

    public static final long serialVersionUID = 994787234;

    private ViewController viewController;


    /** Creates new form ApplicationFrame */
    public ApplicationFrame() {
        initComponents();
    }

    @Override
    public void setViewController(ViewController viewController){
        this.viewController = viewController;
    }


    @Override
    public void blockControlsByRunningTask(RunningTaskI runningTask){
        if(runningTask instanceof ImportThread){
            importItem.setEnabled(false);
            logoffItem.setEnabled(false);
            shutdownItem.setEnabled(false);
        } else if(runningTask instanceof DeletionThread){
            showDataAdminItem.setEnabled(false);
            logoffItem.setEnabled(false);
            shutdownItem.setEnabled(false);
        } else {
            Logger.getLogger(this.getClass().getName()).log(Level.INFO, "blocking controlls for unknown runningtask!");
        }
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        visualPanel = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        projectMenu = new javax.swing.JMenu();
        importItem = new javax.swing.JMenuItem();
        showDataAdminItem = new javax.swing.JMenuItem();
        logoffItem = new javax.swing.JMenuItem();
        shutdownItem = new javax.swing.JMenuItem();
        visualisationMenu = new javax.swing.JMenu();
        openRefgenItem = new javax.swing.JMenuItem();
        closeRefgenItem = new javax.swing.JMenuItem();
        openTrackItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(ApplicationController.APPNAME);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        visualPanel.setLayout(new javax.swing.BoxLayout(visualPanel, javax.swing.BoxLayout.PAGE_AXIS));

        projectMenu.setText("Project");

        importItem.setText("Import data");
        importItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importItemActionPerformed(evt);
            }
        });
        projectMenu.add(importItem);

        showDataAdminItem.setText("Manage data");
        showDataAdminItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showDataAdminItemActionPerformed(evt);
            }
        });
        projectMenu.add(showDataAdminItem);

        logoffItem.setText("Disconnect");
        logoffItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoffItemActionPerformed(evt);
            }
        });
        projectMenu.add(logoffItem);

        shutdownItem.setText("Exit");
        shutdownItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shutdownItemActionPerformed(evt);
            }
        });
        projectMenu.add(shutdownItem);

        menuBar.add(projectMenu);

        visualisationMenu.setText("Visualisation");

        openRefgenItem.setText("Open reference");
        openRefgenItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openRefgenItemActionPerformed(evt);
            }
        });
        visualisationMenu.add(openRefgenItem);

        closeRefgenItem.setText("Close reference");
        closeRefgenItem.setEnabled(false);
        closeRefgenItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeRefgenItemActionPerformed(evt);
            }
        });
        visualisationMenu.add(closeRefgenItem);

        openTrackItem.setText("Open Track");
        openTrackItem.setEnabled(false);
        openTrackItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openTrackItemActionPerformed(evt);
            }
        });
        visualisationMenu.add(openTrackItem);

        menuBar.add(visualisationMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(visualPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 975, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(visualPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE)
        );

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width-dialogSize.width)/2,(screenSize.height-dialogSize.height)/2);
    }// </editor-fold>//GEN-END:initComponents

    private void importItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importItemActionPerformed
        viewController.newImportDialog();
    }//GEN-LAST:event_importItemActionPerformed

    private void logoffItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoffItemActionPerformed
        viewController.logoff();
}//GEN-LAST:event_logoffItemActionPerformed

    private void shutdownItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shutdownItemActionPerformed
        alertListenersOfShutdown();
    }//GEN-LAST:event_shutdownItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        alertListenersOfShutdown();
    }//GEN-LAST:event_formWindowClosing

    private void alertListenersOfShutdown(){
        viewController.shutDownApplication();
    }

    private void showDataAdminItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showDataAdminItemActionPerformed
        viewController.newAdminDialog();
    }//GEN-LAST:event_showDataAdminItemActionPerformed

    private void openRefgenItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openRefgenItemActionPerformed
        viewController.openRefGen();
}//GEN-LAST:event_openRefgenItemActionPerformed

    private void closeRefgenItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeRefgenItemActionPerformed
        viewController.closeRefGen();
}//GEN-LAST:event_closeRefgenItemActionPerformed

    private void openTrackItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openTrackItemActionPerformed
        viewController.openTrack();
    }//GEN-LAST:event_openTrackItemActionPerformed




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem closeRefgenItem;
    private javax.swing.JMenuItem importItem;
    private javax.swing.JMenuItem logoffItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openRefgenItem;
    private javax.swing.JMenuItem openTrackItem;
    private javax.swing.JMenu projectMenu;
    private javax.swing.JMenuItem showDataAdminItem;
    private javax.swing.JMenuItem shutdownItem;
    private javax.swing.JPanel visualPanel;
    private javax.swing.JMenu visualisationMenu;
    // End of variables declaration//GEN-END:variables

    @Override
    public void releaseButtons() {
        importItem.setEnabled(true);
        showDataAdminItem.setEnabled(true);
        logoffItem.setEnabled(true);
        shutdownItem.setEnabled(true);
    }



    @Override
    public void showRefGenPanel(BasePanel genome){
        visualPanel.add(genome);

        // enable/disable buttons
        closeRefgenItem.setEnabled(true);
        openRefgenItem.setEnabled(false);
        openTrackItem.setEnabled(true);

        visualPanel.updateUI();
    }

    @Override
    public void removeRefGenPanel(BasePanel genomeViewer) {
        // enable/disable buttons
        closeRefgenItem.setEnabled(false);
        openRefgenItem.setEnabled(true);
        openTrackItem.setEnabled(false);

        visualPanel.remove(genomeViewer);

        visualPanel.updateUI();

    }



    @Override
    public void showTrackPanel(BasePanel trackPanel, TrackItem trackMenuItem) {
        // create a ne menu item for this track
        trackMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                TrackItem t = (TrackItem) e.getSource();
                PersistantTrack track = t.getTrack();
                viewController.closeTrack(track);
            }
        });

        // add the menu item
        visualisationMenu.add(trackMenuItem);

        // add the trackPanel
        visualPanel.add(trackPanel);
        visualPanel.updateUI();
    }


    @Override
    public void closeTrackPanel(BasePanel trackPanel, TrackItem trackMenuItem) {
        visualisationMenu.remove(trackMenuItem);
        visualPanel.remove(trackPanel);
        visualPanel.updateUI();
    }

}
