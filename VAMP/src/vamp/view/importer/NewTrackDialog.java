package vamp.view.importer;

import java.awt.Component;
import vamp.importer.JobManagerI;
import vamp.importer.ReferenceJob;
import vamp.importer.RunJob;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import vamp.databackend.dataObjects.PersistantReference;
import vamp.databackend.dataObjects.PersistentRun;
import vamp.databackend.connector.ProjectConnector;
import vamp.parsing.common.ParserI;
import vamp.parsing.mappings.MappingParserI;
import vamp.parsing.mappings.JokParser;

/**
 *
 * @author ddoppmeier
 */
public class NewTrackDialog extends javax.swing.JDialog {

    private static final long serialVersionUID = 774275254;

    private File mappingFile;
    private JobManagerI taskManager;
    private RunJob[] runjobs;
    private ReferenceJob[] refGenJobs;
    private MappingParserI[] parsers = new MappingParserI[]{new JokParser()};
    private MappingParserI currentParser;

    /** Creates new form NewTrackDialog */
    public NewTrackDialog(java.awt.Frame parent, JobManagerI taskManager) {
        super(parent, true);
        this.taskManager = taskManager;
        this.runjobs = this.getRunJobs();
        this.refGenJobs = this.getRefGenJobs();
        initComponents();
        // choose the default parser. first entry is shown in combobox by default
        currentParser = parsers[0];
    }

    private RunJob[] getRunJobs() {

        // create list to collect run jobs. including new runs and already persistant runs
        List<RunJob> runlist = new ArrayList<RunJob>();

        // get list of already persistant runs from db and add them to list
        List<PersistentRun> dbRuns = ProjectConnector.getInstance().getRuns();
        for(Iterator<PersistentRun> it = dbRuns.iterator(); it.hasNext(); ){
            PersistentRun r = it.next();
            // file and parser parameter are not needed, because this runjob
            // is created for linking from track to runID and not for
            // storing of reads itself (they are already persistent)
            runlist.add(new RunJob(r.getId(), null, r.getDescription(), null, r.getTimestamp()));
        }

        // add new runs (to be imported) to the list
        runlist.addAll(taskManager.getRunJobList());

        // add all runJobs to array (for use in comboboxes for example)
        RunJob[] runs = new RunJob[runlist.size()];
        for(int i = 0; i < runlist.size(); i++){
            runs[i] = runlist.get(i);
        }

        return runs;
    }

    private ReferenceJob[] getRefGenJobs() {
        List<ReferenceJob> list = new ArrayList<ReferenceJob>();

        List<PersistantReference> dbGens = ProjectConnector.getInstance().getGenomes();
        for(Iterator<PersistantReference> it = dbGens.iterator(); it.hasNext(); ){
            PersistantReference r = it.next();
            list.add(new ReferenceJob(r.getId(), null, null, r.getDescription(), r.getName(), r.getTimeStamp()));
        }

        list.addAll(taskManager.getRefGenJobList());

        ReferenceJob[] gens = new ReferenceJob[list.size()];
        for(int i = 0; i< list.size(); i++){
            gens[i] = list.get(i);
        }

        return gens;
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mappingFileLabel = new javax.swing.JLabel();
        mappingFileField = new javax.swing.JTextField();
        chooseButton = new javax.swing.JButton();
        descriptionLabel = new javax.swing.JLabel();
        readBox = new javax.swing.JComboBox(runjobs);
        readLabel = new javax.swing.JLabel();
        descriptionField = new javax.swing.JTextField();
        refGenLabel = new javax.swing.JLabel();
        refGenBox = new javax.swing.JComboBox(refGenJobs);
        addButton = new javax.swing.JButton();
        seperator = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox(parsers);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add mappings");

        mappingFileLabel.setText("Mapping file:");

        mappingFileField.setEditable(false);
        mappingFileField.setText("no file chosen");

        chooseButton.setText("open");
        chooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseButtonActionPerformed(evt);
            }
        });

        descriptionLabel.setText("Description:");

        readLabel.setText("Read data:");

        refGenLabel.setText("Reference genome:");

        addButton.setText("OK");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Output type:");

        jComboBox1.setRenderer(new DefaultListCellRenderer(){
            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus){
                if(value instanceof ParserI){
                    return super.getListCellRendererComponent(list, ((ParserI) value).getParserName(), index, isSelected, cellHasFocus);
                } else {
                    return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                }
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(seperator, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(refGenLabel)
                            .addComponent(readLabel)
                            .addComponent(mappingFileLabel)
                            .addComponent(descriptionLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jComboBox1, 0, 269, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(mappingFileField, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chooseButton))
                            .addComponent(descriptionField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                            .addComponent(readBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 269, Short.MAX_VALUE)
                            .addComponent(refGenBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 269, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mappingFileLabel)
                    .addComponent(mappingFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descriptionLabel)
                    .addComponent(descriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(readLabel)
                    .addComponent(readBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refGenLabel)
                    .addComponent(refGenBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seperator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addButton)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-426)/2, (screenSize.height-263)/2, 426, 263);
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed

        String description = descriptionField.getText();
        RunJob runJob = (RunJob) readBox.getSelectedItem();
        ReferenceJob refGenJob = (ReferenceJob) refGenBox.getSelectedItem();

        if(mappingFile == null || runJob == null || refGenJob == null || description.equals("")){
            JOptionPane.showMessageDialog(this, "Please fill out the complete form!", "Missing information", JOptionPane.ERROR_MESSAGE);
        } else {
            this.setVisible(false);
            taskManager.createTrackTask(currentParser, mappingFile, description, runJob, refGenJob);
        }
}//GEN-LAST:event_addButtonActionPerformed

    private void chooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseButtonActionPerformed

        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter(currentParser.getInputFileDescription(), currentParser.getFileExtension()));

        int result = fc.showOpenDialog(this);

        File file = null;

        if(result == 0){
            // file chosen
            file = fc.getSelectedFile();

            if(file.canRead()){
                mappingFile = file;
                mappingFileField.setText(mappingFile.getAbsolutePath());
            }
        }
    }//GEN-LAST:event_chooseButtonActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        MappingParserI newparser = (MappingParserI) jComboBox1.getSelectedItem();
        if(currentParser != newparser){
            currentParser = newparser;
            mappingFile = null;
            mappingFileField.setText("");
            descriptionField.setText("");
        }

    }//GEN-LAST:event_jComboBox1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton chooseButton;
    private javax.swing.JTextField descriptionField;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField mappingFileField;
    private javax.swing.JLabel mappingFileLabel;
    private javax.swing.JComboBox readBox;
    private javax.swing.JLabel readLabel;
    private javax.swing.JComboBox refGenBox;
    private javax.swing.JLabel refGenLabel;
    private javax.swing.JSeparator seperator;
    // End of variables declaration//GEN-END:variables

}
