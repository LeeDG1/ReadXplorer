package de.cebitec.readXplorer.tools.snp;

import de.cebitec.readXplorer.view.TopComponentExtended;
import de.cebitec.readXplorer.view.TopComponentHelper;
import javax.swing.JPanel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;

/**
 * Top component which displays SNP detection tabs.
 * 
 * @author jwinneba, rhilker
 */
@ConvertAsProperties(dtd = "-//de.cebitec.readXplorer.tools.snp//SNP_Detection//EN",
autostore = false)
@TopComponent.Description(preferredID = "SNP_DetectionTopComponent",
iconBase = "de/cebitec/readXplorer/tools/snp/snpDetection.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "de.cebitec.readXplorer.tools.snp.SNP_DetectionTopComponent")
@ActionReference(path = "Menu/Window", position = 950)
@TopComponent.OpenActionRegistration(displayName = "#CTL_SNP_DetectionAction",
preferredID = "SNP_DetectionTopComponent")
public final class SNP_DetectionTopComponent extends TopComponentExtended {

    private static final long serialVersionUID = 1L;   

    @NbBundle.Messages({
        "CTL_SNP_DetectionTopComp=SNP Detection Window", 
        "HINT_SNP_DetectionTopComp=This is a SNP Detection window"})
    public SNP_DetectionTopComponent() {
        initComponents();
        setName(Bundle.CTL_SNP_DetectionTopComp());
        setToolTipText(Bundle.HINT_SNPDetectionTopComp());
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);
        TopComponentHelper.setupContainerListener(snpTabs, preferredID());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        snpTabs = new javax.swing.JTabbedPane();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(snpTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(snpTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane snpTabs;
    // End of variables declaration//GEN-END:variables

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
}

    @Override
    public void componentClosed() {
        snpTabs.removeAll();
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // store your settings here
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // read your settings according to their version here
    }

    /**
     * This method needs to be called in order to open a new tab for snp detection.
     * @param referenceViewer the reference viewer for which the snp detection should be carried out.
     * @param trackIds the list of track ids (associated to the reference viewer) for which the snp 
     *          detection should be carried out.
     */
    public void openDetectionTab(String panelName, JPanel snpDetectionResultPanel) {
        TopComponentHelper.openTableTab(snpTabs, panelName, snpDetectionResultPanel);
    }
    
    /**
     * @return true, if this component already contains other components, false
     * otherwise.
     */
    public boolean hasComponents() {
        return this.snpTabs.getComponentCount() > 0;
    }
}
