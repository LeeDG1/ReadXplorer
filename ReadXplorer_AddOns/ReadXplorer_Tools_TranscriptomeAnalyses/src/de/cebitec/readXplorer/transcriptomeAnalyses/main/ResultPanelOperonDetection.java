package de.cebitec.readXplorer.transcriptomeAnalyses.main;

/*
 * GeneStartsResultPanel.java
 *
 * Created on 27.01.2012, 14:31:03
 */
import de.cebitec.readXplorer.databackend.ResultTrackAnalysis;
import de.cebitec.readXplorer.exporter.excel.ExcelExportFileChooser;
import de.cebitec.readXplorer.transcriptomeAnalyses.datastructures.Operon;
import de.cebitec.readXplorer.transcriptomeAnalyses.datastructures.OperonAdjacency;
import de.cebitec.readXplorer.util.LineWrapCellRenderer;
import de.cebitec.readXplorer.util.UneditableTableModel;
import de.cebitec.readXplorer.view.analysis.ResultTablePanel;
import de.cebitec.readXplorer.view.dataVisualisation.BoundsInfoManager;
import de.cebitec.readXplorer.view.dataVisualisation.referenceViewer.ReferenceViewer;
import de.cebitec.readXplorer.view.tableVisualization.TableComparatorProvider;
import de.cebitec.readXplorer.view.tableVisualization.TableUtils;
import de.cebitec.readXplorer.view.tableVisualization.tableFilter.TableRightClickFilter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 * This panel is capable of showing a table with detected operons and contains
 * an export button, which exports the data into an excel file.
 *
 * @author -Rolf Hilker-
 */
public class ResultPanelOperonDetection extends ResultTablePanel {

    private static final long serialVersionUID = 1L;
    public static final String OPERONS_TOTAL = "Total number of detected operons";
    public static final String OPERONS_WITH_OVERLAPPING_READS = "Operons with reads overlapping only one feature edge";
    public static final String OPERONS_WITH_INTERNAL_READS = "Operons with internal reads";
    public static final String OPERONS_BACKGROUND_THRESHOLD = "Minimum number of spanning reads (Background threshold)";
    private BoundsInfoManager boundsInfoManager;
    private ReferenceViewer referenceViewer;
    private OperonDetectionResult operonResult;
    private HashMap<String, Object> operonDetStats;
    private TableRightClickFilter<UneditableTableModel> tableFilter = new TableRightClickFilter<>(UneditableTableModel.class);

    /**
     * This panel is capable of showing a table with detected operons and
     * contains an export button, which exports the data into an excel file.
     */
    public ResultPanelOperonDetection() {
        initComponents();
        this.operonDetectionTable.getTableHeader().addMouseListener(tableFilter);
        this.initStatsMap();

        DefaultListSelectionModel model = (DefaultListSelectionModel) this.operonDetectionTable.getSelectionModel();
        model.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                int posColumnIdx = 5;
                int chromColumnIdx = 3;
                TableUtils.showPosition(operonDetectionTable, posColumnIdx, chromColumnIdx, getBoundsInfoManager());
            }
        });
    }

    /**
     * Initializes the statistics map.
     */
    private void initStatsMap() {
        operonDetStats = new HashMap<>();
        operonDetStats.put(OPERONS_TOTAL, 0);
        operonDetStats.put(OPERONS_WITH_OVERLAPPING_READS, 0);
        operonDetStats.put(OPERONS_WITH_INTERNAL_READS, 0);
        operonDetStats.put(ResultPanelTranscriptionStart.MAPPINGS_COUNT, 0.0);
        operonDetStats.put(ResultPanelTranscriptionStart.MAPPINGS_MEAN_LENGTH, 0.0);
        operonDetStats.put(ResultPanelTranscriptionStart.MAPPINGS_MILLION, 0.0);
        operonDetStats.put(ResultPanelTranscriptionStart.BACKGROUND_THRESHOLD, 0.0);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        operonDetectionTable = new javax.swing.JTable();
        exportButton = new javax.swing.JButton();
        statisticsButton = new javax.swing.JButton();

        operonDetectionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Feature 1", "Feature 2", "Track", "Chromosome", "Strand", "Start Feature 1", "Start Feature 2", "Spanning Reads", "Operon String", "Chromosome ID", "Track ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(operonDetectionTable);
        operonDetectionTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "ResultPanelOperonDetection.operonDetectionTable.columnModel.title0")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "OperonDetectionResultPanel.operonDetectionTable.columnModel.title7")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "ResultPanelOperonDetection.operonDetectionTable.columnModel.title9")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "ResultPanelOperonDetection.operonDetectionTable.columnModel.title3")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(4).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "OperonDetectionResultPanel.operonDetectionTable.columnModel.title1")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(5).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "OperonDetectionResultPanel.operonDetectionTable.columnModel.title2")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(6).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "OperonDetectionResultPanel.operonDetectionTable.columnModel.title8")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(7).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "OperonDetectionResultPanel.operonDetectionTable.columnModel.title6")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(8).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "ResultPanelOperonDetection.operonDetectionTable.columnModel.title10")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(9).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "ResultPanelOperonDetection.operonDetectionTable.columnModel.title9_1")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(10).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "ResultPanelOperonDetection.operonDetectionTable.columnModel.title10_1")); // NOI18N

        exportButton.setText(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "ResultPanelOperonDetection.exportButton.text")); // NOI18N
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        statisticsButton.setText(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "ResultPanelOperonDetection.statisticsButton.text")); // NOI18N
        statisticsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statisticsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(statisticsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportButton))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 840, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statisticsButton)
                    .addComponent(exportButton)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        ExcelExportFileChooser fileChooser = new ExcelExportFileChooser(new String[]{"xls"}, "xls", operonResult);
    }//GEN-LAST:event_exportButtonActionPerformed

    private void statisticsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statisticsButtonActionPerformed
        JOptionPane.showMessageDialog(this, new OperonDetectionStatsPanel(operonDetStats), "Operon Detection Statistics", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_statisticsButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable operonDetectionTable;
    private javax.swing.JButton statisticsButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Adds the data from this OperonDetectionResult to the data already
     * available in this result panel. All statistics etc. are also updated.
     *
     * @param newResult the result to add
     */
    @Override
    public void addResult(ResultTrackAnalysis newResult) {
        if (newResult instanceof OperonDetectionResult) {
            OperonDetectionResult operonResultNew = (OperonDetectionResult) newResult;
            final int nbColumns = 13;
            final List<Operon> operons = new ArrayList<>(operonResultNew.getResults());

            if (this.operonResult == null) {
                this.operonResult = operonResultNew;
            } else {
                this.operonResult.getResults().addAll(operonResultNew.getResults());
            }

            DefaultTableModel model = (DefaultTableModel) operonDetectionTable.getModel();
            LineWrapCellRenderer lineWrapCellRenderer = new LineWrapCellRenderer();
            operonDetectionTable.getColumnModel().getColumn(0).setCellRenderer(lineWrapCellRenderer);
            operonDetectionTable.getColumnModel().getColumn(1).setCellRenderer(lineWrapCellRenderer);
            operonDetectionTable.getColumnModel().getColumn(3).setCellRenderer(lineWrapCellRenderer);
            operonDetectionTable.getColumnModel().getColumn(4).setCellRenderer(lineWrapCellRenderer);
            operonDetectionTable.getColumnModel().getColumn(5).setCellRenderer(lineWrapCellRenderer);
            operonDetectionTable.getColumnModel().getColumn(6).setCellRenderer(lineWrapCellRenderer);

            int operonsWithOverlapping = 0;
            int operonsWithInternal = 0;
            boolean hasOverlappingReads;
            boolean hasInternalReads;

            for (Operon operon : operons) {
                String annoName1 = "";
                String annoName2 = "";
                String strand = (operon.getOperonAdjacencies().get(0).getFeature1().isFwdStrandString()) + "\n";
                String startAnno1 = "";
                String startAnno2 = "";
                String readsAnno1 = "";
                String readsAnno2 = "";
                String internalReads = "";
                String spanningReads = "";
                hasOverlappingReads = false;
                hasInternalReads = false;

                int chromID = operon.getOperonAdjacencies().get(0).getFeature1().getChromId();

                for (OperonAdjacency opAdj : operon.getOperonAdjacencies()) {
                    annoName1 += opAdj.getFeature1().toString() + "\n";
                    annoName2 += opAdj.getFeature2().toString() + "\n";
                    startAnno1 += opAdj.getFeature1().getStart() + "\n";
                    startAnno2 += opAdj.getFeature2().getStart() + "\n";
                    readsAnno1 += opAdj.getReadsFeature1() + "\n";
                    readsAnno2 += opAdj.getReadsFeature2() + "\n";
                    internalReads += opAdj.getInternalReads() + "\n";
                    spanningReads += opAdj.getSpanningReads() + "\n";

                    hasInternalReads = opAdj.getInternalReads() > 0;
                    hasOverlappingReads = opAdj.getReadsFeature1() > 0 || opAdj.getReadsFeature2() > 0;

                }
                Object[] rowData = new Object[nbColumns];
                int i = 0;
                rowData[i++] = annoName1;
                rowData[i++] = annoName2;
                rowData[i++] = operonResultNew.getTrackMap().get(operon.getTrackId());
                rowData[i++] = operonResultNew.getChromosomeMap().get(operon.getOperonAdjacencies().get(0).getFeature1().getChromId());
                rowData[i++] = strand;
                rowData[i++] = startAnno1;
                rowData[i++] = startAnno2;
//                rowData[6] = readsAnno1;
//                rowData[7] = readsAnno2;
//                rowData[8] = internalReads;
                rowData[i++] = spanningReads;
                rowData[i++] = operon.toOperonString();
                rowData[i++] = chromID;
                rowData[i++] = operon.getTrackId();
                if (!annoName1.isEmpty() && !annoName2.isEmpty()) {
                    model.addRow(rowData);
                }

                if (hasOverlappingReads) {
                    ++operonsWithOverlapping;
                }
                if (hasInternalReads) {
                    ++operonsWithInternal;
                }

            }

//            TableRowSorter<TableModel> sorter = new TableRowSorter<>();
//            operonDetectionTable.setRowSorter(sorter);
//            sorter.setModel(model);
//            for (int i = 3; i < 8; ++i) {
//                TableComparatorProvider.setStringComparator(sorter, i);
//            }

            operonDetStats.put(OPERONS_TOTAL, (Integer) operonDetStats.get(OPERONS_TOTAL) + operons.size());
            operonDetStats.put(OPERONS_WITH_OVERLAPPING_READS, (Integer) operonDetStats.get(OPERONS_WITH_OVERLAPPING_READS) + operonsWithOverlapping);
            operonDetStats.put(OPERONS_WITH_INTERNAL_READS, (Integer) operonDetStats.get(OPERONS_WITH_INTERNAL_READS) + operonsWithInternal);
            operonDetStats.put(ResultPanelTranscriptionStart.MAPPINGS_COUNT, (Double) operonDetStats.get(ResultPanelTranscriptionStart.MAPPINGS_COUNT) + operonResultNew.getStats().getMc());
            operonDetStats.put(ResultPanelTranscriptionStart.MAPPINGS_MEAN_LENGTH, (Double) operonDetStats.get(ResultPanelTranscriptionStart.MAPPINGS_MEAN_LENGTH) + operonResultNew.getStats().getMml());
            operonDetStats.put(ResultPanelTranscriptionStart.MAPPINGS_MILLION, (Double) operonDetStats.get(ResultPanelTranscriptionStart.MAPPINGS_MILLION) + operonResultNew.getStats().getMm());
            operonDetStats.put(ResultPanelTranscriptionStart.BACKGROUND_THRESHOLD, (Double) operonDetStats.get(ResultPanelTranscriptionStart.BACKGROUND_THRESHOLD) + operonResultNew.getStats().getBg());

            operonResult.setStatsAndParametersMap(operonDetStats);
        }
    }

    /**
     * @return The number of detected operons
     */
    @Override
    public int getResultSize() {
        return this.operonResult.getResults().size();
    }

    /**
     * Set the reference viewer needed for updating the currently shown position
     * and extracting the reference sequence.
     *
     * @param referenceViewer the reference viewer belonging to this analysis
     * result
     */
    public void setReferenceViewer(ReferenceViewer referenceViewer) {
        this.boundsInfoManager = referenceViewer.getBoundsInformationManager();
        this.referenceViewer = referenceViewer;
    }
}
