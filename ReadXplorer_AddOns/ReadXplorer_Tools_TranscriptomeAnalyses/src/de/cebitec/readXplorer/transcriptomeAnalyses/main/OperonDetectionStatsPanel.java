package de.cebitec.readXplorer.transcriptomeAnalyses.main;

import java.util.HashMap;
import org.openide.util.NbBundle;

/**
 * Panel for showing the the statistics of an operon detection.
 *
 * @author Rolf Hilker <rhilker at cebitec.uni-bielefeld.de>
 */
public class OperonDetectionStatsPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;
    private HashMap<String, Object> operonStatsMap;

    /**
     * Creates new form OperonDetectionStatsPanel
     *
     * @param operonStatsMap result of an operon detection
     */
    public OperonDetectionStatsPanel(HashMap<String, Object> operonStatsMap) {
        this.operonStatsMap = operonStatsMap;
        this.initComponents();
        this.initAdditionalComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        operonDetectionStatsScrollpane = new javax.swing.JScrollPane();
        operonDetectionStatsTable = new javax.swing.JTable();

        operonDetectionStatsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        operonDetectionStatsScrollpane.setViewportView(operonDetectionStatsTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(operonDetectionStatsScrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(operonDetectionStatsScrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane operonDetectionStatsScrollpane;
    private javax.swing.JTable operonDetectionStatsTable;
    // End of variables declaration//GEN-END:variables

    private void initAdditionalComponents() {
        operonDetectionStatsTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                    {"Operon Statistics", ""},
            {ResultPanelOperonDetection.OPERONS_TOTAL,
                String.valueOf(this.operonStatsMap.get(ResultPanelOperonDetection.OPERONS_TOTAL))},
            {ResultPanelOperonDetection.OPERONS_WITH_OVERLAPPING_READS,
                String.valueOf(this.operonStatsMap.get(ResultPanelOperonDetection.OPERONS_WITH_OVERLAPPING_READS))},
            {ResultPanelOperonDetection.OPERONS_WITH_INTERNAL_READS, String.valueOf(this.operonStatsMap.get(ResultPanelOperonDetection.OPERONS_WITH_INTERNAL_READS))},
            {"Mapping Statistics", ""},
            {ResultPanelTranscriptionStart.MAPPINGS_COUNT,
                String.valueOf(this.operonStatsMap.get(ResultPanelTranscriptionStart.MAPPINGS_COUNT))},
            {ResultPanelTranscriptionStart.MAPPINGS_MEAN_LENGTH, String.valueOf(this.operonStatsMap.get(ResultPanelTranscriptionStart.MAPPINGS_MEAN_LENGTH))},
            {ResultPanelTranscriptionStart.MAPPINGS_MILLION,
                String.valueOf(this.operonStatsMap.get(ResultPanelTranscriptionStart.MAPPINGS_MILLION))},
            {ResultPanelTranscriptionStart.BACKGROUND_THRESHOLD,
                String.valueOf(this.operonStatsMap.get(ResultPanelTranscriptionStart.BACKGROUND_THRESHOLD))}
        },
                new String[]{
            NbBundle.getMessage(OperonDetectionStatsPanel.class, "OperonDetectionStatsPanel.operonDetectionStatsTable.columnModel.title0"),
            NbBundle.getMessage(OperonDetectionStatsPanel.class, "OperonDetectionStatsPanel.operonDetectionStatsTable.columnModel.title1")
        }) {
            private static final long serialVersionUID = 1L;
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
    }
}
