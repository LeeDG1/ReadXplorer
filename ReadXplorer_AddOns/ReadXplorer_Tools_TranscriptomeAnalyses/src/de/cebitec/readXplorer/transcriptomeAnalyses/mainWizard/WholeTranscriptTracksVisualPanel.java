package de.cebitec.readXplorer.transcriptomeAnalyses.mainWizard;

import de.cebitec.readXplorer.transcriptomeAnalyses.verifier.DoubleVerifier;
import de.cebitec.readXplorer.transcriptomeAnalyses.verifier.IntegerVerifier;
import java.util.prefs.Preferences;
import javax.swing.JPanel;
import org.openide.util.NbPreferences;

public final class WholeTranscriptTracksVisualPanel extends JPanel {

    private final String wizardName;

    /**
     * Creates new form WholeTranscriptTracksVisualPanel
     */
    public WholeTranscriptTracksVisualPanel(String wizardName) {
        this.wizardName = wizardName;
        initComponents();
        this.fractionNovelRegionTF.setInputVerifier(new DoubleVerifier(this.fractionNovelRegionTF));
        this.fractionOperonDetectionTF.setInputVerifier(new DoubleVerifier(this.fractionOperonDetectionTF));
        this.increaseRatioValueTF.setInputVerifier(new IntegerVerifier(this.increaseRatioValueTF));
        this.increaseRatioValueTF.setEnabled(false);
        updateCheckFields();
    }

    @Override
    public String getName() {
        return "Determination of novel regions, operon structures and RPKM values using whole transcriptome data";
    }

    public boolean isNewRegions() {
        return this.newRegionsCheckBox.isSelected();
    }

    public boolean isOperonDetection() {
        return this.operonsCheckBox.isSelected();
    }

    public boolean isRPKM() {
        return this.rpkmCheckBox.isSelected();
    }

    public double getFractionForOperonDetection() {
        return Double.valueOf(this.fractionOperonDetectionTF.getText());
    }

    public Double getFractionForNewRegionDetection() {
        return Double.valueOf(this.fractionNovelRegionTF.getText());
    }

    public Integer getMinBoundaryForNovelRegionDetection() {
        return Integer.valueOf(this.minBoundaryNovelRegionTF.getText());
    }

    public boolean isInclusionOfRatioValueSelected() {
        return this.includeRatioValueCB.isSelected();
    }

    public Integer getIncreaseRatioValue() {
        return Integer.valueOf(this.increaseRatioValueTF.getText());
    }

    /**
     * Updates the checkboxes for the read classes with the globally stored
     * settings for this wizard. If no settings were stored, the default
     * configuration is chosen.
     */
    private void updateCheckFields() {
        Preferences pref = NbPreferences.forModule(Object.class);
        this.rpkmCheckBox.setSelected(pref.getBoolean(wizardName + TranscriptomeAnalysisWizardIterator.PROP_NORMAL_RPKM_ANALYSIS, false));
        this.operonsCheckBox.setSelected(pref.getBoolean(wizardName + TranscriptomeAnalysisWizardIterator.PROP_OPERON_ANALYSIS, false));
        this.newRegionsCheckBox.setSelected(pref.getBoolean(wizardName + TranscriptomeAnalysisWizardIterator.PROP_NOVEL_ANALYSIS, false));
        this.fractionNovelRegionTF.setText(pref.get(wizardName + TranscriptomeAnalysisWizardIterator.PROP_FRACTION_NOVELREGION_DETECTION, "0.05"));
        this.minBoundaryNovelRegionTF.setText(pref.get(wizardName + TranscriptomeAnalysisWizardIterator.PROP_MIN_BOUNDRY_LENGTH, "100"));
        this.fractionOperonDetectionTF.setText(pref.get(wizardName + TranscriptomeAnalysisWizardIterator.PROP_Fraction, "0.05"));
        this.increaseRatioValueTF.setText(pref.get(wizardName + TranscriptomeAnalysisWizardIterator.PROP_RAIO_NOVELREGION_DETECTION, "5"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newRegionParamsPanel = new javax.swing.JPanel();
        fractionNovelRegionTF = new javax.swing.JTextField();
        minBoundaryNovelRegionTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        includeRatioValueCB = new javax.swing.JCheckBox();
        increaseRatioValueTF = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        operonDetectionParamsPanel = new javax.swing.JPanel();
        fractionOperonDetectionTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        newRegionsCheckBox = new javax.swing.JCheckBox();
        operonsCheckBox = new javax.swing.JCheckBox();
        rpkmCheckBox = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();

        fractionNovelRegionTF.setText(org.openide.util.NbBundle.getMessage(WholeTranscriptTracksVisualPanel.class, "WholeTranscriptTracksVisualPanel.fractionNovelRegionTF.text")); // NOI18N
        fractionNovelRegionTF.setPreferredSize(new java.awt.Dimension(30, 20));

        minBoundaryNovelRegionTF.setText(org.openide.util.NbBundle.getMessage(WholeTranscriptTracksVisualPanel.class, "WholeTranscriptTracksVisualPanel.minBoundaryNovelRegionTF.text")); // NOI18N
        minBoundaryNovelRegionTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minBoundaryNovelRegionTFActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(WholeTranscriptTracksVisualPanel.class, "WholeTranscriptTracksVisualPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(WholeTranscriptTracksVisualPanel.class, "WholeTranscriptTracksVisualPanel.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(includeRatioValueCB, org.openide.util.NbBundle.getMessage(WholeTranscriptTracksVisualPanel.class, "WholeTranscriptTracksVisualPanel.includeRatioValueCB.text")); // NOI18N
        includeRatioValueCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeRatioValueCBActionPerformed(evt);
            }
        });

        increaseRatioValueTF.setText(org.openide.util.NbBundle.getMessage(WholeTranscriptTracksVisualPanel.class, "WholeTranscriptTracksVisualPanel.increaseRatioValueTF.text")); // NOI18N

        javax.swing.GroupLayout newRegionParamsPanelLayout = new javax.swing.GroupLayout(newRegionParamsPanel);
        newRegionParamsPanel.setLayout(newRegionParamsPanelLayout);
        newRegionParamsPanelLayout.setHorizontalGroup(
            newRegionParamsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newRegionParamsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newRegionParamsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(newRegionParamsPanelLayout.createSequentialGroup()
                        .addComponent(jSeparator3)
                        .addContainerGap())
                    .addGroup(newRegionParamsPanelLayout.createSequentialGroup()
                        .addGroup(newRegionParamsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(newRegionParamsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(fractionNovelRegionTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(newRegionParamsPanelLayout.createSequentialGroup()
                                .addGroup(newRegionParamsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(includeRatioValueCB))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(newRegionParamsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(increaseRatioValueTF)
                                    .addComponent(minBoundaryNovelRegionTF, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))))
                        .addGap(18, 18, 18))))
        );
        newRegionParamsPanelLayout.setVerticalGroup(
            newRegionParamsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newRegionParamsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newRegionParamsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fractionNovelRegionTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(newRegionParamsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minBoundaryNovelRegionTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(newRegionParamsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(increaseRatioValueTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(includeRatioValueCB))
                .addGap(1, 1, 1))
        );

        fractionOperonDetectionTF.setText(org.openide.util.NbBundle.getMessage(WholeTranscriptTracksVisualPanel.class, "WholeTranscriptTracksVisualPanel.fractionOperonDetectionTF.text")); // NOI18N
        fractionOperonDetectionTF.setPreferredSize(new java.awt.Dimension(30, 20));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(WholeTranscriptTracksVisualPanel.class, "WholeTranscriptTracksVisualPanel.jLabel3.text")); // NOI18N

        javax.swing.GroupLayout operonDetectionParamsPanelLayout = new javax.swing.GroupLayout(operonDetectionParamsPanel);
        operonDetectionParamsPanel.setLayout(operonDetectionParamsPanelLayout);
        operonDetectionParamsPanelLayout.setHorizontalGroup(
            operonDetectionParamsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(operonDetectionParamsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(fractionOperonDetectionTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );
        operonDetectionParamsPanelLayout.setVerticalGroup(
            operonDetectionParamsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(operonDetectionParamsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(operonDetectionParamsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fractionOperonDetectionTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(newRegionsCheckBox, org.openide.util.NbBundle.getMessage(WholeTranscriptTracksVisualPanel.class, "WholeTranscriptTracksVisualPanel.newRegionsCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(operonsCheckBox, org.openide.util.NbBundle.getMessage(WholeTranscriptTracksVisualPanel.class, "WholeTranscriptTracksVisualPanel.operonsCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(rpkmCheckBox, org.openide.util.NbBundle.getMessage(WholeTranscriptTracksVisualPanel.class, "WholeTranscriptTracksVisualPanel.rpkmCheckBox.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rpkmCheckBox)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(newRegionsCheckBox)
                                    .addComponent(operonsCheckBox))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(newRegionParamsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(operonDetectionParamsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jSeparator2)
                            .addComponent(jSeparator1))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newRegionParamsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(newRegionsCheckBox)
                        .addGap(55, 55, 55)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(operonDetectionParamsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(operonsCheckBox))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rpkmCheckBox)
                .addGap(18, 18, 18))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void includeRatioValueCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeRatioValueCBActionPerformed
        if (includeRatioValueCB.isSelected()) {
            increaseRatioValueTF.setEnabled(true);
        } else {
            increaseRatioValueTF.setEnabled(false);
        }
    }//GEN-LAST:event_includeRatioValueCBActionPerformed

    private void minBoundaryNovelRegionTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minBoundaryNovelRegionTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minBoundaryNovelRegionTFActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fractionNovelRegionTF;
    private javax.swing.JTextField fractionOperonDetectionTF;
    private javax.swing.JCheckBox includeRatioValueCB;
    private javax.swing.JTextField increaseRatioValueTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField minBoundaryNovelRegionTF;
    private javax.swing.JPanel newRegionParamsPanel;
    private javax.swing.JCheckBox newRegionsCheckBox;
    private javax.swing.JPanel operonDetectionParamsPanel;
    private javax.swing.JCheckBox operonsCheckBox;
    private javax.swing.JCheckBox rpkmCheckBox;
    // End of variables declaration//GEN-END:variables
}
