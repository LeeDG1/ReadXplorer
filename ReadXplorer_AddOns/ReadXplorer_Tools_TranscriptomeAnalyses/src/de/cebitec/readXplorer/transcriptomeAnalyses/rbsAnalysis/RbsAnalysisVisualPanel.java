/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cebitec.readXplorer.transcriptomeAnalyses.rbsAnalysis;

import de.cebitec.readXplorer.transcriptomeAnalyses.datastructures.TranscriptionStart;
import de.cebitec.readXplorer.transcriptomeAnalyses.verifier.IntegerVerifier;
import de.cebitec.readXplorer.view.dataVisualisation.referenceViewer.ReferenceViewer;
import de.erichseifert.gral.data.DataTable;
import de.erichseifert.gral.plots.BarPlot;
import de.erichseifert.gral.plots.axes.AxisRenderer;
import de.erichseifert.gral.plots.axes.LogarithmicRenderer2D;
import de.erichseifert.gral.plots.points.PointRenderer;
import de.erichseifert.gral.ui.InteractivePanel;
import de.erichseifert.gral.util.Insets2D;
import java.awt.Color;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.NbPreferences;

public final class RbsAnalysisVisualPanel extends JPanel {

    private String wizardName;
    private int oldValue;
    private ReferenceViewer referenceViewer;
    private List<TranscriptionStart> tss;
    private String refSeq;
    private File workingDir;

    /**
     * Creates new form RbsAnalysisVisualPanel
     */
    public RbsAnalysisVisualPanel(String wizardName, ReferenceViewer referenceViewer, List<TranscriptionStart> tss) {
        this.wizardName = wizardName;
        initComponents();
        additionalSettings();
        updateFields();
        this.referenceViewer = referenceViewer;
        this.tss = tss;
//        this.refSeq = referenceViewer.getReference().getSequence();
    }

    @Override
    public String getName() {
        return "Step #5";
    }

    private void additionalSettings() {
        this.regionForMotifSearchTF.setInputVerifier(new IntegerVerifier(this.regionForMotifSearchTF));
        this.expectedMotifWidth.setInputVerifier(new IntegerVerifier(this.expectedMotifWidth));
        this.noOfTryingTF.setInputVerifier(new IntegerVerifier(this.noOfTryingTF));
        this.minSpacerTF.setInputVerifier(new IntegerVerifier(this.minSpacerTF));
    }

    private void updateFields() {
        Preferences pref = NbPreferences.forModule(Object.class);
        this.regionForMotifSearchTF.setText(pref.get(wizardName + RbsAnalysisWizardIterator.PROP_RBS_ANALYSIS_REGION_LENGTH, "10"));
        this.expectedMotifWidth.setText(pref.get(wizardName + RbsAnalysisWizardIterator.PROP_RBS_ANALYSIS_LENGTH_MOTIFWIDTH, "6"));
        this.noOfTryingTF.setText(pref.get(wizardName + RbsAnalysisWizardIterator.PROP_RBS_ANALYSIS_NO_TRYING_BIOPROSPECTOR, "40"));
        this.minSpacerTF.setText(pref.get(wizardName + RbsAnalysisWizardIterator.PROP_RBS_ANALYSIS_MIN_SPACER, "6"));

    }

    public Integer getRegionLengthForMotifAnalysis() {
        return Integer.valueOf(this.regionForMotifSearchTF.getText());
    }

    public void setWorkingDir(File inputFile) {
        this.workingDir = inputFile;
    }

    public File getWorkingDir() {
        return workingDir;
    }

    public Integer getNoOfTrying() {
        return Integer.valueOf(this.noOfTryingTF.getText());
    }

    public Integer getExpectedMotifWidth() {
        return Integer.valueOf(this.expectedMotifWidth.getText());
    }
    
    public Integer getMinSpacer() {
        return Integer.valueOf(this.minSpacerTF.getText());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        regionForMotifSearchTF = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        expectedMotifWidth = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        directoryTF = new javax.swing.JTextField();
        chooseDirectory = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        noOfTryingTF = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        minSpacerTF = new javax.swing.JTextField();

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cebitec/readXplorer/transcriptomeAnalyses/resources/rbsMotifSearch.PNG"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(RbsAnalysisVisualPanel.class, "RbsAnalysisVisualPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(RbsAnalysisVisualPanel.class, "RbsAnalysisVisualPanel.jLabel3.text")); // NOI18N

        regionForMotifSearchTF.setText(org.openide.util.NbBundle.getMessage(RbsAnalysisVisualPanel.class, "RbsAnalysisVisualPanel.regionForMotifSearchTF.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(RbsAnalysisVisualPanel.class, "RbsAnalysisVisualPanel.jLabel5.text")); // NOI18N

        expectedMotifWidth.setText(org.openide.util.NbBundle.getMessage(RbsAnalysisVisualPanel.class, "RbsAnalysisVisualPanel.expectedMotifWidth.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(RbsAnalysisVisualPanel.class, "RbsAnalysisVisualPanel.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(RbsAnalysisVisualPanel.class, "RbsAnalysisVisualPanel.jLabel6.text")); // NOI18N

        directoryTF.setText(org.openide.util.NbBundle.getMessage(RbsAnalysisVisualPanel.class, "RbsAnalysisVisualPanel.directoryTF.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(chooseDirectory, org.openide.util.NbBundle.getMessage(RbsAnalysisVisualPanel.class, "RbsAnalysisVisualPanel.chooseDirectory.text")); // NOI18N
        chooseDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseDirectoryActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(RbsAnalysisVisualPanel.class, "RbsAnalysisVisualPanel.jLabel7.text")); // NOI18N

        noOfTryingTF.setText(org.openide.util.NbBundle.getMessage(RbsAnalysisVisualPanel.class, "RbsAnalysisVisualPanel.noOfTryingTF.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(RbsAnalysisVisualPanel.class, "RbsAnalysisVisualPanel.jLabel4.text")); // NOI18N

        minSpacerTF.setText(org.openide.util.NbBundle.getMessage(RbsAnalysisVisualPanel.class, "RbsAnalysisVisualPanel.minSpacerTF.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(directoryTF)
                        .addGap(18, 18, 18)
                        .addComponent(chooseDirectory))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(regionForMotifSearchTF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(expectedMotifWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(minSpacerTF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(243, 243, 243)
                                .addComponent(jButton1))
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(noOfTryingTF, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(regionForMotifSearchTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(expectedMotifWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(minSpacerTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(noOfTryingTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(directoryTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseDirectory))
                .addGap(34, 34, 34))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void chooseDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseDirectoryActionPerformed
        Preferences prefs = NbPreferences.forModule(Object.class);
        String currentDirPath = prefs.get(de.cebitec.readXplorer.transcriptomeAnalyses.enums.Preferences.CURRENT_DIR.toString(), null);
        JFileChooser fc = new JFileChooser(currentDirPath);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnValue = fc.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            this.directoryTF.setText(fc.getSelectedFile().getAbsolutePath().toString());
            this.setWorkingDir(fc.getSelectedFile());
            prefs.put(de.cebitec.readXplorer.transcriptomeAnalyses.enums.Preferences.CURRENT_DIR.toString(), fc.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_chooseDirectoryActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //        if (Integer.valueOf(this.seqLengthForChartAnalysisTF.getText()) > 0) {
            ////                int newValue = Integer.valueOf(this.seqLengthForChartAnalysisTF.getText());
            ////                this.firePropertyChange("newValue", this.oldValue, newValue);
            //            StringBuffer buffer;
            //            List<String> tmpSubstrings = new ArrayList<>();
            //            String substr;
            //            for (Integer startOfFeature : this.tss.keySet()) {
                //                boolean isFwd = this.tss.get(startOfFeature);
                //                if (isFwd) {
                    //                    substr = this.refSeq.substring(startOfFeature + 2 - getSequenceLengthForBaseDistAnalysis() + 2, startOfFeature);
                    //                    tmpSubstrings.add(substr);
                    //                } else {
                    //                    substr = this.refSeq.substring(startOfFeature - 2 - getSequenceLengthForBaseDistAnalysis() + 2, startOfFeature);
                    //                    buffer = new StringBuffer(substr);
                    //                    String reversedSubstr = buffer.reverse().toString();
                    ////                        String complement = Complement(reversedSubstr);
                    //                    tmpSubstrings.add(reversedSubstr);
                    //                }
                //            }
            //            DataTable dataGA = new DataTable(Double.class, Double.class);
            //            DataTable dataCT = new DataTable(Double.class, Double.class);
            //            HashMap<Double, Double[]> map = new HashMap<>();
            //            for (double i = 2; i > -(getSequenceLengthForBaseDistAnalysis() + 2); i--) {
                //                map.put(i, new Double[]{0.0, 0.0});
                //            }
            //            for (String string : tmpSubstrings) {
                //                double relativePosToFeatureStart = 2.0; // relative position to feature start
                //                for (int i = string.length() - 1; i >= 0; i--) {
                    //                    Double[] tmp = map.get(relativePosToFeatureStart);
                    //                    if (string.charAt(i) == 'A' || string.charAt(i) == 'G') {
                        //                        tmp[0]++;
                        //                    } else {
                        //                        tmp[1]++;
                        //                    }
                    //                    map.put(relativePosToFeatureStart, tmp);
                    //                    relativePosToFeatureStart--;
                    //                }
                //            }
            //
            //            for (Double relPosToFeatureStart : map.keySet()) {
                //                Double[] absoluteOccurenceOnPosition = map.get(relPosToFeatureStart);
                //                dataGA.add(relPosToFeatureStart, absoluteOccurenceOnPosition[0]);
                //                dataCT.add(relPosToFeatureStart, absoluteOccurenceOnPosition[1]);
                //            }
            //
            //            BarPlot plot = new BarPlot();
            //            plot.add(dataCT);
            //            plot.add(dataGA);
            //
            //            double insetsTop = 20.0,
            //                    insetsLeft = 40.0,
            //                    insetsBottom = 60.0,
            //                    insetsRight = 100.0;
            //            plot.setInsets(new Insets2D.Double(
                //                    insetsTop, insetsLeft, insetsBottom, insetsRight));
        //
        ////            plot.setSetting(Plot.LEGEND, true);
        ////            plot.getLegend().setSetting(Legend.ORIENTATION, Orientation.HORIZONTAL);
        ////            plot.getLegend().setSetting(Legend.ALIGNMENT_X, 1.0);
        ////            plot.getLegend().setSetting(Legend.ALIGNMENT_Y, 1.0);
        ////            plot.setSetting(Plot.LEGEND_DISTANCE, 2.0);
        ////            plot.setSetting(Plot.LEGEND_LOCATION, Location.SOUTH);
        //            plot.getAxisRenderer(BarPlot.AXIS_X).setSetting(LogarithmicRenderer2D.LABEL, "relative positions to feature start");
        //            plot.getAxisRenderer(BarPlot.AXIS_Y).setSetting(LogarithmicRenderer2D.LABEL, "absolute occurence of bases");
        //            plot.getPointRenderer(dataGA).setSetting(PointRenderer.COLOR, new Color(235, 152, 141, 100));
        //            plot.getPointRenderer(dataCT).setSetting(PointRenderer.COLOR, new Color(145, 201, 229, 100));
        //            plot.getAxisRenderer(BarPlot.AXIS_X).setSetting(AxisRenderer.INTERSECTION, 0.0);
        //            plot.getAxisRenderer(BarPlot.AXIS_Y).setSetting(AxisRenderer.INTERSECTION, -getSequenceLengthForBaseDistAnalysis() - 2);
        //            plot.getAxisRenderer(BarPlot.AXIS_Y).setSetting(AxisRenderer.TICK_LABELS_OUTSIDE, true);
        //            plot.getAxisRenderer(BarPlot.AXIS_Y).setSetting(AxisRenderer.TICK_LABELS_OUTSIDE, true);
        //
        //            RbsPlotVisualPanel plotPanel = new RbsPlotVisualPanel();
        //            plotPanel.addPlotToPlotPanel(new InteractivePanel(plot));
        //            NotifyDescriptor nd = new NotifyDescriptor(
            //                    plotPanel, // instance of your panel
            //                    "Think about the range for RBS motif search ;)", (int) NotifyDescriptor.OK_OPTION, // it is Yes/No dialog ...
            //                    NotifyDescriptor.INFORMATION_MESSAGE, // ... of a question type => a question mark icon
            //                    null, // we have specified YES_NO_OPTION => can be null, options specified by L&F,
            //                    // otherwise specify options as:
            //                    //     new Object[] { NotifyDescriptor.YES_OPTION, ... etc. },
            //                    NotifyDescriptor.OK_OPTION // default option is "Yes"
            //                    );
        //            if (DialogDisplayer.getDefault().notify(nd) == NotifyDescriptor.OK_OPTION) {
            //            }
        //        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Gets a DNA String and complement it. A to T, T to A, G to C and C to G.
     *
     * @param seq is DNA String.
     * @return the compliment of seq.
     */
    private String Complement(String seq) {
        char BASE_A = 'A';
        char BASE_C = 'C';
        char BASE_G = 'G';
        char BASE_T = 'T';
        String a = "A";
        String c = "C";
        String g = "G";
        String t = "T";
        String compliment = "";

        for (int i = 0; i < seq.length(); i++) {
            if (BASE_A == seq.charAt(i)) {
                compliment = compliment.concat(t);
            } else if (BASE_C == (seq.charAt(i))) {
                compliment = compliment.concat(g);

            } else if (BASE_G == seq.charAt(i)) {
                compliment = compliment.concat(c);

            } else if (BASE_T == seq.charAt(i)) {
                compliment = compliment.concat(a);
            }
        }

        return compliment;

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseDirectory;
    private javax.swing.JTextField directoryTF;
    private javax.swing.JTextField expectedMotifWidth;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField minSpacerTF;
    private javax.swing.JTextField noOfTryingTF;
    private javax.swing.JTextField regionForMotifSearchTF;
    // End of variables declaration//GEN-END:variables
}
