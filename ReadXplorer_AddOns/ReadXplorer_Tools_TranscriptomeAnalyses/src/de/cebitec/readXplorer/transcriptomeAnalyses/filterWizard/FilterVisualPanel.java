/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cebitec.readXplorer.transcriptomeAnalyses.filterWizard;

import de.cebitec.readXplorer.transcriptomeAnalyses.verifier.IntegerVerifier;
import java.util.prefs.Preferences;
import javax.swing.JPanel;
import org.openide.util.NbPreferences;

public final class FilterVisualPanel extends JPanel {

    private final String wizardName;

    /**
     * Creates new form FilterVisualPanel1
     */
    public FilterVisualPanel(String wizardName) {
        initComponents();
        this.wizardName = wizardName;
        updateFields();
        this.atLeastReadStartsTF.setInputVerifier(new IntegerVerifier(this.atLeastReadStartsTF));
        this.shiftForMultipleTF.setInputVerifier(new IntegerVerifier(this.shiftForMultipleTF));
        this.atLeastReadStartsTF.setEnabled(false);
        this.shiftForMultipleTF.setEnabled(false);
        this.atLeastReadStartsCB.setEnabled(false);
        this.multipleWithShiftCB.setEnabled(false);

    }

    @Override
    public String getName() {
        return "Choose Filter Options For Sub Tables";
    }

    public boolean isSingleSelected() {
        return this.singleCB.isSelected();
    }

    public boolean isMultipleSelected() {
        return this.multipleCB.isSelected();
    }

    public boolean isMultipleWithShiftsSelected() {
        return this.multipleWithShiftCB.isSelected();
    }

    public boolean isExtractionOfTSSWithAtLeastRSSelected() {
        return this.atLeastReadStartsCB.isSelected();
    }

    public Integer getShift() {
        return Integer.valueOf(this.shiftForMultipleTF.getText());
    }

    public Integer getAtLeastReadStarts() {
        return Integer.valueOf(this.atLeastReadStartsTF.getText());
    }

    private void updateFields() {
        Preferences pref = NbPreferences.forModule(Object.class);
        this.atLeastReadStartsTF.setText(pref.get(wizardName + FilterWizardPanel.PROP_FILTER_READSTARTS, "10"));
        this.shiftForMultipleTF.setText(pref.get(wizardName + FilterWizardPanel.PROP_FILTER_WITH_MIN_SHIFT, "2"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        singleCB = new javax.swing.JCheckBox();
        multipleCB = new javax.swing.JCheckBox();
        multipleWithShiftCB = new javax.swing.JCheckBox();
        shiftForMultipleTF = new javax.swing.JTextField();
        atLeastReadStartsCB = new javax.swing.JCheckBox();
        atLeastReadStartsTF = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(singleCB, org.openide.util.NbBundle.getMessage(FilterVisualPanel.class, "FilterVisualPanel.singleCB.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(multipleCB, org.openide.util.NbBundle.getMessage(FilterVisualPanel.class, "FilterVisualPanel.multipleCB.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(multipleWithShiftCB, org.openide.util.NbBundle.getMessage(FilterVisualPanel.class, "FilterVisualPanel.multipleWithShiftCB.text")); // NOI18N
        multipleWithShiftCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multipleWithShiftCBActionPerformed(evt);
            }
        });

        shiftForMultipleTF.setText(org.openide.util.NbBundle.getMessage(FilterVisualPanel.class, "FilterVisualPanel.shiftForMultipleTF.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(atLeastReadStartsCB, org.openide.util.NbBundle.getMessage(FilterVisualPanel.class, "FilterVisualPanel.atLeastReadStartsCB.text")); // NOI18N
        atLeastReadStartsCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atLeastReadStartsCBActionPerformed(evt);
            }
        });

        atLeastReadStartsTF.setText(org.openide.util.NbBundle.getMessage(FilterVisualPanel.class, "FilterVisualPanel.atLeastReadStartsTF.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(singleCB)
                    .addComponent(multipleCB)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(multipleWithShiftCB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(shiftForMultipleTF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(atLeastReadStartsCB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(atLeastReadStartsTF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(singleCB)
                .addGap(18, 18, 18)
                .addComponent(multipleCB)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(multipleWithShiftCB)
                    .addComponent(shiftForMultipleTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(atLeastReadStartsCB)
                    .addComponent(atLeastReadStartsTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void multipleWithShiftCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multipleWithShiftCBActionPerformed
        if (multipleWithShiftCB.isSelected()) {
            this.shiftForMultipleTF.setEnabled(true);
        } else {
            this.shiftForMultipleTF.setEnabled(false);
        }
    }//GEN-LAST:event_multipleWithShiftCBActionPerformed

    private void atLeastReadStartsCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atLeastReadStartsCBActionPerformed
        if (atLeastReadStartsCB.isSelected()) {
            this.atLeastReadStartsTF.setEditable(true);
        } else {
            this.atLeastReadStartsTF.setEnabled(false);
        }
    }//GEN-LAST:event_atLeastReadStartsCBActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox atLeastReadStartsCB;
    private javax.swing.JTextField atLeastReadStartsTF;
    private javax.swing.JCheckBox multipleCB;
    private javax.swing.JCheckBox multipleWithShiftCB;
    private javax.swing.JTextField shiftForMultipleTF;
    private javax.swing.JCheckBox singleCB;
    // End of variables declaration//GEN-END:variables
}
