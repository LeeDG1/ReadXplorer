/*
 * ReadSearchResults.java
 *
 * Created on 25.02.2011, 11:34:52
 */

package de.cebitec.readXplorer.tools.readSearch;

import de.cebitec.readXplorer.api.objects.Read;
import de.cebitec.readXplorer.view.dataVisualisation.BoundsInfoManager;
import java.util.List;
import javax.swing.DefaultListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jwinneba
 */
public class ReadSearchResults extends javax.swing.JPanel {
    
    private static final long serialVersionUID = 1L;
    private BoundsInfoManager bim;

    /** Creates new form ReadSearchResults */
    public ReadSearchResults() {
        initComponents();
        readname.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                DefaultListSelectionModel model = (DefaultListSelectionModel) readname.getSelectionModel();
                int selectedView = model.getLeadSelectionIndex();
                int selectedModel = readname.convertRowIndexToModel(selectedView);
                int position = (Integer) readname.getModel().getValueAt(selectedModel, 1);
                bim.navigatorBarUpdated(position);
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        readname = new javax.swing.JTable();
        jProgressBar1 = new javax.swing.JProgressBar();

        readname.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Readname", "Position", "Errors", "Is best mapping"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(readname);
        readname.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ReadSearchResults.class, "ReadSearchResults.readname.columnModel.title0")); // NOI18N
        readname.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ReadSearchResults.class, "ReadSearchResults.readname.columnModel.title1")); // NOI18N
        readname.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(ReadSearchResults.class, "ReadSearchResults.readname.columnModel.title2")); // NOI18N
        readname.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(ReadSearchResults.class, "ReadSearchResults.readname.columnModel.title3")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable readname;
    // End of variables declaration//GEN-END:variables

    public void addReads(List<Read> reads) {
        for (Read read : reads) {
            DefaultTableModel model = (DefaultTableModel) readname.getModel();
            Object[] rowData = new Object[5];
            rowData[0] = read.getReadname();
            rowData[1] = read.getPosition();
            rowData[2] = read.getErrors();
            rowData[3] = read.getisBestMapping();
            model.addRow(rowData);
        }
    }
    
    public void setBoundsInformationManager(BoundsInfoManager bim) {
        this.bim = bim;
    }

}
