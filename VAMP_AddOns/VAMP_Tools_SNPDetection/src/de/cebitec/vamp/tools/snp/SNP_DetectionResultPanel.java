/*
 * SNP_DetectionResultPanel.java
 *
 * Created on 24-Feb-2011, 09:51:49
 */
package de.cebitec.vamp.tools.snp;

import de.cebitec.common.sequencetools.AminoAcidProperties;
import de.cebitec.vamp.databackend.connector.ProjectConnector;
import de.cebitec.vamp.databackend.connector.ReferenceConnector;
import de.cebitec.vamp.databackend.dataObjects.CodonSnp;
import de.cebitec.vamp.databackend.dataObjects.PersistantFeature;
import de.cebitec.vamp.databackend.dataObjects.PersistantReference;
import de.cebitec.vamp.databackend.dataObjects.PersistantSubFeature;
import de.cebitec.vamp.databackend.dataObjects.Snp;
import de.cebitec.vamp.databackend.dataObjects.SnpData;
import de.cebitec.vamp.databackend.dataObjects.SnpI;
import de.cebitec.vamp.databackend.dataObjects.SnpResultStatistics;
import de.cebitec.vamp.exporter.excel.ExcelExportFileChooser;
import de.cebitec.vamp.util.LineWrapCellRenderer;
import de.cebitec.vamp.util.PositionUtils;
import de.cebitec.vamp.util.SequenceComparison;
import de.cebitec.vamp.util.fileChooser.VampFileChooser;
import de.cebitec.vamp.view.dataVisualisation.BoundsInfoManager;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.openide.util.NbPreferences;

/**
 * Panel showing a SNP detection result.
 * 
 * @author joern, rhilker
 */
public class SNP_DetectionResultPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;
    private BoundsInfoManager bim;
    private SnpData snpData;
    private PersistantReference reference;
    

    /** Creates new form SNP_DetectionResultPanel */
    public SNP_DetectionResultPanel() {
        initComponents();
        
        //ensures number of lines will adapt to number of translations (features) for each snp
        LineWrapCellRenderer cellRenderer = new LineWrapCellRenderer();
        this.snpTable.getColumnModel().getColumn(13).setCellRenderer(cellRenderer);
        this.snpTable.getColumnModel().getColumn(14).setCellRenderer(cellRenderer);
        this.snpTable.getColumnModel().getColumn(15).setCellRenderer(cellRenderer);
        this.snpTable.getColumnModel().getColumn(16).setCellRenderer(cellRenderer);
        
        DefaultListSelectionModel model = (DefaultListSelectionModel) snpTable.getSelectionModel();
        model.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                showSnpPosition();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        snpTable = new javax.swing.JTable();
        exportButton = new javax.swing.JButton();
        alignmentButton = new javax.swing.JButton();
        alignmentButton1 = new javax.swing.JButton();
        parametersLabel = new javax.swing.JLabel();
        metricsButton = new javax.swing.JButton();

        snpTable.setAutoCreateRowSorter(true);
        snpTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pos", "Track", "Base", "Ref", "A", "C", "G", "T", "N", "_", "Ref Cov", "Freq", "Type", "Amino SNP", "Amino Ref", "Effect on AA", "Feature"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        snpTable.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(snpTable);
        snpTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        snpTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.snpTable.columnModel.title0")); // NOI18N
        snpTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.jTable1.columnModel.title2_1")); // NOI18N
        snpTable.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.jTable1.columnModel.title1")); // NOI18N
        snpTable.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.jTable1.columnModel.title5")); // NOI18N
        snpTable.getColumnModel().getColumn(4).setHeaderValue(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.jTable1.columnModel.title6")); // NOI18N
        snpTable.getColumnModel().getColumn(5).setHeaderValue(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.jTable1.columnModel.title7")); // NOI18N
        snpTable.getColumnModel().getColumn(6).setHeaderValue(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.jTable1.columnModel.title8")); // NOI18N
        snpTable.getColumnModel().getColumn(7).setHeaderValue(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.jTable1.columnModel.title9")); // NOI18N
        snpTable.getColumnModel().getColumn(8).setHeaderValue(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.jTable1.columnModel.title10")); // NOI18N
        snpTable.getColumnModel().getColumn(9).setHeaderValue(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.jTable1.columnModel.title11")); // NOI18N
        snpTable.getColumnModel().getColumn(10).setHeaderValue(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.jTable1.columnModel.title3")); // NOI18N
        snpTable.getColumnModel().getColumn(11).setHeaderValue(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.jTable1.columnModel.title4")); // NOI18N
        snpTable.getColumnModel().getColumn(12).setHeaderValue(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.snpTable.columnModel.title12")); // NOI18N
        snpTable.getColumnModel().getColumn(13).setHeaderValue(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.snpTable.columnModel.title13")); // NOI18N
        snpTable.getColumnModel().getColumn(14).setHeaderValue(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.snpTable.columnModel.title14")); // NOI18N
        snpTable.getColumnModel().getColumn(15).setHeaderValue(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.snpTable.columnModel.title15")); // NOI18N
        snpTable.getColumnModel().getColumn(16).setHeaderValue(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.snpTable.columnModel.title16")); // NOI18N

        exportButton.setText(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.exportButton.text")); // NOI18N
        exportButton.setActionCommand(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.exportButton.actionCommand")); // NOI18N
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        alignmentButton.setText(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.alignmentButton.text")); // NOI18N
        alignmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alignmentButtonActionPerformed(evt);
            }
        });

        alignmentButton1.setText(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.alignmentButton1.text")); // NOI18N
        alignmentButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alignmentButton1ActionPerformed(evt);
            }
        });

        parametersLabel.setText(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.parametersLabel.text")); // NOI18N

        metricsButton.setText(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, "SNP_DetectionResultPanel.metricsButton.text")); // NOI18N
        metricsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metricsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(parametersLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 335, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(metricsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(alignmentButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(alignmentButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportButton)
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportButton)
                    .addComponent(alignmentButton)
                    .addComponent(alignmentButton1)
                    .addComponent(parametersLabel)
                    .addComponent(metricsButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        ExcelExportFileChooser fileChooser = new ExcelExportFileChooser(new String[]{"xls"}, "xls", snpData);
}//GEN-LAST:event_exportButtonActionPerformed

    private void alignmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alignmentButtonActionPerformed
        SNP_Phylogeny sp = new SNP_Phylogeny(snpData);
    }//GEN-LAST:event_alignmentButtonActionPerformed

    private void alignmentButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alignmentButton1ActionPerformed
        this.setFdnamlPath();
    }//GEN-LAST:event_alignmentButton1ActionPerformed

    private void metricsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metricsButtonActionPerformed
        JOptionPane.showMessageDialog(this, new SnpStatisticsPanel(this.snpData.getSnpStatistics()), "SNP Statistics", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_metricsButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton alignmentButton;
    private javax.swing.JButton alignmentButton1;
    private javax.swing.JButton exportButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton metricsButton;
    private javax.swing.JLabel parametersLabel;
    private javax.swing.JTable snpTable;
    // End of variables declaration//GEN-END:variables

    /**
     * Adds the SNPs to show to this panel. Amino acids are calculated and the
     * SNP result table is generated
     * @param snpData the snps to show
     */
    public void addSNPs(SnpData snpData) {
        
        //snp effect statistics
        int noIntergenicSnps = 0;
        int noSynonymousSnps = 0;
        int noMissenseSnps = 0;
        int noChemicallyNeutralSnps = 0;
        int noAAInsertions = 0;
        int noAADeletions = 0;
        
        //snp type statistics
        int noSubstitutions = 0;
        int noInsertions = 0;
        int noDeletions = 0;
        

        final int snpDataSize = 17;
        this.snpData = snpData;
        List<SnpI> snps = this.snpData.getSnpList();
        Map<Integer, String> trackNames = this.snpData.getTrackNames();
        DefaultTableModel model = (DefaultTableModel) snpTable.getModel();        

        //get all features from the reference to determine amino acid 
        ReferenceConnector refGenCon = ProjectConnector.getInstance().getRefGenomeConnector(this.reference.getId());
        List<PersistantFeature> featuresSorted = refGenCon.getFeaturesForClosedInterval(0, reference.getRefLength());
        Map<Integer, PersistantFeature> featureMap = new HashMap<>();
        for (PersistantFeature feature : featuresSorted){
            featureMap.put(feature.getId(), feature); //ids are unique
        }
        List<PersistantSubFeature> subFeaturesSorted = refGenCon.getSubFeaturesForClosedInterval(0, reference.getRefLength());
        PersistantFeature.addSubFeatures(featureMap, subFeaturesSorted);
        featureMap.clear();
        
        SnpTranslator snpTranslator = new SnpTranslator(featuresSorted, reference);
        
        Snp snp;
        Object[] rowData;
        String aminosSnp;
        String aminosRef;
        String effect;
        String ids;
        char aminoAcid;
        List<PersistantFeature> featuresFound;
        SequenceComparison type;
        
        for (SnpI snpi : snps) {
            
            
            snp = (Snp) snpi;
            type = snp.getType();
            
            rowData = new Object[snpDataSize];
            rowData[0] = snp.getPosition();
            rowData[1] = trackNames.get(snp.getTrackId());
            rowData[2] = snp.getBase().toUpperCase();
            rowData[3] = snp.getRefBase().toUpperCase();
            rowData[4] = snp.getARate();
            rowData[5] = snp.getCRate();
            rowData[6] = snp.getGRate();
            rowData[7] = snp.getTRate();
            rowData[8] = snp.getNRate();
            rowData[9] = snp.getGapRate();
            rowData[10] = snp.getCoverage();
            rowData[11] = snp.getFrequency();
            rowData[12] = type.toString();

            //determine amino acid substitutions among snp substitutions
            if (type.equals(SequenceComparison.SUBSTITUTION)) {
                ++noSubstitutions;
                       
                aminosSnp = "";
                aminosRef = "";
                effect = "";
                ids = "";
                
                snpTranslator.checkForFeature(snp);
                List<CodonSnp> codons = snp.getCodons();
                
                for (CodonSnp codon : codons) {
                    
                    aminoAcid = codon.getAminoSnp();
                    aminosSnp += aminoAcid + " (" + AminoAcidProperties.getPropertyForAA(aminoAcid) + ")\n";
                    aminoAcid = codon.getAminoRef();
                    aminosRef += aminoAcid + " (" + AminoAcidProperties.getPropertyForAA(aminoAcid) + ")\n";
                    effect += codon.getEffect().getType() + "\n";
                    ids += codon.getGeneId() + "\n";
                }

                if (codons.isEmpty()) {
                    aminosRef = aminosRef.isEmpty() ? "No gene" : aminosRef;
                    aminosSnp = aminosSnp.isEmpty() ? "No gene" : aminosSnp;
                    ++noIntergenicSnps;

                } else if (effect.contains("E")) {
                    ++noMissenseSnps;
                } else if (effect.contains("N")) {
                    ++noChemicallyNeutralSnps;
                } else if (effect.contains("M")) {
                    ++noSynonymousSnps;
                }
                
                rowData[13] = aminosSnp;
                rowData[14] = aminosRef;
                rowData[15] = effect;
                rowData[16] = ids;

            } else {
                featuresFound = snpTranslator.checkCoveredByFeature(snp.getPosition());
                ids = "";
                if (!featuresFound.isEmpty()) { // insertion or deletion
                    if (type.equals(SequenceComparison.INSERTION)) {
                        ++noAAInsertions;
                        ++noInsertions;
                        
                    } else if (type.equals(SequenceComparison.DELETION)) {
                        ++noAADeletions;
                        ++noDeletions;
                        
                    } else {
                        type = SequenceComparison.UNKNOWN;
                    }
                    
                    for (PersistantFeature feature : featuresFound){
                        ids += (feature.hasFeatureName() ? feature.getFeatureName() : feature.getLocus()) + "\n";
                        snp.addCodon(new CodonSnp("", "", ' ', ' ', type, ids));
                    }
                    rowData[13] = "-";
                    rowData[14] = "-";
                    rowData[15] = String.valueOf(type.getType());
                    rowData[16] = ids;
                    
                } else { //intergenic
                    rowData[13] = "No gene";
                    rowData[14] = "No gene";
                    rowData[15] = "";
                    rowData[16] = "";
                    ++noIntergenicSnps;
                    if (type.equals(SequenceComparison.INSERTION)) {
                        ++noInsertions;
                    } else if (type == SequenceComparison.DELETION) {
                        ++noDeletions;
                    }
                }
            }
            
            model.addRow(rowData);
        }

        TableRowSorter<TableModel> sorter = new TableRowSorter<>();
        this.snpTable.setRowSorter(sorter);
        sorter.setModel(model);
        sorter.setComparator(0, new Comparator<String>() {

            @Override
            public int compare(String a, String b) {
                if (a.contains("_")) {
                    a = a.substring(0, a.length() - 2);
                }
                if (b.contains("_")) {
                    b = b.substring(0, b.length() - 2);
                }
                Integer intA = Integer.parseInt(a);
                Integer intB = Integer.parseInt(b);
                return intA.compareTo(intB);
            }
        });
        SnpResultStatistics snpStatistics = new SnpResultStatistics();
        snpStatistics.setTotalNoSnps(this.snpData.getSnpList().size());
        snpStatistics.setNoIntergenicSnps(noIntergenicSnps);
        snpStatistics.setNoSynonymousSnps(noSynonymousSnps);
        snpStatistics.setNoChemicallyNeutralSnps(noChemicallyNeutralSnps);
        snpStatistics.setNoMissenseSnps(noMissenseSnps);
        snpStatistics.setNoAAInsertions(noAAInsertions);
        snpStatistics.setNoAADeletions(noAADeletions);
        snpStatistics.setNoSubstitutions(noSubstitutions);
        snpStatistics.setNoInsertions(noInsertions);
        snpStatistics.setNoDeletions(noDeletions);
        this.snpData.setSnpStatistics(snpStatistics);
        
        this.parametersLabel.setText(org.openide.util.NbBundle.getMessage(SNP_DetectionResultPanel.class, 
                "SNP_DetectionResultPanel.parametersLabel.text", snpData.getMinPercentDeviation(), snpData.getMinNoDeviatingCoverage()));
        
    }

    public void setBoundsInfoManager(BoundsInfoManager boundsInformationManager) {
        this.bim = boundsInformationManager;
    }
    
    public void setReferenceGenome(PersistantReference reference){
        this.reference = reference;
    }

    /**
     * Centers the position of the selected SNP in the bounds information manager.
     * This leads to an update of alle viewers, sharing this bim.
     */
    private void showSnpPosition() {
        DefaultListSelectionModel model = (DefaultListSelectionModel) snpTable.getSelectionModel();
        int selectedView = model.getLeadSelectionIndex();
        int selectedModel = snpTable.convertRowIndexToModel(selectedView);
        String pos = (String) snpTable.getModel().getValueAt(selectedModel, 0);

        bim.navigatorBarUpdated(PositionUtils.convertPosition(pos));
    }

    /**
     * Allows to set the path to the fdnaml executable to be used for tree reconstructions.
     */
    private void setFdnamlPath() {
        VampFileChooser fc = new VampFileChooser(VampFileChooser.OPEN_DIALOG, new String[1], "") {
            private static final long serialVersionUID = 1L;

            @Override
            public void save(String fileLocation) {
                throw new UnsupportedOperationException("Operation not supported!");
            }

            @Override
            public void open(String fileLocation) {
                NbPreferences.forModule(SNP_DetectionResultPanel.class).put(SNP_Phylogeny.FDNAML_PATH, fileLocation);
            }
        };
    }
    
    /**
     * @return The size of the SNP data.
     */
    public int getSnpDataSize() {
        return this.snpData.getSnpList().size();
    }
}