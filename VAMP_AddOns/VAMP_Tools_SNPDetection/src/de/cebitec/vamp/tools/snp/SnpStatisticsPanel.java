package de.cebitec.vamp.tools.snp;

/**
 * Panel for showing the the statistics of a SNP detection result.
 *
 * @author Rolf Hilker <rhilker at cebitec.uni-bielefeld.de>
 */
public class SnpStatisticsPanel extends javax.swing.JPanel {
    
    private static final long serialVersionUID = 1L;
    
    private final SnpResultStatistics snpResultMetrics;

    /**
     * Creates a new panel for showing the the statistics of a SNP detection result.
     */
    public SnpStatisticsPanel(SnpResultStatistics snpResultMetrics) {
        this.snpResultMetrics = snpResultMetrics;
        initComponents();
        this.initAdditionalComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", null},
                {"", null},
                {"", null},
                {"", null},
                {"", null},
                {"", null},
                {"", null}
            },
            new String [] {
                "SNP type", "Count"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(SnpStatisticsPanel.class, "SnpStatisticsPanel.jTable1.columnModel.title0")); // NOI18N
        jTable1.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(SnpStatisticsPanel.class, "SnpStatisticsPanel.jTable1.columnModel.title1")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void initAdditionalComponents() {
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Total number of SNPs", String.valueOf(this.snpResultMetrics.getTotalNoSnps())},
                {"Intergenic SNPs", String.valueOf(this.snpResultMetrics.getNoIntergenicSnps())},
                {"Synonymous SNPs", String.valueOf(this.snpResultMetrics.getNoSynonymousSnps())},
                {"Chemically neutral SNPs", String.valueOf(this.snpResultMetrics.getNoChemicallyNeutralSnps())},
                {"Missense SNPs", String.valueOf(this.snpResultMetrics.getNoMissenseSnps())},
                {"Insertion", String.valueOf(this.snpResultMetrics.getNoInsertions())},
                {"Deletion", String.valueOf(this.snpResultMetrics.getNoDeletions())}
            },
            new String [] {
                "SNP type", "Count"
            }
        ) {
            private static final long serialVersionUID = 1L;
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
    }
}
