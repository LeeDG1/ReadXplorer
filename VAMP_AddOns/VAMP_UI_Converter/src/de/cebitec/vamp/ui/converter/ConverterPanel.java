package de.cebitec.vamp.ui.converter;

import de.cebitec.vamp.util.GeneralUtils;
import de.cebitec.vamp.util.fileChooser.VampFileChooser;
import javax.swing.JOptionPane;

/**
 * @author Rolf Hilker <rhilker at cebitec.uni-bielefeld.de>
 * 
 * Panel for choosing a file to convert and the converter method. Afterwards
 * the choosen converter can be started.
 */
public class ConverterPanel extends javax.swing.JPanel {

    private String filePath;
    private String fileExtension; //TODO: add file extension to converter
    private String converterType;
    private String referenceName;
    private int referenceLength;
    
    
    /**
     * Creates new form ConverterPanel.
     */
    public ConverterPanel() {
        this.initComponents();
        this.initAdditionalData();
    }
    
    private void initAdditionalData() {
        this.converterComboBox.setSelectedIndex(0);
        this.selectConverter();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerLabel = new javax.swing.JLabel();
        converterComboBox = new javax.swing.JComboBox();
        converterLabel = new javax.swing.JLabel();
        fileTextField = new javax.swing.JTextField();
        fileLabel = new javax.swing.JLabel();
        openFileButton = new javax.swing.JButton();
        convertButton = new javax.swing.JButton();
        referenceNameLabel = new javax.swing.JLabel();
        referenceLengthLabel = new javax.swing.JLabel();
        referenceNameField = new javax.swing.JTextField();
        referenceLengthField = new javax.swing.JTextField();

        headerLabel.setText(org.openide.util.NbBundle.getMessage(ConverterPanel.class, "ConverterPanel.headerLabel.text")); // NOI18N

        converterComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { org.openide.util.NbBundle.getMessage(ConverterPanel.class, "ConverterPanel.JokToBamConverter") }));
        converterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                converterComboBoxActionPerformed(evt);
            }
        });

        converterLabel.setText(org.openide.util.NbBundle.getMessage(ConverterPanel.class, "ConverterPanel.converterLabel.text")); // NOI18N

        fileTextField.setEditable(false);
        fileTextField.setText(org.openide.util.NbBundle.getMessage(ConverterPanel.class, "ConverterPanel.fileTextField.text")); // NOI18N
        fileTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileTextFieldActionPerformed(evt);
            }
        });

        fileLabel.setText(org.openide.util.NbBundle.getMessage(ConverterPanel.class, "ConverterPanel.fileLabel.text")); // NOI18N

        openFileButton.setText(org.openide.util.NbBundle.getMessage(ConverterPanel.class, "ConverterPanel.openFileButton.text")); // NOI18N
        openFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileButtonActionPerformed(evt);
            }
        });

        convertButton.setText(org.openide.util.NbBundle.getMessage(ConverterPanel.class, "ConverterPanel.convertButton.text")); // NOI18N
        convertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertButtonActionPerformed(evt);
            }
        });

        referenceNameLabel.setText(org.openide.util.NbBundle.getMessage(ConverterPanel.class, "ConverterPanel.referenceNameLabel.text")); // NOI18N

        referenceLengthLabel.setText(org.openide.util.NbBundle.getMessage(ConverterPanel.class, "ConverterPanel.referenceLengthLabel.text")); // NOI18N

        referenceNameField.setText(org.openide.util.NbBundle.getMessage(ConverterPanel.class, "ConverterPanel.referenceNameField.text")); // NOI18N

        referenceLengthField.setText(org.openide.util.NbBundle.getMessage(ConverterPanel.class, "ConverterPanel.referenceLengthField.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(convertButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(headerLabel)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(fileLabel)
                                .addComponent(converterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(0, 0, Short.MAX_VALUE)
                                    .addComponent(openFileButton))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(8, 8, 8)
                                    .addComponent(converterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(referenceLengthLabel)
                            .addComponent(referenceNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(referenceLengthField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(referenceNameField, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(converterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(converterLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileLabel)
                    .addComponent(fileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(referenceNameLabel)
                    .addComponent(referenceNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(referenceLengthLabel)
                    .addComponent(referenceLengthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(convertButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fileTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileTextFieldActionPerformed
        //nothing to do, is not editable
    }//GEN-LAST:event_fileTextFieldActionPerformed

    private void openFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileButtonActionPerformed
        new VampFileChooser(VampFileChooser.OPEN_DIALOG, "") {

            @Override
            public void save(String fileLocation) {
                throw new UnsupportedOperationException("Operation not supported!");
            }

            @Override
            public void open(String fileLocation) {
                fileTextField.setText(fileLocation);
                filePath = fileLocation;
            }
        };
    }//GEN-LAST:event_openFileButtonActionPerformed

    private void convertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertButtonActionPerformed
        this.referenceName = this.referenceNameField.getText();
        if (GeneralUtils.isValidNumberInput(this.referenceLengthField.getText())) {
            this.referenceLength = Integer.valueOf(this.referenceLengthField.getText());
        } else {
            JOptionPane.showMessageDialog(this, "Please enter a numerical reference length larger than 0!", "Invalid Length", JOptionPane.ERROR_MESSAGE);
        }
        if (this.isRequiredInfoSet()) {
            
            ConvertThread convertThread = new ConvertThread(this.filePath, this.converterType, this.referenceName, this.referenceLength);
            convertThread.start();
        }
    }//GEN-LAST:event_convertButtonActionPerformed

    private void converterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_converterComboBoxActionPerformed
        this.selectConverter();
    }//GEN-LAST:event_converterComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton convertButton;
    private javax.swing.JComboBox converterComboBox;
    private javax.swing.JLabel converterLabel;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JTextField fileTextField;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JButton openFileButton;
    private javax.swing.JTextField referenceLengthField;
    private javax.swing.JLabel referenceLengthLabel;
    private javax.swing.JTextField referenceNameField;
    private javax.swing.JLabel referenceNameLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Selects the correct converter depending on the chosen one.
     */
    private void selectConverter() {
        Object selectedItem = this.converterComboBox.getSelectedItem();
        if (selectedItem instanceof String) {
            this.converterType = (String) selectedItem;
        }
    }

    public boolean isRequiredInfoSet() {
        if (filePath == null || converterType == null || referenceName == null || referenceLength < 0) {
            return false;
        } else {
            return true;
        }
    }
    
}
