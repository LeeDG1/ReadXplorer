/*
 * ResultPanelFilteredFeatures.java
 *
 * Created on 27.01.2012, 14:31:15
 */
package de.cebitec.vamp.transcriptomeAnalyses;

import de.cebitec.vamp.databackend.ResultTrackAnalysis;
import de.cebitec.vamp.databackend.dataObjects.PersistantFeature;
import de.cebitec.vamp.exporter.excel.ExcelExportFileChooser;
import de.cebitec.vamp.transcriptomeAnalyses.datastructure.RPKMvalue;
import de.cebitec.vamp.util.UneditableTableModel;
import de.cebitec.vamp.view.analysis.ResultTablePanel;
import de.cebitec.vamp.view.tableVisualization.tableFilter.TableRightClickFilter;
import java.util.HashMap;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.openide.util.Exceptions;

/**
 * Panel showing a result of an analysis filtering for features with a 
 * min and max certain readcount.
 * 
 * @author -Rolf Hilker-
 */
public class ResultPanelRPKM extends ResultTablePanel {
    
    private static final long serialVersionUID = 1L;
    
    public static final String RETURNED_FEATURES = "Total number of returned features";
    public static final String FEATURES_TOTAL = "Total number of reference features";

    private RPKMAnalysisResult rpkmCalcResult;
    private HashMap<String, Integer> filterStatisticsMap;
    private PersistantFeature feature;
    private boolean statistics = false;
    private TableRightClickFilter<UneditableTableModel> tableFilter = new TableRightClickFilter<>(UneditableTableModel.class);
    
    /**
     * Panel showing a result of an analysis filtering for features with a min
     * and max certain readcount.
     */
    public ResultPanelRPKM() {
        initComponents();
        this.rpkmTable.getTableHeader().addMouseListener(tableFilter);
        this.filterStatisticsMap = new HashMap<>();
        this.filterStatisticsMap.put(RETURNED_FEATURES, 0);
        
        DefaultListSelectionModel model = (DefaultListSelectionModel) this.rpkmTable.getSelectionModel();
        model.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                showFeatureStartPosition();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        parametersLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        rpkmTable = new javax.swing.JTable();
        exportButton = new javax.swing.JButton();

        parametersLabel.setText(org.openide.util.NbBundle.getMessage(ResultPanelRPKM.class, "ResultPanelRPKM.parametersLabel.text")); // NOI18N

        rpkmTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Feature", "Feature type", "Track", "Strand", "Feature start", "Feature stop", "length", "RPKM", "Log RPKM", "Coverage RPKM", "Log coverage RPKM", "ReadCount", "Coverage Sum"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(rpkmTable);
        rpkmTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelRPKM.class, "ResultPanelRPKM.rpkmTable.columnModel.title0")); // NOI18N
        rpkmTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelRPKM.class, "ResultPanelRPKM.rpkmTable.columnModel.title5")); // NOI18N
        rpkmTable.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelRPKM.class, "ResultPanelRPKM.rpkmTable.columnModel.title8")); // NOI18N
        rpkmTable.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelRPKM.class, "ResultPanelRPKM.rpkmTable.columnModel.title4")); // NOI18N
        rpkmTable.getColumnModel().getColumn(4).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelRPKM.class, "ResultPanelRPKM.rpkmTable.columnModel.title1")); // NOI18N
        rpkmTable.getColumnModel().getColumn(5).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelRPKM.class, "ResultPanelRPKM.rpkmTable.columnModel.title2")); // NOI18N
        rpkmTable.getColumnModel().getColumn(6).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelRPKM.class, "ResultPanelRPKM.rpkmTable.columnModel.title7_1")); // NOI18N
        rpkmTable.getColumnModel().getColumn(7).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelRPKM.class, "ResultPanelRPKM.rpkmTable.columnModel.title9")); // NOI18N
        rpkmTable.getColumnModel().getColumn(8).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelRPKM.class, "ResultPanelRPKM.rpkmTable.columnModel.title10")); // NOI18N
        rpkmTable.getColumnModel().getColumn(9).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelRPKM.class, "ResultPanelRPKM.rpkmTable.columnModel.title11")); // NOI18N
        rpkmTable.getColumnModel().getColumn(10).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelRPKM.class, "ResultPanelRPKM.rpkmTable.columnModel.title12")); // NOI18N
        rpkmTable.getColumnModel().getColumn(11).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelRPKM.class, "ResultPanelRPKM.rpkmTable.columnModel.title11_1")); // NOI18N
        rpkmTable.getColumnModel().getColumn(12).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelRPKM.class, "ResultPanelRPKM.rpkmTable.columnModel.title12_1")); // NOI18N

        exportButton.setText(org.openide.util.NbBundle.getMessage(ResultPanelRPKM.class, "ResultPanelRPKM.exportButton.text")); // NOI18N
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(parametersLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exportButton))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1442, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parametersLabel)
                    .addComponent(exportButton)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        ExcelExportFileChooser fileChooser = new ExcelExportFileChooser(new String[]{"xls"}, "xls", rpkmCalcResult);
    }//GEN-LAST:event_exportButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel parametersLabel;
    private javax.swing.JTable rpkmTable;
    // End of variables declaration//GEN-END:variables

    /**
     * Updates the navigator bar of all viewers to the start position of the selected feature.
     */
    private void showFeatureStartPosition() {
        DefaultListSelectionModel model = (DefaultListSelectionModel) this.rpkmTable.getSelectionModel();
        int selectedView = model.getLeadSelectionIndex();
        int selectedModel = this.rpkmTable.convertRowIndexToModel(selectedView);
        feature = (PersistantFeature) this.rpkmTable.getModel().getValueAt(selectedModel, 0);
        int pos = feature.isFwdStrand() ? feature.getStart() : feature.getStop();

        getBoundsInfoManager().navigatorBarUpdated(pos);
    }

    /**
     * Adds a list of features with read count and RPKM values to this panel.
     * @param newResult the new result to add
     */
    @Override
    public void addResult(ResultTrackAnalysis newResult) {

        if (newResult instanceof RPKMAnalysisResult) {
            RPKMAnalysisResult rpkmCalcResultNew = (RPKMAnalysisResult) newResult;
            final int nbColumns = 13;

            if (this.rpkmCalcResult == null) {
                this.rpkmCalcResult = rpkmCalcResultNew;
                this.filterStatisticsMap.put(FEATURES_TOTAL, rpkmCalcResultNew.getNoGenomeFeatures());
            } else {
                this.rpkmCalcResult.getResults().addAll(rpkmCalcResultNew.getResults());
            }
            DefaultTableModel model = (DefaultTableModel) this.rpkmTable.getModel();

            PersistantFeature feat;
            for (RPKMvalue rpkm : rpkmCalcResult.getResults()) {
                feat = rpkm.getFeature();
                Object[] rowData = new Object[nbColumns];
                rowData[0] = feat;
                rowData[1] = feat.getType();
                rowData[2] = this.rpkmCalcResult.getTrackEntry(rpkm.getTrackId(), false);
                rowData[3] = feat.isFwdStrandString();
                rowData[4] = feat.isFwdStrand() ? feat.getStart() : feat.getStop();
                rowData[5] = feat.isFwdStrand() ? feat.getStop() : feat.getStart();
                rowData[6] = feat.getStop() - feat.getStart();
//                rowData[7] = rpkm.getRPKM();
//                rowData[8] = rpkm.getReadCount();
//                ("Strand");
                rowData[7] = rpkm.getRPKM();
                rowData[8] = rpkm.getLogRpkm();
                rowData[9] = rpkm.getCoverageRpkm();
                rowData[10] = rpkm.getCoverageLogRpkm();
                rowData[11] = rpkm.getReadCount();
                rowData[12] = rpkm.getCoverage();

                model.addRow(rowData);
            }

            TableRowSorter<TableModel> sorter = new TableRowSorter<>();
            this.rpkmTable.setRowSorter(sorter);
            sorter.setModel(model);

//            ParameterSetRPKM rpkmParams = (ParameterSetRPKM) rpkmCalcResult.getParameters();
//            this.parametersLabel.setText(org.openide.util.NbBundle.getMessage(ResultPanelRPKM.class,
//                    "ResultPanelRPKM.parametersLabel.text", rpkmParams.getMinReadCount(), rpkmParams.getMaxReadCount()));
//
//            filterStatisticsMap.put(RETURNED_FEATURES, filterStatisticsMap.get(RETURNED_FEATURES) + rpkmCalcResultNew.getResults().size());
//            rpkmCalcResult.setStatsMap(filterStatisticsMap);
        }
    }
    
    /**
     * @return the number of features filtered during the associated analysis
     */
    @Override
    public int getResultSize() {
        return this.rpkmCalcResult.getResults().size();
    }
}
