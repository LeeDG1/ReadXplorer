/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cebitec.vamp.transcriptomeAnalyses;

import de.cebitec.vamp.databackend.ResultTrackAnalysis;
import de.cebitec.vamp.databackend.dataObjects.PersistantFeature;
import de.cebitec.vamp.transcriptomeAnalyses.datastructure.Antisense;
import de.cebitec.vamp.util.SequenceUtils;
import de.cebitec.vamp.util.UneditableTableModel;
import de.cebitec.vamp.view.analysis.ResultTablePanel;
import de.cebitec.vamp.view.dataVisualisation.BoundsInfoManager;
import de.cebitec.vamp.view.dataVisualisation.referenceViewer.ReferenceViewer;
import de.cebitec.vamp.view.tableVisualization.TableUtils;
import de.cebitec.vamp.view.tableVisualization.tableFilter.TableRightClickDeletion;
import de.cebitec.vamp.view.tableVisualization.tableFilter.TableRightClickFilter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.DefaultListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jritter
 */
public class ResultsPanelAntisense extends ResultTablePanel {

    private BoundsInfoManager boundsInfoManager;
    private ResultsAntisense results;
    private ReferenceViewer referenceViewer;
    private TableRightClickFilter<UneditableTableModel> tableFilter = new TableRightClickFilter<>(UneditableTableModel.class);
    private TableRightClickDeletion<DefaultTableModel> rowDeletion = new TableRightClickDeletion();
    private HashMap<Integer, Antisense> aSInHash;

    /**
     * Creates new form ResultsPanelAntisense
     */
    public ResultsPanelAntisense() {
        initComponents();
        this.antisenseTable.getTableHeader().addMouseListener(tableFilter);
        this.antisenseTable.addMouseListener(rowDeletion);

        DefaultListSelectionModel model = (DefaultListSelectionModel) this.antisenseTable.getSelectionModel();
        model.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                TableUtils.showPosition(antisenseTable, 0, getBoundsInfoManager());
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        antisenseTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        antisenseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Position", "Direction", "Type", "Track ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(antisenseTable);
        antisenseTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultsPanelAntisense.class, "ResultsPanelAntisense.antisenseTable.columnModel.title0")); // NOI18N
        antisenseTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultsPanelAntisense.class, "ResultsPanelAntisense.antisenseTable.columnModel.title1")); // NOI18N
        antisenseTable.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultsPanelAntisense.class, "ResultsPanelAntisense.antisenseTable.columnModel.title2")); // NOI18N
        antisenseTable.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultsPanelAntisense.class, "ResultsPanelAntisense.antisenseTable.columnModel.title3")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(ResultsPanelAntisense.class, "ResultsPanelAntisense.jButton1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(ResultsPanelAntisense.class, "ResultsPanelAntisense.jButton2.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable antisenseTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addResult(ResultTrackAnalysis newResult) {
        if (newResult instanceof TSSDetectionResults) {
            final ResultsAntisense antisenseResults = (ResultsAntisense) newResult;
            final List<Antisense> aSenseTSS = new ArrayList<>(antisenseResults.getResults());
//            this.tssInHash = new HashMap<>();

            if (results == null) {
                results = antisenseResults;
            } else {
                results.getResults().addAll(antisenseResults.getResults());
            }

            final int nbColumns = 5;
            int noFwdFeatures = 0;
            int noRevFeatures = 0;

            final DefaultTableModel model = (DefaultTableModel) this.antisenseTable.getModel();

            String strand;
            PersistantFeature feature;

            for (Antisense aS : aSenseTSS) {

                if (aS.isFwdStrand()) {
                    strand = SequenceUtils.STRAND_FWD_STRING;
                    ++noFwdFeatures;
                } else {
                    strand = SequenceUtils.STRAND_REV_STRING;
                    ++noRevFeatures;
                }

                final Object[] rowData = new Object[nbColumns];
                int position = aS.getPos();
                this.aSInHash.put(position, aS);
                rowData[0] = position;
                rowData[1] = strand;
                rowData[2] = aS.getType();
                rowData[3] = aS.getTrackId();

                SwingUtilities.invokeLater(new Runnable() { //because it is not called from the swing dispatch thread
                    @Override
                    public void run() {
                        model.addRow(rowData);
                    }
                });
            }
        }
    }

    @Override
    public int getResultSize() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * Set the reference viewer needed for updating the currently shown position
     * and extracting the reference sequence.
     *
     * @param referenceViewer the reference viewer belonging to this analysis
     * result
     */
    public void setReferenceViewer(ReferenceViewer referenceViewer) {
        this.boundsInfoManager = referenceViewer.getBoundsInformationManager();
        this.referenceViewer = referenceViewer;
    }
}
