/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cebitec.vamp.differentialExpression.wizard;

import de.cebitec.vamp.databackend.connector.ProjectConnector;
import de.cebitec.vamp.databackend.connector.ReferenceConnector;
import de.cebitec.vamp.databackend.dataObjects.PersistantReference;
import de.cebitec.vamp.databackend.dataObjects.PersistantTrack;
import java.util.Iterator;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

public final class SelectTrackVisualPanel extends JPanel implements ListSelectionListener {

    private List<PersistantReference> references;
    private int selectedIndex = -1;
    private PersistantReference selectedRef;
    private DefaultListModel<PersistantTrack> trackListModel = new DefaultListModel<>();

    /**
     * Creates new form SelectTrackVisualPanel
     */
    public SelectTrackVisualPanel() {
        ProjectConnector con = ProjectConnector.getInstance();
        references = con.getGenomes();
        initComponents();
    }

    @Override
    public String getName() {
        return "Select tracks";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        referenceList = new javax.swing.JList(references.toArray());
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        trackList = new javax.swing.JList(trackListModel);

        referenceList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        referenceList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        referenceList.addListSelectionListener(this);
        jScrollPane1.setViewportView(referenceList);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(SelectTrackVisualPanel.class, "SelectTrackVisualPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(SelectTrackVisualPanel.class, "SelectTrackVisualPanel.jLabel2.text")); // NOI18N

        jScrollPane2.setViewportView(trackList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(0, 13, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList referenceList;
    private javax.swing.JList trackList;
    // End of variables declaration//GEN-END:variables

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (selectedIndex != e.getFirstIndex()) {
            selectedIndex = e.getFirstIndex();
            selectedRef = references.get(selectedIndex);
            ReferenceConnector refCon = ProjectConnector.getInstance().getRefGenomeConnector(selectedRef.getId());
            List<PersistantTrack> tracks = refCon.getAssociatedTracks();
            trackListModel.clear();
            for (Iterator<PersistantTrack> it = tracks.iterator(); it.hasNext();) {
                PersistantTrack persistantTrack = it.next();
                trackListModel.addElement(persistantTrack);
            }
        }
    }

    public int getSelectedReferenceGenomeID() {
        return selectedRef.getId();
    }

    public List<PersistantTrack> getSelectedTracks() {
        return trackList.getSelectedValuesList();
    }

    public boolean selectionFinished() {
        if (trackList.isSelectionEmpty()) {
            return false;
        } else {
            List<PersistantTrack> selectedTracks = trackList.getSelectedValuesList();
            if (selectedTracks.size() >= 2) {
                return true;
            } else {
                return false;
            }
        }
    }
}
