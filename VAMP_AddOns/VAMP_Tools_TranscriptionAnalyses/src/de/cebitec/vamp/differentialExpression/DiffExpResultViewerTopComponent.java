package de.cebitec.vamp.differentialExpression;

import de.cebitec.vamp.databackend.dataObjects.PersistantTrack;
import de.cebitec.vamp.util.Observer;
import de.cebitec.vamp.util.fileChooser.VampFileChooser;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//de.cebitec.vamp.differentialExpression//DiffExpResultViewer//EN",
autostore = false)
@TopComponent.Description(preferredID = "DiffExpResultViewerTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "bottomSlidingSide", openAtStartup = false)
@ActionID(category = "Window", id = "de.cebitec.vamp.differentialExpression.DiffExpResultViewerTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_DiffExpResultViewerAction",
preferredID = "DiffExpResultViewerTopComponent")
@Messages({
    "CTL_DiffExpResultViewerAction=DiffExpResultViewer",
    "CTL_DiffExpResultViewerTopComponent=Differential expression analysis - results",
    "HINT_DiffExpResultViewerTopComponent=This is a DiffExpResultViewer window"
})
public final class DiffExpResultViewerTopComponent extends TopComponent implements Observer, ItemListener {

    private String[] columnNames;
    private TableModel tm;
    private ComboBoxModel cbm;
    private ArrayList<TableModel> tableModels = new ArrayList<>();
    private int offset;
    private boolean showNormalizedData = false;
    private DiffExpGraficsTopComponent diffExpGraficsTopComponent;
    private BaySeqAnalysisHandler BaySeqAnalysisHandler;

    public DiffExpResultViewerTopComponent() {
    }

    public DiffExpResultViewerTopComponent(AnalysisHandler handler) {
        this.BaySeqAnalysisHandler = (BaySeqAnalysisHandler) handler;

        tm = new DefaultTableModel();
        cbm = new DefaultComboBoxModel();

        initComponents();
        setName(Bundle.CTL_DiffExpResultViewerTopComponent());
        setToolTipText(Bundle.HINT_DiffExpResultViewerTopComponent());
        jProgressBar1.setIndeterminate(true);
    }

    private void addResults() {
        List<Object[][]> results= BaySeqAnalysisHandler.getResults();
        List<Group> groups = BaySeqAnalysisHandler.getGroups();
        List<PersistantTrack> selectedTracks = BaySeqAnalysisHandler.getSelectedTraks();
        offset = groups.size();
        columnNames = new String[(5 + selectedTracks.size())];
        int i = 0;
        columnNames[i++] = "locus";
        columnNames[i++] = "start";
        columnNames[i++] = "stop";
        int j = i;
        for (; j < i + selectedTracks.size(); j++) {
            columnNames[j] = selectedTracks.get(j - i).getDescription();
        }
        columnNames[j++] = "Likelihood";
        columnNames[j] = "False discovery rate";
        for (Iterator<Object[][]> it = results.iterator(); it.hasNext();) {
            Object[][] currentResult = it.next();
            TableModel tmpTableModel = new DefaultTableModel(currentResult, columnNames);
            tableModels.add(tmpTableModel);
        }

        groupComboBox.setModel(new DefaultComboBoxModel(groups.toArray()));
        topCountsTable.setModel(tableModels.get(0));

        createGraphicsButton.setEnabled(true);
        saveTableButton.setEnabled(true);
        groupComboBox.setEnabled(true);
        topCountsTable.setEnabled(true);
        normalizedCheckBox.setEnabled(true);
        jLabel1.setEnabled(true);
        jLabel2.setEnabled(false);
        jProgressBar1.setIndeterminate(false);
        jProgressBar1.setValue(100);
        jProgressBar1.setEnabled(false);

    }

    private void changeShownTable(int element) {
        if (showNormalizedData) {
            topCountsTable.setModel(tableModels.get(element + offset));
        } else {
            topCountsTable.setModel(tableModels.get(element));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        groupComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        topCountsTable = new javax.swing.JTable();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        normalizedCheckBox = new javax.swing.JCheckBox();
        createGraphicsButton = new javax.swing.JButton();
        saveTableButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(DiffExpResultViewerTopComponent.class, "DiffExpResultViewerTopComponent.jLabel1.text")); // NOI18N
        jLabel1.setEnabled(false);

        groupComboBox.setModel(cbm);
        groupComboBox.setEnabled(false);
        groupComboBox.addItemListener(this);

        topCountsTable.setAutoCreateRowSorter(true);
        topCountsTable.setModel(tm);
        topCountsTable.setEnabled(false);
        jScrollPane1.setViewportView(topCountsTable);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(DiffExpResultViewerTopComponent.class, "DiffExpResultViewerTopComponent.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(normalizedCheckBox, org.openide.util.NbBundle.getMessage(DiffExpResultViewerTopComponent.class, "DiffExpResultViewerTopComponent.normalizedCheckBox.text")); // NOI18N
        normalizedCheckBox.setEnabled(false);
        normalizedCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalizedCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(createGraphicsButton, org.openide.util.NbBundle.getMessage(DiffExpResultViewerTopComponent.class, "DiffExpResultViewerTopComponent.createGraphicsButton.text")); // NOI18N
        createGraphicsButton.setEnabled(false);
        createGraphicsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createGraphicsButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(saveTableButton, org.openide.util.NbBundle.getMessage(DiffExpResultViewerTopComponent.class, "DiffExpResultViewerTopComponent.saveTableButton.text")); // NOI18N
        saveTableButton.setEnabled(false);
        saveTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTableButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(groupComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(normalizedCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveTableButton)
                        .addGap(18, 18, 18)
                        .addComponent(createGraphicsButton)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 961, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(groupComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(normalizedCheckBox)
                        .addComponent(createGraphicsButton)
                        .addComponent(saveTableButton)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void normalizedCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalizedCheckBoxActionPerformed
        showNormalizedData = (!showNormalizedData);
        changeShownTable(groupComboBox.getSelectedIndex());
    }//GEN-LAST:event_normalizedCheckBoxActionPerformed

    private void createGraphicsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createGraphicsButtonActionPerformed
        diffExpGraficsTopComponent = new DiffExpGraficsTopComponent(BaySeqAnalysisHandler);
        BaySeqAnalysisHandler.registerObserver(diffExpGraficsTopComponent);
        diffExpGraficsTopComponent.open();
        diffExpGraficsTopComponent.requestActive();
    }//GEN-LAST:event_createGraphicsButtonActionPerformed

    private void saveTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTableButtonActionPerformed
        new VampFileChooser(VampFileChooser.SAVE_DIALOG, "csv") {
            @Override
            public void save(String fileLocation) {              
                BaySeqAnalysisHandler.saveResultsAsCSV((Group)groupComboBox.getSelectedItem(), fileLocation, showNormalizedData);
            }

            @Override
            public void open(String fileLocation) {
            }
        };
    }//GEN-LAST:event_saveTableButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createGraphicsButton;
    private javax.swing.JComboBox groupComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox normalizedCheckBox;
    private javax.swing.JButton saveTableButton;
    private javax.swing.JTable topCountsTable;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        BaySeqAnalysisHandler.removeObserver(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
//        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void update(Object args) {
        addResults();
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        Group item = (Group) e.getItem();
        int state = e.getStateChange();
        if (state == ItemEvent.SELECTED) {
            changeShownTable(item.getId());
        }
    }
}
