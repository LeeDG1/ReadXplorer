/*
 * ExpressedGenesResultPanel.java
 *
 * Created on 27.01.2012, 14:31:15
 */
package de.cebitec.vamp.transcriptionAnalyses;

import de.cebitec.vamp.databackend.dataObjects.PersistantFeature;
import de.cebitec.vamp.util.SequenceUtils;
import de.cebitec.vamp.view.dataVisualisation.BoundsInfoManager;
import java.util.List;
import javax.swing.DefaultListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 * @author -Rolf Hilker-
 */
public class ExpressedGenesResultPanel extends javax.swing.JPanel {

    private BoundsInfoManager bim;
    private List<ExpressedGene> expressedGenes;
    
    /** Creates new form ExpressedGenesResultPanel */
    public ExpressedGenesResultPanel() {
        initComponents();
        
        DefaultListSelectionModel model = (DefaultListSelectionModel) this.expressedGenesTable.getSelectionModel();
        model.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                showExpressedGenePosition();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        expressedGenesPane = new javax.swing.JScrollPane();
        expressedGenesTable = new javax.swing.JTable();

        expressedGenesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Feature (Gene)", "Strand", "Total Read Count"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        expressedGenesPane.setViewportView(expressedGenesTable);
        expressedGenesTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ExpressedGenesResultPanel.class, "ExpressedGenesResultPanel.expressedGenesTable.columnModel.title0")); // NOI18N
        expressedGenesTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ExpressedGenesResultPanel.class, "ExpressedGenesResultPanel.expressedGenesTable.columnModel.title2_1")); // NOI18N
        expressedGenesTable.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(ExpressedGenesResultPanel.class, "ExpressedGenesResultPanel.expressedGenesTable.columnModel.title1")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(expressedGenesPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(expressedGenesPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane expressedGenesPane;
    private javax.swing.JTable expressedGenesTable;
    // End of variables declaration//GEN-END:variables

    private void showExpressedGenePosition() {
        DefaultListSelectionModel model = (DefaultListSelectionModel) this.expressedGenesTable.getSelectionModel();
        int selectedView = model.getLeadSelectionIndex();
        int selectedModel = this.expressedGenesTable.convertRowIndexToModel(selectedView);
        PersistantFeature feature = (PersistantFeature) this.expressedGenesTable.getModel().getValueAt(selectedModel, 0);
        int pos = feature.getStrand() == SequenceUtils.STRAND_FWD ? feature.getStart() : feature.getStop();

        bim.navigatorBarUpdated(pos);
    }

    public void setBoundsInfoManager(BoundsInfoManager boundsInformationManager) {
        this.bim = boundsInformationManager;
    }

    public void addExpressedGenes(List<ExpressedGene> expressedGenes) {
        final int nbColumns = 3;
        this.expressedGenes = expressedGenes;
        DefaultTableModel model = (DefaultTableModel) this.expressedGenesTable.getModel();        

        for (ExpressedGene expressedGene : this.expressedGenes) {
            
            Object[] rowData = new Object[nbColumns];
            rowData[0] = expressedGene.getExpressedFeature();
            rowData[1] = expressedGene.getExpressedFeature().getStrand() == SequenceUtils.STRAND_FWD ? "Fwd" : "Rev";
            rowData[2] = expressedGene.getReadCount();

            model.addRow(rowData);
        }

        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>();
        this.expressedGenesTable.setRowSorter(sorter);
        sorter.setModel(model);
    }
}
