package de.cebitec.vamp.transcriptionAnalyses;

/*
 * GeneStartsResultPanel.java
 *
 * Created on 27.01.2012, 14:31:03
 */
import de.cebitec.vamp.exporter.excel.ExcelExportFileChooser;
import de.cebitec.vamp.transcriptionAnalyses.dataStructures.Operon;
import de.cebitec.vamp.transcriptionAnalyses.dataStructures.OperonAdjacency;
import de.cebitec.vamp.util.LineWrapCellRenderer;
import de.cebitec.vamp.view.dataVisualisation.BoundsInfoManager;
import de.cebitec.vamp.view.tableVisualization.TableComparatorProvider;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 * This panel is capable of showing a table with detected operons and
 * contains an export button, which exports the data into an excel file.
 *
 * @author -Rolf Hilker-
 */
public class ResultPanelOperonDetection extends javax.swing.JPanel {
    
    private static final long serialVersionUID = 1L;
    
    public static final String OPERONS_TOTAL = "Total number of detected operons";
    public static final String OPERONS_WITH_OVERLAPPING_READS = "Operons with reads overlapping only one feature edge";
    public static final String OPERONS_WITH_INTERNAL_READS = "Operons with internal reads";

    private BoundsInfoManager bim;
    private OperonDetectionResult operonResult;
    private HashMap<String, Integer> operonDetStats;

    /**
     * This panel is capable of showing a table with detected operons and
     * contains an export button, which exports the data into an excel file.
     * @param operonDetParameters parameters used for this operon detection
     */
    public ResultPanelOperonDetection(ParameterSetOperonDet operonDetParameters) {
        initComponents();
        this.initStatsMap();        

        DefaultListSelectionModel model = (DefaultListSelectionModel) this.operonDetectionTable.getSelectionModel();
        model.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                showOperonDetectionPosition();
            }
        });
    }
    /**
     * Initializes the statistics map.
     */
    private void initStatsMap() {
        operonDetStats = new HashMap<>();
        operonDetStats.put(OPERONS_TOTAL, 0);
        operonDetStats.put(OPERONS_WITH_OVERLAPPING_READS, 0);
        operonDetStats.put(OPERONS_WITH_INTERNAL_READS, 0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        operonDetectionTable = new javax.swing.JTable();
        exportButton = new javax.swing.JButton();
        parametersLabel = new javax.swing.JLabel();
        statisticsButton = new javax.swing.JButton();

        operonDetectionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Feature 1", "Feature 2", "Track", "Strand", "Start Feature 1", "Start Feature 2", "Reads Overlap Stop 1", "Reads Overlap Start 2", "Internal Reads", "Spanning Reads"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(operonDetectionTable);
        operonDetectionTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "ResultPanelOperonDetection.operonDetectionTable.columnModel.title0")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "OperonDetectionResultPanel.operonDetectionTable.columnModel.title7")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "ResultPanelOperonDetection.operonDetectionTable.columnModel.title9")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "OperonDetectionResultPanel.operonDetectionTable.columnModel.title1")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(4).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "OperonDetectionResultPanel.operonDetectionTable.columnModel.title2")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(5).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "OperonDetectionResultPanel.operonDetectionTable.columnModel.title8")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(6).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "OperonDetectionResultPanel.operonDetectionTable.columnModel.title3")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(7).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "OperonDetectionResultPanel.operonDetectionTable.columnModel.title4")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(8).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "OperonDetectionResultPanel.operonDetectionTable.columnModel.title5")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(9).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "OperonDetectionResultPanel.operonDetectionTable.columnModel.title6")); // NOI18N

        exportButton.setText(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "ResultPanelOperonDetection.exportButton.text")); // NOI18N
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        parametersLabel.setText(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "ResultPanelOperonDetection.parametersLabel.text")); // NOI18N

        statisticsButton.setText(org.openide.util.NbBundle.getMessage(ResultPanelOperonDetection.class, "ResultPanelOperonDetection.statisticsButton.text")); // NOI18N
        statisticsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statisticsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(parametersLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(statisticsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportButton))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(parametersLabel)
                        .addComponent(statisticsButton))
                    .addComponent(exportButton)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        ExcelExportFileChooser fileChooser = new ExcelExportFileChooser(new String[]{"xls"}, "xls", operonResult);
    }//GEN-LAST:event_exportButtonActionPerformed

    private void statisticsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statisticsButtonActionPerformed
        JOptionPane.showMessageDialog(this, new OperonDetectionStatsPanel(operonDetStats), "Operon Detection Statistics", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_statisticsButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable operonDetectionTable;
    private javax.swing.JLabel parametersLabel;
    private javax.swing.JButton statisticsButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Adds the data from this OperonDetectionResult to the data already available
     * in this result panel. All statistics etc. are also updated.
     * @param operonResultNew the result to add
     */
    public void addDetectedOperons(final OperonDetectionResult operonResultNew) {
        final int nbColumns = 10;
        final List<Operon> operons = new ArrayList<>(operonResultNew.getResults());

        if (this.operonResult == null) {
            this.operonResult = operonResultNew;
        } else {
            this.operonResult.getResults().addAll(operonResultNew.getResults());
        }

        SwingUtilities.invokeLater(new Runnable() { //because it is not called from the swing dispatch thread
            @Override
            public void run() {

                DefaultTableModel model = (DefaultTableModel) operonDetectionTable.getModel();
                LineWrapCellRenderer lineWrapCellRenderer = new LineWrapCellRenderer();
                operonDetectionTable.getColumnModel().getColumn(0).setCellRenderer(lineWrapCellRenderer);
                operonDetectionTable.getColumnModel().getColumn(1).setCellRenderer(lineWrapCellRenderer);
                operonDetectionTable.getColumnModel().getColumn(3).setCellRenderer(lineWrapCellRenderer);
                operonDetectionTable.getColumnModel().getColumn(4).setCellRenderer(lineWrapCellRenderer);
                operonDetectionTable.getColumnModel().getColumn(5).setCellRenderer(lineWrapCellRenderer);
                operonDetectionTable.getColumnModel().getColumn(6).setCellRenderer(lineWrapCellRenderer);
                operonDetectionTable.getColumnModel().getColumn(7).setCellRenderer(lineWrapCellRenderer);
                operonDetectionTable.getColumnModel().getColumn(8).setCellRenderer(lineWrapCellRenderer);
                operonDetectionTable.getColumnModel().getColumn(9).setCellRenderer(lineWrapCellRenderer);

                int operonsWithOverlapping = 0;
                int operonsWithInternal = 0;
                boolean hasOverlappingReads;
                boolean hasInternalReads;

                for (Operon operon : operons) {
                    String annoName1 = "";
                    String annoName2 = "";
                    String strand = (operon.getOperonAdjacencies().get(0).getFeature1().isFwdStrandString()) + "\n";
                    String startAnno1 = "";
                    String startAnno2 = "";
                    String readsAnno1 = "";
                    String readsAnno2 = "";
                    String internalReads = "";
                    String spanningReads = "";
                    hasOverlappingReads = false;
                    hasInternalReads = false;

                    for (OperonAdjacency opAdj : operon.getOperonAdjacencies()) {
                        annoName1 += opAdj.getFeature1().getLocus() + "\n";
                        annoName2 += opAdj.getFeature2().getLocus() + "\n";
                        startAnno1 += opAdj.getFeature1().getStart() + "\n";
                        startAnno2 += opAdj.getFeature2().getStart() + "\n";
                        readsAnno1 += opAdj.getReadsFeature1() + "\n";
                        readsAnno2 += opAdj.getReadsFeature2() + "\n";
                        internalReads += opAdj.getInternalReads() + "\n";
                        spanningReads += opAdj.getSpanningReads() + "\n";

                        hasInternalReads = opAdj.getInternalReads() > 0;
                        hasOverlappingReads = opAdj.getReadsFeature1() > 0 || opAdj.getReadsFeature2() > 0;
                    }
                    Object[] rowData = new Object[nbColumns];
                    rowData[0] = annoName1;
                    rowData[1] = annoName2;
                    rowData[2] = operonResultNew.getTrackMap().get(operon.getTrackId());
                    rowData[3] = strand;
                    rowData[4] = startAnno1;
                    rowData[5] = startAnno2;
                    rowData[6] = readsAnno1;
                    rowData[7] = readsAnno2;
                    rowData[8] = internalReads;
                    rowData[9] = spanningReads;
                    if (!annoName1.isEmpty() && !annoName2.isEmpty()) {
                        model.addRow(rowData);
                    }

                    if (hasOverlappingReads) {
                        ++operonsWithOverlapping;
                    }
                    if (hasInternalReads) {
                        ++operonsWithInternal;
                    }
                }

                TableRowSorter<TableModel> sorter = new TableRowSorter<>();
                operonDetectionTable.setRowSorter(sorter);
                sorter.setModel(model);
                for (int i = 3; i < 8; ++i) {
                    TableComparatorProvider.setStringComparator(sorter, i);
                }

                parametersLabel.setText(org.openide.util.NbBundle.getMessage(ResultPanelTranscriptionStart.class,
                        "ResultPanelOperonDetection.parametersLabel.text",
                        ((ParameterSetOperonDet) operonResult.getParameters()).getMinSpanningReads()));

                operonDetStats.put(OPERONS_TOTAL, operonDetStats.get(OPERONS_TOTAL) + operons.size());
                operonDetStats.put(OPERONS_WITH_OVERLAPPING_READS, operonDetStats.get(OPERONS_WITH_OVERLAPPING_READS) + operonsWithOverlapping);
                operonDetStats.put(OPERONS_WITH_INTERNAL_READS, operonDetStats.get(OPERONS_WITH_INTERNAL_READS) + operonsWithInternal);

                operonResult.setStatsMap(operonDetStats);

            }
        });
    }

    /**
     * Updates the position of the viewers to the currently selected operon 
     * start position in the table.
     */
    private void showOperonDetectionPosition() {
        DefaultListSelectionModel model = (DefaultListSelectionModel) this.operonDetectionTable.getSelectionModel();
        int selectedView = model.getLeadSelectionIndex();
        int selectedModel = this.operonDetectionTable.convertRowIndexToModel(selectedView);
        String posString = (String) this.operonDetectionTable.getModel().getValueAt(selectedModel, 4);
        String[] pos;
        pos = posString.split("\n");
           
        // Get position of first gene in the array
        bim.navigatorBarUpdated(Integer.parseInt(pos[0])); 
       
    }

    /**
     * Set the bounds info manager needed for updating the currently shown 
     * position.
     * @param boundsInformationManager the bounds info manager belonging to this analysis
     * result
     */
    public void setBoundsInfoManager(BoundsInfoManager boundsInformationManager) {
        this.bim = boundsInformationManager;
    }
    
    /**
     * @return The number of detected operons
     */
    public int getResultSize() {
        return this.operonResult.getResults().size();
    }
}
