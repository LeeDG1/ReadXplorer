/*
 * ResultPanelFilteredAnnos.java
 *
 * Created on 27.01.2012, 14:31:15
 */
package de.cebitec.vamp.transcriptionAnalyses;

import de.cebitec.vamp.databackend.dataObjects.PersistantAnnotation;
import de.cebitec.vamp.exporter.excel.ExcelExportFileChooser;
import de.cebitec.vamp.transcriptionAnalyses.dataStructures.FilteredAnnotation;
import de.cebitec.vamp.view.dataVisualisation.BoundsInfoManager;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 * Panel showing a result of an analysis filtering for annotations with a 
 * min and max certain readcount.
 * 
 * @author -Rolf Hilker-
 */
public class ResultPanelFilteredAnnos extends javax.swing.JPanel {
    
    private static final long serialVersionUID = 1L;

    private BoundsInfoManager bim;
    private List<FilteredAnnotation> filteredAnnos;
    private final ParameterSetFilterAnnos filterAnnosParameters;
    
    /**
     * Panel showing a result of an analysis filtering for annotations with a
     * min and max certain readcount.
     * @param filterAnnosParameters parameter set used for this annotation filtering
     */
    public ResultPanelFilteredAnnos(ParameterSetFilterAnnos filterAnnosParameters) {
        initComponents();
        this.filterAnnosParameters = filterAnnosParameters;
        this.filteredAnnos = new ArrayList<>();
        
        DefaultListSelectionModel model = (DefaultListSelectionModel) this.filteredAnnosTable.getSelectionModel();
        model.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                showFilteredAnnoPosition();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        expressedAnnosPane = new javax.swing.JScrollPane();
        filteredAnnosTable = new javax.swing.JTable();
        exportButton = new javax.swing.JButton();
        parametersLabel = new javax.swing.JLabel();
        statisticsButton = new javax.swing.JButton();

        filteredAnnosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Annotation", "Strand", "Total Read Count"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        expressedAnnosPane.setViewportView(filteredAnnosTable);
        filteredAnnosTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelFilteredAnnos.class, "ResultPanelFilteredAnnos.filteredAnnosTable.columnModel.title0")); // NOI18N
        filteredAnnosTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelFilteredAnnos.class, "ExpressedGenesResultPanel.expressedGenesTable.columnModel.title2_1")); // NOI18N
        filteredAnnosTable.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelFilteredAnnos.class, "ExpressedGenesResultPanel.expressedGenesTable.columnModel.title1")); // NOI18N

        exportButton.setText(org.openide.util.NbBundle.getMessage(ResultPanelFilteredAnnos.class, "ResultPanelFilteredAnnos.exportButton.text")); // NOI18N
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        parametersLabel.setText(org.openide.util.NbBundle.getMessage(ResultPanelFilteredAnnos.class, "ResultPanelFilteredAnnos.parametersLabel.text")); // NOI18N

        statisticsButton.setText(org.openide.util.NbBundle.getMessage(ResultPanelFilteredAnnos.class, "ResultPanelFilteredAnnos.statisticsButton.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(parametersLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statisticsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportButton))
            .addComponent(expressedAnnosPane, javax.swing.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(expressedAnnosPane, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportButton)
                    .addComponent(statisticsButton)
                    .addComponent(parametersLabel)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        FilteredAnnosColumns filteredAnnosData = new FilteredAnnosColumns(this.filteredAnnos);
        ExcelExportFileChooser fileChooser = new ExcelExportFileChooser(new String[]{"xls"}, "xls", filteredAnnosData); 
    }//GEN-LAST:event_exportButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportButton;
    private javax.swing.JScrollPane expressedAnnosPane;
    private javax.swing.JTable filteredAnnosTable;
    private javax.swing.JLabel parametersLabel;
    private javax.swing.JButton statisticsButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Updates the navigator bar of all viewers to the start position of the selected annotation.
     */
    private void showFilteredAnnoPosition() {
        DefaultListSelectionModel model = (DefaultListSelectionModel) this.filteredAnnosTable.getSelectionModel();
        int selectedView = model.getLeadSelectionIndex();
        int selectedModel = this.filteredAnnosTable.convertRowIndexToModel(selectedView);
        PersistantAnnotation annotation = (PersistantAnnotation) this.filteredAnnosTable.getModel().getValueAt(selectedModel, 0);
        int pos = annotation.isFwdStrand() ? annotation.getStart() : annotation.getStop();

        bim.navigatorBarUpdated(pos);
    }

    public void setBoundsInfoManager(BoundsInfoManager boundsInformationManager) {
        this.bim = boundsInformationManager;
    }

    /**
     * Adds a list of filtered annotations to this panel.
     * @param filteredAnnos 
     */
    public void addFilteredAnnos(List<FilteredAnnotation> filteredAnnos) {
        final int nbColumns = 3;
        this.filteredAnnos.addAll(filteredAnnos);
        DefaultTableModel model = (DefaultTableModel) this.filteredAnnosTable.getModel();        

        for (FilteredAnnotation filteredAnno : filteredAnnos) {
            
            Object[] rowData = new Object[nbColumns];
            rowData[0] = filteredAnno.getFilteredAnnotation();
            rowData[1] = filteredAnno.getFilteredAnnotation().isFwdStrand() ? "Fwd" : "Rev";
            rowData[2] = filteredAnno.getReadCount();

            model.addRow(rowData);
        }

        TableRowSorter<TableModel> sorter = new TableRowSorter<>();
        this.filteredAnnosTable.setRowSorter(sorter);
        sorter.setModel(model);
        
        this.parametersLabel.setText(org.openide.util.NbBundle.getMessage(ResultPanelTranscriptionStart.class,
                "ResultPanelFilteredAnnos.parametersLabel.text", filterAnnosParameters.getMinNumberReads(), filterAnnosParameters.getMaxNumberReads()));
    }
    
    /**
     * @return the number of annotations filtered during the associated analysis
     */
    public int getResultSize() {
        return this.filteredAnnos.size();
    }
}
