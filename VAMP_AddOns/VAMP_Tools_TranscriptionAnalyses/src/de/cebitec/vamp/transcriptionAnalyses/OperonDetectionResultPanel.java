package de.cebitec.vamp.transcriptionAnalyses;

/*
 * GeneStartsResultPanel.java
 *
 * Created on 27.01.2012, 14:31:03
 */
import de.cebitec.vamp.transcriptionAnalyses.dataStructures.Operon;
import de.cebitec.vamp.transcriptionAnalyses.dataStructures.OperonAdjacency;
import de.cebitec.vamp.exporter.excel.ExcelExportFileChooser;
import de.cebitec.vamp.util.LineWrapCellRenderer;
import de.cebitec.vamp.util.SequenceUtils;
import de.cebitec.vamp.view.dataVisualisation.BoundsInfoManager;
import java.util.List;
import javax.swing.DefaultListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author -Rolf Hilker-
 */
public class OperonDetectionResultPanel extends javax.swing.JPanel {

    private BoundsInfoManager bim;
    private List<Operon> operonDetection;

    /**
     * Creates new form GeneStartsResultPanel
     */
    public OperonDetectionResultPanel() {
        initComponents();

        DefaultListSelectionModel model = (DefaultListSelectionModel) this.operonDetectionTable.getSelectionModel();
        model.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                showOperonDetectionPosition();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        operonDetectionTable = new javax.swing.JTable();
        exportButton = new javax.swing.JButton();

        operonDetectionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Gene 1", "Gene 2", "Strand", "Start Gene 1", "Start Gene 2", "Gene 1 Reads", "Gene 2 Reads", "Internal Reads", "Spanning Reads"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(operonDetectionTable);
        operonDetectionTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(OperonDetectionResultPanel.class, "OperonDetectionResultPanel.operonDetectionTable.columnModel.title0")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(OperonDetectionResultPanel.class, "OperonDetectionResultPanel.operonDetectionTable.columnModel.title7")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(OperonDetectionResultPanel.class, "OperonDetectionResultPanel.operonDetectionTable.columnModel.title1")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(OperonDetectionResultPanel.class, "OperonDetectionResultPanel.operonDetectionTable.columnModel.title2")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(4).setHeaderValue(org.openide.util.NbBundle.getMessage(OperonDetectionResultPanel.class, "OperonDetectionResultPanel.operonDetectionTable.columnModel.title8")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(5).setHeaderValue(org.openide.util.NbBundle.getMessage(OperonDetectionResultPanel.class, "OperonDetectionResultPanel.operonDetectionTable.columnModel.title3")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(6).setHeaderValue(org.openide.util.NbBundle.getMessage(OperonDetectionResultPanel.class, "OperonDetectionResultPanel.operonDetectionTable.columnModel.title4")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(7).setHeaderValue(org.openide.util.NbBundle.getMessage(OperonDetectionResultPanel.class, "OperonDetectionResultPanel.operonDetectionTable.columnModel.title5")); // NOI18N
        operonDetectionTable.getColumnModel().getColumn(8).setHeaderValue(org.openide.util.NbBundle.getMessage(OperonDetectionResultPanel.class, "OperonDetectionResultPanel.operonDetectionTable.columnModel.title6")); // NOI18N

        exportButton.setText(org.openide.util.NbBundle.getMessage(OperonDetectionResultPanel.class, "OperonDetectionResultPanel.exportButton.text")); // NOI18N
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(452, Short.MAX_VALUE)
                .addComponent(exportButton))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportButton))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        OperonColumns operonColumns = new OperonColumns(operonDetection);
        ExcelExportFileChooser fileChooser = new ExcelExportFileChooser("xls", operonColumns, "Operon Detection Table");
    }//GEN-LAST:event_exportButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable operonDetectionTable;
    // End of variables declaration//GEN-END:variables

    public void addDetectedOperons(List<Operon> operonDetection) {
        final int nbColumns = 9;
        this.operonDetection = operonDetection;
        DefaultTableModel model = (DefaultTableModel) operonDetectionTable.getModel();
        LineWrapCellRenderer lineWrapCellRenderer = new LineWrapCellRenderer();
        operonDetectionTable.getColumnModel().getColumn(0).setCellRenderer(lineWrapCellRenderer);
        operonDetectionTable.getColumnModel().getColumn(1).setCellRenderer(lineWrapCellRenderer);
        operonDetectionTable.getColumnModel().getColumn(2).setCellRenderer(lineWrapCellRenderer);
        operonDetectionTable.getColumnModel().getColumn(3).setCellRenderer(lineWrapCellRenderer);
        operonDetectionTable.getColumnModel().getColumn(4).setCellRenderer(lineWrapCellRenderer);
        operonDetectionTable.getColumnModel().getColumn(5).setCellRenderer(lineWrapCellRenderer);
        operonDetectionTable.getColumnModel().getColumn(6).setCellRenderer(lineWrapCellRenderer);
        operonDetectionTable.getColumnModel().getColumn(7).setCellRenderer(lineWrapCellRenderer);
        operonDetectionTable.getColumnModel().getColumn(8).setCellRenderer(lineWrapCellRenderer);



        for (Operon operon : operonDetection) {
            String geneName1 = "";
            String geneName2 = "";
            String strand = "";
            String pos1 = "";
            String pos2 = "";
            String coverGen1 = "";
            String coverGen2 = "";
            String coverNone = "";
            String coverGen1And2 = "";

            for (OperonAdjacency ad : operon.getOperon()) {
                geneName1 += ad.getOperonAnnotation().getLocus() + "\n";
                geneName2 += ad.getOperonAnnotation2().getLocus() + "\n";
                strand += (ad.getOperonAnnotation().getStrand() == SequenceUtils.STRAND_FWD ? "Fwd" : "Rev") + "\n";
                pos1 += ad.getOperonAnnotation().getStart() + "\n";
                pos2 += ad.getOperonAnnotation2().getStart() + "\n";
                coverGen1 += ad.getReadsGene1() + "\n";
                coverGen2 += ad.getReadsGene2() + "\n";
                coverNone += ad.getInternalReads() + "\n";
                coverGen1And2 += ad.getSpanningReads() + "\n";
            }
            Object[] rowData = new Object[nbColumns];
            rowData[0] = geneName1;
            rowData[1] = geneName2;
            rowData[2] = strand;
            rowData[3] = pos1;
            rowData[4] = pos2;
            rowData[5] = coverGen1;
            rowData[6] = coverGen2;
            rowData[7] = coverNone;
            rowData[8] = coverGen1And2;
            if (!geneName1.isEmpty() && !geneName2.isEmpty()) {
                model.addRow(rowData);
            }
        }
        
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>();
        this.operonDetectionTable.setRowSorter(sorter);
        sorter.setModel(model);
    }

    private void showOperonDetectionPosition() {
        DefaultListSelectionModel model = (DefaultListSelectionModel) this.operonDetectionTable.getSelectionModel();
        int selectedView = model.getLeadSelectionIndex();
        int selectedModel = this.operonDetectionTable.convertRowIndexToModel(selectedView);
        String posString = (String) this.operonDetectionTable.getModel().getValueAt(selectedModel, 4);
        String[] pos;
        pos = posString.split("\n");
           
        // Get position of first gene in the array
        bim.navigatorBarUpdated(Integer.parseInt(pos[0])); 
       
    }

    public void setBoundsInfoManager(BoundsInfoManager boundsInformationManager) {
        this.bim = boundsInformationManager;
    }
    
    public int getResultSize() {
        return this.operonDetection.size();
    }
}
