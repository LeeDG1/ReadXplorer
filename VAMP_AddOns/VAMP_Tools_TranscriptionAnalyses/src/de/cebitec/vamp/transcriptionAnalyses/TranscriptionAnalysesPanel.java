/*
 * TranscriptionAnalysesPanel.java
 *
 * Created on 25.01.2012, 16:29:57
 */
package de.cebitec.vamp.transcriptionAnalyses;

import de.cebitec.vamp.databackend.dataObjects.PersistantFeature;
import de.cebitec.vamp.util.TabWithCloseX;
import de.cebitec.vamp.view.dataVisualisation.DataVisualisationI;
import de.cebitec.vamp.view.dataVisualisation.trackViewer.TrackViewer;
import java.util.List;
import javax.swing.JOptionPane;

/**
 * @author -Rolf Hilker-
 *
 * Creates a new transcription analyses panel, which contains the menu for
 * different transcription anlyses on the left side and a tabbed pane for the
 * corresponding result tables on the right side.
 */
public class TranscriptionAnalysesPanel extends javax.swing.JPanel implements DataVisualisationI {

    private TrackViewer trackViewer;
    private AnalysisGeneStart analysisGeneStarts;
    private AnalysisExpressedGenes analysisExpressedGenes;
    private AnalysisOperon analysisOperon;
    private boolean detectGeneStarts;
    private boolean geneStartAutomatic;
    private boolean doneGeneStarts;
    private boolean detectExpressedGenes;
    private boolean doneExpressedGenes;
    private boolean detectOperon;
    private boolean doneOperon;
    private int nbAnalyses;
    private int nbFinishedAnalyses;
    private boolean operonDetectionAutomatic;
    public static final String PROP_ANALYSES_FINISHED = "analysesFinished";

    /**
     * Creates a new transcription analyses panel, which contains the menu for
     * different transcription anlyses on the left side and a tabbed pane for
     * the corresponding result tables on the right side.
     */
    public TranscriptionAnalysesPanel(TrackViewer trackViewer) {
        this.initComponents();
        this.trackViewer = trackViewer;
        this.analysisGeneStarts = null;
        this.analysisExpressedGenes = null;
        this.detectGeneStarts = false;
        this.detectExpressedGenes = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuResultSplitPane = new javax.swing.JSplitPane();
        menuPanel = new javax.swing.JPanel();
        menuLabel = new javax.swing.JLabel();
        expressedGenesBox = new javax.swing.JCheckBox();
        geneStartBox = new javax.swing.JCheckBox();
        geneStartField = new javax.swing.JTextField();
        geneStartLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        expressedGenesField = new javax.swing.JTextField();
        expressedGenesLabel = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        detectionButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        geneStartField3 = new javax.swing.JTextField();
        geneStartLabel2 = new javax.swing.JLabel();
        geneStartField4 = new javax.swing.JTextField();
        geneStartLabel3 = new javax.swing.JLabel();
        addRestrictionLabel = new javax.swing.JLabel();
        geneStartAutomaticBox = new javax.swing.JCheckBox();
        geneStartLabel1 = new javax.swing.JLabel();
        geneStartField2 = new javax.swing.JTextField();
        operonBox = new javax.swing.JCheckBox();
        operonField = new javax.swing.JTextField();
        operonLabel = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        operonDetectionAutomaticBox1 = new javax.swing.JCheckBox();
        resultTabs = new javax.swing.JTabbedPane();

        menuResultSplitPane.setDividerLocation(230);

        menuLabel.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.menuLabel.text")); // NOI18N

        expressedGenesBox.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.expressedGenesBox.text")); // NOI18N
        expressedGenesBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expressedGenesBoxActionPerformed(evt);
            }
        });

        geneStartBox.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.geneStartBox.text")); // NOI18N
        geneStartBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geneStartBoxActionPerformed(evt);
            }
        });

        geneStartField.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.geneStartField.text")); // NOI18N
        geneStartField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geneStartFieldActionPerformed(evt);
            }
        });

        geneStartLabel.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.geneStartLabel.text")); // NOI18N

        expressedGenesField.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.expressedGenesField.text")); // NOI18N
        expressedGenesField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expressedGenesFieldActionPerformed(evt);
            }
        });

        expressedGenesLabel.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.expressedGenesLabel.text")); // NOI18N

        detectionButton.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.detectionButton.text")); // NOI18N
        detectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detectionButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        geneStartField3.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.geneStartField3.text")); // NOI18N
        geneStartField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geneStartField3ActionPerformed(evt);
            }
        });

        geneStartLabel2.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.geneStartLabel2.text")); // NOI18N

        geneStartField4.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.geneStartField4.text")); // NOI18N
        geneStartField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geneStartField4ActionPerformed(evt);
            }
        });

        geneStartLabel3.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.geneStartLabel3.text")); // NOI18N

        addRestrictionLabel.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.addRestrictionLabel.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addRestrictionLabel)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(geneStartField3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(geneStartLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(geneStartField4, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(geneStartLabel3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addRestrictionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(geneStartField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(geneStartLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(geneStartField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(geneStartLabel3))
                .addGap(7, 7, 7))
        );

        geneStartAutomaticBox.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.geneStartAutomaticBox.text")); // NOI18N
        geneStartAutomaticBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geneStartAutomaticBoxActionPerformed(evt);
            }
        });

        geneStartLabel1.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.geneStartLabel1.text")); // NOI18N

        geneStartField2.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.geneStartField2.text")); // NOI18N
        geneStartField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geneStartField2ActionPerformed(evt);
            }
        });

        operonBox.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.operonBox.text")); // NOI18N
        operonBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operonBoxActionPerformed(evt);
            }
        });

        operonField.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.operonField.text")); // NOI18N
        operonField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operonFieldActionPerformed(evt);
            }
        });

        operonLabel.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.operonLabel.text")); // NOI18N

        operonDetectionAutomaticBox1.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.operonDetectionAutomaticBox1.text")); // NOI18N
        operonDetectionAutomaticBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operonDetectionAutomaticBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(menuPanelLayout.createSequentialGroup()
                        .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(menuLabel)
                            .addGroup(menuPanelLayout.createSequentialGroup()
                                .addComponent(geneStartField, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(geneStartLabel))
                            .addGroup(menuPanelLayout.createSequentialGroup()
                                .addComponent(geneStartField2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(geneStartLabel1))
                            .addComponent(expressedGenesBox)
                            .addGroup(menuPanelLayout.createSequentialGroup()
                                .addComponent(expressedGenesField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(expressedGenesLabel))
                            .addComponent(detectionButton)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(menuPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(geneStartBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(geneStartAutomaticBox)))
                        .addContainerGap())
                    .addGroup(menuPanelLayout.createSequentialGroup()
                        .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(menuPanelLayout.createSequentialGroup()
                                .addComponent(operonBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(operonDetectionAutomaticBox1))
                            .addGroup(menuPanelLayout.createSequentialGroup()
                                .addComponent(operonField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(operonLabel)))
                        .addGap(0, 6, Short.MAX_VALUE))))
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(menuLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(geneStartBox)
                    .addComponent(geneStartAutomaticBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(geneStartField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(geneStartLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(geneStartField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(geneStartLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(expressedGenesBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(expressedGenesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(expressedGenesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(operonBox)
                    .addComponent(operonDetectionAutomaticBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(operonField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(operonLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(detectionButton)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        menuResultSplitPane.setLeftComponent(menuPanel);
        menuResultSplitPane.setRightComponent(resultTabs);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(menuResultSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 695, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(menuResultSplitPane)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void expressedGenesBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expressedGenesBoxActionPerformed
        if (!this.isValidNumberInput(this.expressedGenesField.getText())) {
            JOptionPane.showMessageDialog(this, "Please enter a positive number or 0 in the expressed genes fields!", "Number Format Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_expressedGenesBoxActionPerformed

    private void geneStartBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geneStartBoxActionPerformed
        if (!this.isValidNumberInput(this.geneStartField.getText())
                || !this.isValidNumberInput(this.geneStartField2.getText())
                || !this.isValidNumberInput(this.geneStartField3.getText())) {
            JOptionPane.showMessageDialog(this, "Please enter a positive number or 0 in all gene start fields!", "Number Format Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_geneStartBoxActionPerformed

    private void geneStartFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geneStartFieldActionPerformed
        // no action needed
    }//GEN-LAST:event_geneStartFieldActionPerformed

    private void expressedGenesFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expressedGenesFieldActionPerformed
        // no action needed
    }//GEN-LAST:event_expressedGenesFieldActionPerformed

    private void geneStartField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geneStartField3ActionPerformed
        // no action needed
    }//GEN-LAST:event_geneStartField3ActionPerformed

    private void geneStartField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geneStartField4ActionPerformed
        // no action needed
    }//GEN-LAST:event_geneStartField4ActionPerformed

    private void detectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detectionButtonActionPerformed
        if (!this.isValidNumberInput(this.geneStartField.getText())
                || !this.isValidNumberInput(this.geneStartField2.getText())
                || !this.isValidNumberInput(this.geneStartField3.getText())
                || !this.isValidNumberInput(this.expressedGenesField.getText())
                || !this.isValidNumberInput(this.operonField.getText())) {
            JOptionPane.showMessageDialog(this, "Please enter a positive number or 0 in all fields!", "Number Format Error", JOptionPane.ERROR_MESSAGE);
        } else {

            this.detectGeneStarts = this.geneStartBox.isSelected();
            this.geneStartAutomatic = this.geneStartAutomaticBox.isSelected();
            this.detectExpressedGenes = this.expressedGenesBox.isSelected();
            this.doneGeneStarts = false;
            this.doneExpressedGenes = false;
            this.detectOperon = this.operonBox.isSelected();
            this.doneOperon = false;
            this.operonDetectionAutomatic = this.operonDetectionAutomaticBox1.isSelected();
            this.nbAnalyses = this.detectGeneStarts ? 1 : 0;
            this.nbAnalyses = this.detectExpressedGenes ? ++this.nbAnalyses : this.nbAnalyses;
            this.nbFinishedAnalyses = 0;
            this.startAnalyses();

            if (this.detectGeneStarts || this.detectExpressedGenes||this.detectOperon) {
                this.detectionButton.setEnabled(false);
            }
        }
    }//GEN-LAST:event_detectionButtonActionPerformed

    private void geneStartAutomaticBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geneStartAutomaticBoxActionPerformed
        if (this.geneStartAutomaticBox.isSelected()) {
            this.geneStartField.setEnabled(false);
            this.geneStartField2.setEnabled(false);
            this.geneStartField3.setEnabled(false);
            this.geneStartField4.setEnabled(false);
        } else {
            this.geneStartField.setEnabled(true);
            this.geneStartField2.setEnabled(true);
            this.geneStartField3.setEnabled(true);
            this.geneStartField4.setEnabled(true);
        }
    }//GEN-LAST:event_geneStartAutomaticBoxActionPerformed

    private void geneStartField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geneStartField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_geneStartField2ActionPerformed

    private void operonBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operonBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_operonBoxActionPerformed

    private void operonFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operonFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_operonFieldActionPerformed

    private void operonDetectionAutomaticBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operonDetectionAutomaticBox1ActionPerformed
        if (this.operonDetectionAutomaticBox1.isSelected()) {
            this.operonField.setEnabled(false);
        } else {
            this.operonField.setEnabled(true);

        }
    }//GEN-LAST:event_operonDetectionAutomaticBox1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addRestrictionLabel;
    private javax.swing.JButton detectionButton;
    private javax.swing.JCheckBox expressedGenesBox;
    private javax.swing.JTextField expressedGenesField;
    private javax.swing.JLabel expressedGenesLabel;
    private javax.swing.JCheckBox geneStartAutomaticBox;
    private javax.swing.JCheckBox geneStartBox;
    private javax.swing.JTextField geneStartField;
    private javax.swing.JTextField geneStartField2;
    private javax.swing.JTextField geneStartField3;
    private javax.swing.JTextField geneStartField4;
    private javax.swing.JLabel geneStartLabel;
    private javax.swing.JLabel geneStartLabel1;
    private javax.swing.JLabel geneStartLabel2;
    private javax.swing.JLabel geneStartLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel menuLabel;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JSplitPane menuResultSplitPane;
    private javax.swing.JCheckBox operonBox;
    private javax.swing.JCheckBox operonDetectionAutomaticBox1;
    private javax.swing.JTextField operonField;
    private javax.swing.JLabel operonLabel;
    private javax.swing.JTabbedPane resultTabs;
    // End of variables declaration//GEN-END:variables

    /**
     * Closes all data structures of this component.
     */
    public void close() {
        this.removeAll();
    }

    /**
     * Cecks if the input string is a valid number.
     *
     * @param s input string to check
     * @return
     * <code>true</code> if it is a valid input string,
     * <code>false</code> otherwise
     */
    private boolean isValidNumberInput(String s) {
        try {
            return Integer.parseInt(s) >= 0 ? true : false;
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * Starts the analyses selected by the user with the given parameters.
     */
    private void startAnalyses() {
        if (this.detectGeneStarts && !this.doneGeneStarts) {
            int increaseReadCount = Integer.parseInt(this.geneStartField.getText());
            int increaseReadPercent = Integer.parseInt(this.geneStartField2.getText());
            int maxInitialReadCount = Integer.parseInt(this.geneStartField3.getText());
            int increaseReadCount2 = Integer.parseInt(this.geneStartField4.getText());
            this.analysisGeneStarts = new AnalysisGeneStart(this, this.trackViewer, increaseReadCount,
                    increaseReadPercent, maxInitialReadCount, increaseReadCount2, this.geneStartAutomatic);
            this.analysisGeneStarts.startAnalysis();
            
            return;
        }
        if (this.detectExpressedGenes && !this.doneExpressedGenes) {
            int minNumberReads = Integer.parseInt(this.expressedGenesField.getText());
            this.analysisExpressedGenes = new AnalysisExpressedGenes(this, this.trackViewer, minNumberReads);
            this.analysisExpressedGenes.startAnalysis();

            return;
        }
        if (this.detectOperon && !this.doneOperon) {
            int minNumberReads = Integer.parseInt(this.operonField.getText());
            this.analysisOperon = new AnalysisOperon(this, this.trackViewer, minNumberReads, this.operonDetectionAutomatic);
            this.analysisOperon.startAnalysis();

        }
    }

    @Override
    public void showData(Object isDataAvailable) {

        if (isDataAvailable instanceof Boolean && ((Boolean) isDataAvailable) == true) {
            if (this.detectGeneStarts && !this.doneGeneStarts) {
                GeneStartsResultPanel geneStartResultPanel = new GeneStartsResultPanel();
                geneStartResultPanel.setBoundsInfoManager(this.trackViewer.getBoundsInformationManager());
                geneStartResultPanel.addGeneStarts(this.analysisGeneStarts.getResults());
                System.out.println("Size: " + this.analysisGeneStarts.getResults().size());
                //TODO: get track name
                this.resultTabs.addTab("Detected gene starts for track", geneStartResultPanel);
                this.resultTabs.setTabComponentAt(this.resultTabs.getTabCount() - 1, new TabWithCloseX(this.resultTabs));
                this.resultTabs.setSelectedIndex(this.resultTabs.getTabCount() - 1);

                //start remaining analyses, if there are any
                this.doneGeneStarts = true;
                TranscriptionAnalysesPanel.this.startAnalyses();
            }
            if (this.detectExpressedGenes && !this.doneExpressedGenes) {

                List<ExpressedGene> expressedGenes = this.analysisExpressedGenes.getResults();
                int size = expressedGenes.size();

                ExpressedGenesResultPanel expressedGenesResultPanel = new ExpressedGenesResultPanel();
                expressedGenesResultPanel.setBoundsInfoManager(this.trackViewer.getBoundsInformationManager());
                expressedGenesResultPanel.addExpressedGenes(expressedGenes);

                this.resultTabs.addTab("Detected expressed genes for track", expressedGenesResultPanel);
                this.resultTabs.setTabComponentAt(this.resultTabs.getTabCount() - 1, new TabWithCloseX(this.resultTabs));
                this.resultTabs.setSelectedIndex(this.resultTabs.getTabCount() - 1);

                //start remaining analyses, if there are any
                this.doneExpressedGenes = true;
                TranscriptionAnalysesPanel.this.startAnalyses();

                //add this, when another analysis was added
                //return;

                //TODO: prozentualer increase
                //annotation finden/ändern

            }
            if (this.detectOperon && !this.doneOperon) {
            ++this.nbFinishedAnalyses;
                OperonDetectionResultPanel operonPanel = new OperonDetectionResultPanel();
                operonPanel.setBoundsInfoManager(this.trackViewer.getBoundsInformationManager());
                operonPanel.addOperonDetections(this.analysisOperon.getResults());

                this.resultTabs.addTab("Detected operon for track", operonPanel);
                this.resultTabs.setTabComponentAt(this.resultTabs.getTabCount() - 1, new TabWithCloseX(this.resultTabs));
                this.resultTabs.setSelectedIndex(this.resultTabs.getTabCount() - 1);
                
                this.doneOperon = true;
                TranscriptionAnalysesPanel.this.startAnalyses();
            }
        }
        if (this.nbFinishedAnalyses >= this.nbAnalyses) {
            this.detectionButton.setEnabled(true);
        }

    }
}
