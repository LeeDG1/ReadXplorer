/*
 * TranscriptionAnalysesPanel.java
 *
 * Created on 25.01.2012, 16:29:57
 */
package de.cebitec.vamp.transcriptionAnalyses;

import de.cebitec.vamp.transcriptionAnalyses.dataStructures.FilteredGene;
import de.cebitec.vamp.util.TabWithCloseX;
import de.cebitec.vamp.view.dataVisualisation.DataVisualisationI;
import de.cebitec.vamp.view.dataVisualisation.trackViewer.TrackViewer;
import java.util.List;
import javax.swing.JOptionPane;

/**
 * @author -Rolf Hilker-
 *
 * Creates a new transcription analyses panel, which contains the menu for
 * different transcription anlyses on the left side and a tabbed pane for the
 * corresponding result tables on the right side.
 */
public class TranscriptionAnalysesPanel extends javax.swing.JPanel implements DataVisualisationI {

    private TrackViewer trackViewer;
    private AnalysisTranscriptionStart analysisTSS;
    private AnalysisFilterGenes analysisFilteredGenes;
    private AnalysisOperon analysisOperon;
    private boolean detectTranscriptionStarts;
    private boolean transcriptionStartAutomatic;
    private boolean filterGenes;
    private boolean detectOperons;
    private boolean operonDetectionAutomatic;
    public static final String PROP_ANALYSES_FINISHED = "analysesFinished";

    /**
     * Creates a new transcription analyses panel, which contains the menu for
     * different transcription anlyses on the left side and a tabbed pane for
     * the corresponding result tables on the right side.
     */
    public TranscriptionAnalysesPanel(TrackViewer trackViewer) {
        this.initComponents();
        this.operonDetectionAutomaticBox.setVisible(false);
        this.trackViewer = trackViewer;
        this.analysisTSS = null;
        this.analysisFilteredGenes = null;
        this.detectTranscriptionStarts = false;
        this.filterGenes = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuResultSplitPane = new javax.swing.JSplitPane();
        menuPanel = new javax.swing.JPanel();
        menuLabel = new javax.swing.JLabel();
        filteredGenesBox = new javax.swing.JCheckBox();
        transcriptionStartBox = new javax.swing.JCheckBox();
        transcriptionStartField = new javax.swing.JTextField();
        transcriptionStartLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        filteredGenesField = new javax.swing.JTextField();
        filteredGenesLabel = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        detectionButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        transcriptionStartField3 = new javax.swing.JTextField();
        transcriptionStartLabel2 = new javax.swing.JLabel();
        transcriptionStartField4 = new javax.swing.JTextField();
        transcriptionStartLabel3 = new javax.swing.JLabel();
        addRestrictionLabel = new javax.swing.JLabel();
        transcriptionStartAutomaticBox = new javax.swing.JCheckBox();
        transcriptionStartLabel1 = new javax.swing.JLabel();
        transcriptionStartField2 = new javax.swing.JTextField();
        operonDetectionBox = new javax.swing.JCheckBox();
        operonField = new javax.swing.JTextField();
        operonLabel = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        operonDetectionAutomaticBox = new javax.swing.JCheckBox();
        filteredGenesField2 = new javax.swing.JTextField();
        filteredGenesLabel2 = new javax.swing.JLabel();
        resultTabs = new javax.swing.JTabbedPane();

        menuResultSplitPane.setDividerLocation(230);

        menuLabel.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.menuLabel.text")); // NOI18N

        filteredGenesBox.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.filteredGenesBox.text")); // NOI18N
        filteredGenesBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filteredGenesBoxActionPerformed(evt);
            }
        });

        transcriptionStartBox.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.transcriptionStartBox.text")); // NOI18N
        transcriptionStartBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transcriptionStartBoxActionPerformed(evt);
            }
        });

        transcriptionStartField.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.transcriptionStartField.text")); // NOI18N
        transcriptionStartField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transcriptionStartFieldActionPerformed(evt);
            }
        });

        transcriptionStartLabel.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.transcriptionStartLabel.text")); // NOI18N

        filteredGenesField.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.filteredGenesField.text")); // NOI18N
        filteredGenesField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filteredGenesFieldActionPerformed(evt);
            }
        });

        filteredGenesLabel.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.filteredGenesLabel.text")); // NOI18N

        detectionButton.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.detectionButton.text")); // NOI18N
        detectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detectionButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        transcriptionStartField3.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.transcriptionStartField3.text")); // NOI18N
        transcriptionStartField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transcriptionStartField3ActionPerformed(evt);
            }
        });

        transcriptionStartLabel2.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.transcriptionStartLabel2.text")); // NOI18N

        transcriptionStartField4.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.transcriptionStartField4.text")); // NOI18N
        transcriptionStartField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transcriptionStartField4ActionPerformed(evt);
            }
        });

        transcriptionStartLabel3.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.transcriptionStartLabel3.text")); // NOI18N

        addRestrictionLabel.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.addRestrictionLabel.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addRestrictionLabel)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(transcriptionStartField3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(transcriptionStartLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(transcriptionStartField4, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(transcriptionStartLabel3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addRestrictionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transcriptionStartField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transcriptionStartLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transcriptionStartField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transcriptionStartLabel3))
                .addGap(7, 7, 7))
        );

        transcriptionStartAutomaticBox.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.transcriptionStartAutomaticBox.text")); // NOI18N
        transcriptionStartAutomaticBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transcriptionStartAutomaticBoxActionPerformed(evt);
            }
        });

        transcriptionStartLabel1.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.transcriptionStartLabel1.text")); // NOI18N

        transcriptionStartField2.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.transcriptionStartField2.text")); // NOI18N
        transcriptionStartField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transcriptionStartField2ActionPerformed(evt);
            }
        });

        operonDetectionBox.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.operonDetectionBox.text")); // NOI18N
        operonDetectionBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operonDetectionBoxActionPerformed(evt);
            }
        });

        operonField.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.operonField.text")); // NOI18N
        operonField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operonFieldActionPerformed(evt);
            }
        });

        operonLabel.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.operonLabel.text")); // NOI18N

        operonDetectionAutomaticBox.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.operonDetectionAutomaticBox.text")); // NOI18N
        operonDetectionAutomaticBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operonDetectionAutomaticBoxActionPerformed(evt);
            }
        });

        filteredGenesField2.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.filteredGenesField2.text")); // NOI18N
        filteredGenesField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filteredGenesField2ActionPerformed(evt);
            }
        });

        filteredGenesLabel2.setText(org.openide.util.NbBundle.getMessage(TranscriptionAnalysesPanel.class, "TranscriptionAnalysesPanel.filteredGenesLabel2.text")); // NOI18N

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addComponent(jSeparator3)
            .addComponent(jSeparator1)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(menuPanelLayout.createSequentialGroup()
                        .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(detectionButton)
                            .addComponent(menuLabel)
                            .addGroup(menuPanelLayout.createSequentialGroup()
                                .addComponent(transcriptionStartField, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(transcriptionStartLabel))
                            .addGroup(menuPanelLayout.createSequentialGroup()
                                .addComponent(transcriptionStartField2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(transcriptionStartLabel1))
                            .addComponent(filteredGenesBox)
                            .addGroup(menuPanelLayout.createSequentialGroup()
                                .addComponent(filteredGenesField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(filteredGenesLabel))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(menuPanelLayout.createSequentialGroup()
                                .addComponent(transcriptionStartBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(transcriptionStartAutomaticBox))
                            .addGroup(menuPanelLayout.createSequentialGroup()
                                .addComponent(operonField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(operonLabel))
                            .addGroup(menuPanelLayout.createSequentialGroup()
                                .addComponent(filteredGenesField2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(filteredGenesLabel2)))
                        .addContainerGap())
                    .addComponent(jSeparator4)
                    .addGroup(menuPanelLayout.createSequentialGroup()
                        .addComponent(operonDetectionBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(operonDetectionAutomaticBox)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(menuLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transcriptionStartBox)
                    .addComponent(transcriptionStartAutomaticBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transcriptionStartField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transcriptionStartLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transcriptionStartField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transcriptionStartLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filteredGenesBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filteredGenesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filteredGenesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filteredGenesField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filteredGenesLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(operonDetectionBox)
                    .addComponent(operonDetectionAutomaticBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(operonField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(operonLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(detectionButton)
                .addContainerGap(165, Short.MAX_VALUE))
        );

        menuResultSplitPane.setLeftComponent(menuPanel);
        menuResultSplitPane.setRightComponent(resultTabs);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(menuResultSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 695, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(menuResultSplitPane)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void filteredGenesBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filteredGenesBoxActionPerformed
        if (!this.isValidNumberInput(this.filteredGenesField.getText())) {
            JOptionPane.showMessageDialog(this, "Please enter a positive number or 0 in the expressed genes fields!", "Number Format Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_filteredGenesBoxActionPerformed

    private void transcriptionStartBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transcriptionStartBoxActionPerformed
        if (!this.isValidNumberInput(this.transcriptionStartField.getText())
                || (!this.isValidNumberInput(this.transcriptionStartField2.getText()) && !this.transcriptionStartField2.getText().isEmpty())
                || (!this.isValidNumberInput(this.transcriptionStartField3.getText()) && !this.transcriptionStartField3.getText().isEmpty())) {
            JOptionPane.showMessageDialog(this, "Please enter a number >= 0 in all transcription start fields!", "Number Format Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_transcriptionStartBoxActionPerformed

    private void transcriptionStartFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transcriptionStartFieldActionPerformed
        // no action needed
    }//GEN-LAST:event_transcriptionStartFieldActionPerformed

    private void filteredGenesFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filteredGenesFieldActionPerformed
        // no action needed
    }//GEN-LAST:event_filteredGenesFieldActionPerformed

    private void transcriptionStartField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transcriptionStartField3ActionPerformed
        // no action needed
    }//GEN-LAST:event_transcriptionStartField3ActionPerformed

    private void transcriptionStartField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transcriptionStartField4ActionPerformed
        // no action needed
    }//GEN-LAST:event_transcriptionStartField4ActionPerformed

    private void detectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detectionButtonActionPerformed
        if ((this.transcriptionStartBox.isSelected() && !this.transcriptionStartAutomaticBox.isSelected()
                && (!this.isValidNumberInput(this.transcriptionStartField.getText())
                || !this.isValidNumberInput(this.transcriptionStartField2.getText())
                || !this.isValidNumberInput(this.transcriptionStartField3.getText())))
                || ((this.filteredGenesBox.isSelected()) 
                && !this.isValidNumberInput(this.filteredGenesField.getText()))
                || (this.operonDetectionBox.isSelected()
                && !this.isValidNumberInput(this.operonField.getText()))) {
            JOptionPane.showMessageDialog(this, "Please enter a number >= 0 in all fields!", "Number Format Error", JOptionPane.ERROR_MESSAGE);
        } else {

            this.detectTranscriptionStarts = this.transcriptionStartBox.isSelected();
            this.transcriptionStartAutomatic = this.transcriptionStartAutomaticBox.isSelected();
            this.filterGenes = this.filteredGenesBox.isSelected();
            this.detectOperons = this.operonDetectionBox.isSelected();
            this.operonDetectionAutomatic = this.operonDetectionAutomaticBox.isSelected();
            this.startAnalyses();

            if (this.detectTranscriptionStarts || this.filterGenes || this.detectOperons) {
                this.detectionButton.setEnabled(false);
            }
        }
    }//GEN-LAST:event_detectionButtonActionPerformed

    private void transcriptionStartAutomaticBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transcriptionStartAutomaticBoxActionPerformed
        if (this.transcriptionStartAutomaticBox.isSelected()) {
            this.transcriptionStartField.setEnabled(false);
            this.transcriptionStartField2.setEnabled(false);
            this.transcriptionStartField3.setEnabled(false);
            this.transcriptionStartField4.setEnabled(false);
        } else {
            this.transcriptionStartField.setEnabled(true);
            this.transcriptionStartField2.setEnabled(true);
            this.transcriptionStartField3.setEnabled(true);
            this.transcriptionStartField4.setEnabled(true);
        }
    }//GEN-LAST:event_transcriptionStartAutomaticBoxActionPerformed

    private void transcriptionStartField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transcriptionStartField2ActionPerformed
        // add your handling code here:
    }//GEN-LAST:event_transcriptionStartField2ActionPerformed

    private void operonDetectionBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operonDetectionBoxActionPerformed
        // add your handling code here:
    }//GEN-LAST:event_operonDetectionBoxActionPerformed

    private void operonFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operonFieldActionPerformed
        // add your handling code here:
    }//GEN-LAST:event_operonFieldActionPerformed

    private void operonDetectionAutomaticBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operonDetectionAutomaticBoxActionPerformed
        if (this.operonDetectionAutomaticBox.isSelected()) {
            this.operonField.setEnabled(false);
        } else {
            this.operonField.setEnabled(true);
        }
    }//GEN-LAST:event_operonDetectionAutomaticBoxActionPerformed

    private void filteredGenesField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filteredGenesField2ActionPerformed
        // add your handling code here:
    }//GEN-LAST:event_filteredGenesField2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addRestrictionLabel;
    private javax.swing.JButton detectionButton;
    private javax.swing.JCheckBox filteredGenesBox;
    private javax.swing.JTextField filteredGenesField;
    private javax.swing.JTextField filteredGenesField2;
    private javax.swing.JLabel filteredGenesLabel;
    private javax.swing.JLabel filteredGenesLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel menuLabel;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JSplitPane menuResultSplitPane;
    private javax.swing.JCheckBox operonDetectionAutomaticBox;
    private javax.swing.JCheckBox operonDetectionBox;
    private javax.swing.JTextField operonField;
    private javax.swing.JLabel operonLabel;
    private javax.swing.JTabbedPane resultTabs;
    private javax.swing.JCheckBox transcriptionStartAutomaticBox;
    private javax.swing.JCheckBox transcriptionStartBox;
    private javax.swing.JTextField transcriptionStartField;
    private javax.swing.JTextField transcriptionStartField2;
    private javax.swing.JTextField transcriptionStartField3;
    private javax.swing.JTextField transcriptionStartField4;
    private javax.swing.JLabel transcriptionStartLabel;
    private javax.swing.JLabel transcriptionStartLabel1;
    private javax.swing.JLabel transcriptionStartLabel2;
    private javax.swing.JLabel transcriptionStartLabel3;
    // End of variables declaration//GEN-END:variables

    /**
     * Closes all data structures of this component.
     */
    public void close() {
        this.removeAll();
    }

    /**
     * Cecks if the input string is a valid number.
     *
     * @param s input string to check
     * @return
     * <code>true</code> if it is a valid input string,
     * <code>false</code> otherwise
     */
    private boolean isValidNumberInput(String s) {
        try {
            return Integer.parseInt(s) >= 0 ? true : false;
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * Starts the analyses selected by the user with the given parameters.
     */
    private void startAnalyses() {
        AnalysesHandler covAnalysisHandler = new AnalysesHandler(this.trackViewer, this);
        AnalysesHandler mappingAnalysisHandler = new AnalysesHandler(this.trackViewer, this);
        
        if (this.detectTranscriptionStarts) {
            int increaseReadCount = Integer.parseInt(this.transcriptionStartField.getText());
            int increaseReadPercent = Integer.parseInt(this.transcriptionStartField2.getText());
            int maxInitialReadCount = Integer.parseInt(this.transcriptionStartField3.getText());
            int increaseReadCount2 = Integer.parseInt(this.transcriptionStartField4.getText());
            this.analysisTSS = new AnalysisTranscriptionStart(this.trackViewer, increaseReadCount,
                    increaseReadPercent, maxInitialReadCount, increaseReadCount2, this.transcriptionStartAutomatic);
            
            covAnalysisHandler.registerObserver(this.analysisTSS);
            covAnalysisHandler.setCoverageNeeded(true);
        }
        if (this.filterGenes) {
            int minNumberReads = Integer.parseInt(this.filteredGenesField.getText());
            int maxNumberReads = Integer.parseInt(this.filteredGenesField2.getText());
            this.analysisFilteredGenes = new AnalysisFilterGenes(this.trackViewer, minNumberReads, maxNumberReads);
            
            mappingAnalysisHandler.registerObserver(this.analysisFilteredGenes);
            mappingAnalysisHandler.setMappingsNeeded(true);
        }
        if (this.detectOperons) {
            int minNumberReads = Integer.parseInt(this.operonField.getText());
            this.analysisOperon = new AnalysisOperon(this.trackViewer, minNumberReads, this.operonDetectionAutomatic);
            
            mappingAnalysisHandler.registerObserver(this.analysisOperon);
            mappingAnalysisHandler.setMappingsNeeded(true);
        }
        
        covAnalysisHandler.startAnalysis();
        mappingAnalysisHandler.startAnalysis();
    }

    /**
     * Visualizes the data handed over to this method as defined by the implementation.
     * @param data the data object to visualize.
     */
    @Override
    public void showData(Object dataTypeObject) {

        if (dataTypeObject instanceof String) {
            
            String dataType = (String) dataTypeObject;

            //get track name(s)
            String trackName = "track";
            List<String> trackNames = this.trackViewer.getTrackCon().getAssociatedTrackNames();
            if (!(trackNames == null) && !trackNames.isEmpty()) {
                trackName = trackNames.get(0);
            }
            
            if (this.detectTranscriptionStarts && dataType.equals(AnalysesHandler.DATA_TYPE_COVERAGE)) {
                
                //TODO: bp window of neighboring TSS parameter
                
                ResultPanelTranscriptionStart transcriptionStartResultPanel = new ResultPanelTranscriptionStart();
                transcriptionStartResultPanel.setTrackViewer(this.trackViewer);
                transcriptionStartResultPanel.addTSSs(this.analysisTSS.getResults());
                System.out.println("Size: " + this.analysisTSS.getResults().size());
                
                this.resultTabs.addTab("Detected TSSs for " + trackName + 
                        " (" + transcriptionStartResultPanel.getResultSize() + " hits)", transcriptionStartResultPanel);
                this.resultTabs.setTabComponentAt(this.resultTabs.getTabCount() - 1, new TabWithCloseX(this.resultTabs));
                this.resultTabs.setSelectedIndex(this.resultTabs.getTabCount() - 1);
                
                //TODO: put this in some analysis information panel
                System.out.println("Minimal increase of read count: " + this.analysisTSS.getIncreaseReadCount());
                System.out.println("Minimal increase in %: " + this.analysisTSS.getIncreaseReadPercent());
                if (this.analysisTSS.getIncreaseReadCount2() > 0) {
                    System.out.println("Additional low coverage restrictions:");
                    System.out.println("Min. increase of read count: " + this.analysisTSS.getIncreaseReadCount2());
                    System.out.println("Max. initial read count: " + this.analysisTSS.getMaxInitialReadCount());
                }
            }
            if (this.filterGenes && dataType.equals(AnalysesHandler.DATA_TYPE_MAPPINGS)) {
                
                List<FilteredGene> filteredGenes = this.analysisFilteredGenes.getResults();

                ResultPanelFilteredGenes filteredGenesResultPanel = new ResultPanelFilteredGenes();
                filteredGenesResultPanel.setBoundsInfoManager(this.trackViewer.getBoundsInformationManager());
                filteredGenesResultPanel.addFilteredGenes(filteredGenes);

                this.resultTabs.addTab("Filtered genes for " + trackName + 
                        " (" + filteredGenesResultPanel.getResultSize() + " hits)", filteredGenesResultPanel);
                this.resultTabs.setTabComponentAt(this.resultTabs.getTabCount() - 1, new TabWithCloseX(this.resultTabs));
                this.resultTabs.setSelectedIndex(this.resultTabs.getTabCount() - 1);

                //TODO: prozentualer increase
                //annotation finden/ändern

            }
            if (this.detectOperons && dataType.equals(AnalysesHandler.DATA_TYPE_MAPPINGS)) {
                
                ResultPanelOperonDetection operonPanel = new ResultPanelOperonDetection();
                operonPanel.setBoundsInfoManager(this.trackViewer.getBoundsInformationManager());
                operonPanel.addDetectedOperons(this.analysisOperon.getResults());

                this.resultTabs.addTab("Detected operons for " + trackName + 
                        " (" + operonPanel.getResultSize() + " hits)", operonPanel);
                this.resultTabs.setTabComponentAt(this.resultTabs.getTabCount() - 1, new TabWithCloseX(this.resultTabs));
                this.resultTabs.setSelectedIndex(this.resultTabs.getTabCount() - 1);
            }
        }
        
        this.detectionButton.setEnabled(true);

    }
}
