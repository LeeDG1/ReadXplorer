package de.cebitec.vamp.transcriptionAnalyses.wizard;

import de.cebitec.vamp.api.objects.JobPanel;
import de.cebitec.vamp.util.GeneralUtils;

/**
 * Panel for showing all available options for the operon detection.
 * 
 * @author Rolf Hilker <rhilker at cebitec.uni-bielefeld.de>
 */
public final class TransAnalysesRPKMVisualPanel extends JobPanel {
   
    private static final long serialVersionUID = 1L;
    private int minNumberOfReads;
    private int maxNumberOfReads;

    /**
     * Panel for showing all available options for the operon detection.
     */
    public TransAnalysesRPKMVisualPanel() {
        initComponents();
        initAdditionalComponents();
    }

    @Override
    public String getName() {
        return "RPKM Calculation";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        minNumberOfReadsField = new javax.swing.JTextField();
        maxNumberOfReadsField = new javax.swing.JTextField();
        minNumberOfReadsLabel = new javax.swing.JLabel();
        maxNumberOfReadsLabel = new javax.swing.JLabel();

        jTextField1.setText(org.openide.util.NbBundle.getMessage(TransAnalysesRPKMVisualPanel.class, "TransAnalysesRPKMVisualPanel.jTextField1.text")); // NOI18N

        minNumberOfReadsField.setText(org.openide.util.NbBundle.getMessage(TransAnalysesRPKMVisualPanel.class, "TransAnalysesRPKMVisualPanel.minNumberOfReadsField.text")); // NOI18N

        maxNumberOfReadsField.setText(org.openide.util.NbBundle.getMessage(TransAnalysesRPKMVisualPanel.class, "TransAnalysesRPKMVisualPanel.maxNumberOfReadsField.text")); // NOI18N
        maxNumberOfReadsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxNumberOfReadsFieldActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(minNumberOfReadsLabel, org.openide.util.NbBundle.getMessage(TransAnalysesRPKMVisualPanel.class, "TransAnalysesRPKMVisualPanel.minNumberOfReadsLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(maxNumberOfReadsLabel, org.openide.util.NbBundle.getMessage(TransAnalysesRPKMVisualPanel.class, "TransAnalysesRPKMVisualPanel.maxNumberOfReadsLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(maxNumberOfReadsField, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(minNumberOfReadsField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maxNumberOfReadsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minNumberOfReadsLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minNumberOfReadsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minNumberOfReadsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxNumberOfReadsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxNumberOfReadsLabel))
                .addContainerGap(22, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void maxNumberOfReadsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxNumberOfReadsFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maxNumberOfReadsFieldActionPerformed

    private void initAdditionalComponents() {
        this.minNumberOfReads = Integer.parseInt(this.minNumberOfReadsField.getText());
        this.maxNumberOfReads = Integer.parseInt(this.maxNumberOfReadsField.getText());
        
        this.minNumberOfReadsField.getDocument().addDocumentListener(this.createDocumentListener());
        this.maxNumberOfReadsField.getDocument().addDocumentListener(this.createDocumentListener());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField maxNumberOfReadsField;
    private javax.swing.JLabel maxNumberOfReadsLabel;
    private javax.swing.JTextField minNumberOfReadsField;
    private javax.swing.JLabel minNumberOfReadsLabel;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Checks if all required information to start the transcription start
     * analysis is set.
     */
    @Override
    public boolean isRequiredInfoSet() {
        boolean isValidated = true;
        
        if (GeneralUtils.isValidNumberInput(minNumberOfReadsField.getText())) {
            this.minNumberOfReads = Integer.parseInt(minNumberOfReadsField.getText());
        } else {
            isValidated = false;
        }
        if (GeneralUtils.isValidPositiveNumberInput(maxNumberOfReadsField.getText())) {
            this.maxNumberOfReads = Integer.parseInt(maxNumberOfReadsField.getText());
        } else {
            isValidated = false;
        }

        firePropertyChange(TranscriptionAnalysesWizardIterator.PROP_RPKM_ANALYSIS, null, isValidated);
        return isValidated;
    }
    
    public int getMinNumberOfReads() {
        return minNumberOfReads;
    }

    public int getMaxNumberOfReads() {
        return maxNumberOfReads;
    }
}
