package de.cebitec.vamp.transcriptionAnalyses.wizard;

import de.cebitec.vamp.api.objects.JobPanel;
import de.cebitec.vamp.util.GeneralUtils;
import de.cebitec.vamp.view.dialogMenus.ChangeListeningWizardPanel;

/**
 * Panel for showing all available options for filtering genes with a certain
 * read count.
 *
 * @author Rolf Hilker <rhilker at cebitec.uni-bielefeld.de>
 */
public final class TransAnalysesFilterVisualPanel extends JobPanel {
    
    private static final long serialVersionUID = 1L;
    
    private int minNumberOfReads;
    private int maxNumberOfReads;

    /**
     * Panel for showing all available options for filtering genes with a
     * certain read count.
     */
    public TransAnalysesFilterVisualPanel() {
        initComponents();
        this.initAdditionalComponents();
    }

    @Override
    public String getName() {
        return "Filter Feature Parameters";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        minNumberReadsLabel = new javax.swing.JLabel();
        minNumberReadsField = new javax.swing.JTextField();
        maxNumberReadsField = new javax.swing.JTextField();
        maxNumberReadsLabel = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(minNumberReadsLabel, org.openide.util.NbBundle.getMessage(TransAnalysesFilterVisualPanel.class, "TransAnalysesFilterVisualPanel.minNumberReadsLabel.text")); // NOI18N

        minNumberReadsField.setText(org.openide.util.NbBundle.getMessage(TransAnalysesFilterVisualPanel.class, "TransAnalysesFilterVisualPanel.minNumberReadsField.text")); // NOI18N

        maxNumberReadsField.setText(org.openide.util.NbBundle.getMessage(TransAnalysesFilterVisualPanel.class, "TransAnalysesFilterVisualPanel.maxNumberReadsField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(maxNumberReadsLabel, org.openide.util.NbBundle.getMessage(TransAnalysesFilterVisualPanel.class, "TransAnalysesFilterVisualPanel.maxNumberReadsLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(minNumberReadsField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(minNumberReadsLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(maxNumberReadsField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxNumberReadsLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minNumberReadsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minNumberReadsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxNumberReadsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxNumberReadsLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField maxNumberReadsField;
    private javax.swing.JLabel maxNumberReadsLabel;
    private javax.swing.JTextField minNumberReadsField;
    private javax.swing.JLabel minNumberReadsLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Initializes all additional stuff and components of this panel needed at
     * startup.
     */
    private void initAdditionalComponents() {
        this.minNumberOfReads = Integer.parseInt(this.minNumberReadsField.getText());
        this.maxNumberOfReads = Integer.parseInt(this.maxNumberReadsField.getText());
        
        this.minNumberReadsField.getDocument().addDocumentListener(this.createDocumentListener());
        this.maxNumberReadsField.getDocument().addDocumentListener(this.createDocumentListener());
    }
    
    /**
     * Checks if all required information to start the transcription start
     * analysis is set.
     */
    @Override
    public boolean isRequiredInfoSet() {
        boolean isValidated = true;
        if (GeneralUtils.isValidNumberInput(minNumberReadsField.getText())) {
            this.minNumberOfReads = Integer.parseInt(minNumberReadsField.getText());
        } else {
            isValidated = false;
        }
        if (GeneralUtils.isValidPositiveNumberInput(maxNumberReadsField.getText())) {
            this.maxNumberOfReads = Integer.parseInt(maxNumberReadsField.getText());
        } else {
            isValidated = false;
        }

        firePropertyChange(ChangeListeningWizardPanel.PROP_VALIDATE, null, isValidated);
        return isValidated;
    }

    public int getMinNumberOfReads() {
        return minNumberOfReads;
    }

    public int getMaxNumberOfReads() {
        return maxNumberOfReads;
    }

}
