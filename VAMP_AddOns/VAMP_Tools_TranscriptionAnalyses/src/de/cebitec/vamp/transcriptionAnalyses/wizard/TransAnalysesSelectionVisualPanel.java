package de.cebitec.vamp.transcriptionAnalyses.wizard;

import de.cebitec.vamp.api.objects.JobPanel;
import de.cebitec.vamp.view.dialogMenus.ChangeListeningWizardPanel;

/**
 * Panel showing all different kinds of transcription analyses functions and
 * allowing for selection of these.
 * 
 * @author Rolf Hilker <rhilker at cebitec.uni-bielefeld.de>
 */
public final class TransAnalysesSelectionVisualPanel extends JobPanel {
    
    private static final long serialVersionUID = 1L;

    /**
     * Panel showing all different kinds of transcription analyses functions and
     * allowing for selection of these.
     */
    public TransAnalysesSelectionVisualPanel() {
        initComponents();
    }

    @Override
    public String getName() {
        return "Transcription Analyses Selection";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        transcriptionStartBox = new javax.swing.JCheckBox();
        filteredGenesBox = new javax.swing.JCheckBox();
        operonDetectionBox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tssTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        filterFeaturesTextArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        opeonTextArea = new javax.swing.JTextArea();

        org.openide.awt.Mnemonics.setLocalizedText(transcriptionStartBox, org.openide.util.NbBundle.getMessage(TransAnalysesSelectionVisualPanel.class, "TransAnalysesSelectionVisualPanel.transcriptionStartBox.text")); // NOI18N
        transcriptionStartBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transcriptionStartBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(filteredGenesBox, org.openide.util.NbBundle.getMessage(TransAnalysesSelectionVisualPanel.class, "TransAnalysesSelectionVisualPanel.filteredGenesBox.text")); // NOI18N
        filteredGenesBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filteredGenesBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(operonDetectionBox, org.openide.util.NbBundle.getMessage(TransAnalysesSelectionVisualPanel.class, "TransAnalysesSelectionVisualPanel.operonDetectionBox.text")); // NOI18N
        operonDetectionBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operonDetectionBoxActionPerformed(evt);
            }
        });

        tssTextArea.setEditable(false);
        tssTextArea.setBackground(new java.awt.Color(240, 240, 240));
        tssTextArea.setColumns(20);
        tssTextArea.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        tssTextArea.setLineWrap(true);
        tssTextArea.setRows(3);
        tssTextArea.setText(org.openide.util.NbBundle.getMessage(TransAnalysesSelectionVisualPanel.class, "TransAnalysesSelectionVisualPanel.tssTextArea.text")); // NOI18N
        tssTextArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(tssTextArea);

        filterFeaturesTextArea.setEditable(false);
        filterFeaturesTextArea.setBackground(new java.awt.Color(240, 240, 240));
        filterFeaturesTextArea.setColumns(20);
        filterFeaturesTextArea.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        filterFeaturesTextArea.setLineWrap(true);
        filterFeaturesTextArea.setRows(1);
        filterFeaturesTextArea.setText(org.openide.util.NbBundle.getMessage(TransAnalysesSelectionVisualPanel.class, "TransAnalysesSelectionVisualPanel.filterFeaturesTextArea.text")); // NOI18N
        filterFeaturesTextArea.setWrapStyleWord(true);
        jScrollPane2.setViewportView(filterFeaturesTextArea);

        opeonTextArea.setEditable(false);
        opeonTextArea.setBackground(new java.awt.Color(240, 240, 240));
        opeonTextArea.setColumns(20);
        opeonTextArea.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        opeonTextArea.setLineWrap(true);
        opeonTextArea.setRows(2);
        opeonTextArea.setText(org.openide.util.NbBundle.getMessage(TransAnalysesSelectionVisualPanel.class, "TransAnalysesSelectionVisualPanel.opeonTextArea.text")); // NOI18N
        opeonTextArea.setWrapStyleWord(true);
        jScrollPane3.setViewportView(opeonTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(transcriptionStartBox)
                    .addComponent(filteredGenesBox)
                    .addComponent(operonDetectionBox)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(transcriptionStartBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filteredGenesBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(operonDetectionBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void transcriptionStartBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transcriptionStartBoxActionPerformed
        firePropertyChange(ChangeListeningWizardPanel.PROP_VALIDATE, null, isRequiredInfoSet());
    }//GEN-LAST:event_transcriptionStartBoxActionPerformed

    private void filteredGenesBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filteredGenesBoxActionPerformed
        firePropertyChange(ChangeListeningWizardPanel.PROP_VALIDATE, null, isRequiredInfoSet());
    }//GEN-LAST:event_filteredGenesBoxActionPerformed

    private void operonDetectionBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operonDetectionBoxActionPerformed
        firePropertyChange(ChangeListeningWizardPanel.PROP_VALIDATE, null, isRequiredInfoSet());
    }//GEN-LAST:event_operonDetectionBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea filterFeaturesTextArea;
    private javax.swing.JCheckBox filteredGenesBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea opeonTextArea;
    private javax.swing.JCheckBox operonDetectionBox;
    private javax.swing.JCheckBox transcriptionStartBox;
    private javax.swing.JTextArea tssTextArea;
    // End of variables declaration//GEN-END:variables

    /**
     * @return true, if the transcription start analysis is selected, false otherwise
     */
    public boolean isTSSAnalysisSelected() {
        return this.transcriptionStartBox.isSelected();
    }
    
    /**
     * @return true, if the filter genes analysis is selected, false
     * otherwise
     */
    public boolean isFilterGenesAnalysisSelected() {
        return this.filteredGenesBox.isSelected();
    }
    
    /**
     * @return true, if the operon analysis is selected, false
     * otherwise
     */
    public boolean isOperonAnalysisSelected() {
        return this.operonDetectionBox.isSelected();
    }

    /**
     * @return true, if the panel contains valid information, false otherwise
     */
    @Override
    public boolean isRequiredInfoSet() {
        return this.transcriptionStartBox.isSelected()
                || this.filteredGenesBox.isSelected()
                || this.operonDetectionBox.isSelected();
    }
}
