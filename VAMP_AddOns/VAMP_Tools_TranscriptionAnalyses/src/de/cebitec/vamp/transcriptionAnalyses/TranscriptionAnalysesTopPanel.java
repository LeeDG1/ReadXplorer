/*
 * TranscriptionAnalysesTopPanel.java
 *
 * Created on 30.01.2012, 20:34:33
 */
package de.cebitec.vamp.transcriptionAnalyses;

import de.cebitec.vamp.util.TabWithCloseX;
import de.cebitec.vamp.view.dataVisualisation.TranscriptionAnalysesFrameI;
import de.cebitec.vamp.view.dataVisualisation.trackViewer.TrackViewer;
import java.awt.Component;
import java.awt.event.ContainerEvent;
import java.awt.event.ContainerListener;
import java.util.ArrayList;
import java.util.List;
import org.openide.util.NbBundle;

/**
 * @author -Rolf Hilker
 * 
 * Component for displaying all gui elements belonging to the transcription analyses.
 */
public class TranscriptionAnalysesTopPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;
    private List<TranscriptionAnalysesPanel> transcAnalysesPanelList;
    private TranscriptionAnalysesFrameI mainViewer;
    
    /** Creates new form TranscriptionAnalysesTopPanel */
    public TranscriptionAnalysesTopPanel() {
        this.initComponents();
        this.setName(NbBundle.getMessage(TranscriptionAnalysesTopPanel.class, "CTL_TranscriptionAnalysesTopComponent"));
        this.setToolTipText(NbBundle.getMessage(TranscriptionAnalysesTopPanel.class, "HINT_TranscriptionAnalysesTopComponent"));
        this.transcAnalysesPanelList = new ArrayList<TranscriptionAnalysesPanel>();
        
        // add listener to close TopComponent when no tabs are shown
        this.analysesTabbedPane.addContainerListener(new ContainerListener() {

            @Override
            public void componentAdded(ContainerEvent e) {
            }

            @Override
            public void componentRemoved(ContainerEvent e) {
                if (analysesTabbedPane.getTabCount() == 0) {
                    mainViewer.closeTranscriptionAnalysesTopPanel(TranscriptionAnalysesTopPanel.this);
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        analysesTabbedPane = new javax.swing.JTabbedPane();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(analysesTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(analysesTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane analysesTabbedPane;
    // End of variables declaration//GEN-END:variables
    /**
     * This method needs to be called in order to open a new tab for transcription analyses.
     * @param trackViewer the track viewer for which the transcription analyses should be carried out.
     */
    public void openAnalysisTab(TrackViewer trackViewer) {
        this.analysesTabbedPane.addTab("Transcription Analyses for Track", this.getTranscriptAnalysesPanel(trackViewer));
        this.analysesTabbedPane.setTabComponentAt(this.analysesTabbedPane.getTabCount() - 1, new TabWithCloseX(this.analysesTabbedPane));
        this.analysesTabbedPane.setSelectedIndex(this.analysesTabbedPane.getTabCount() - 1);
    }

    /**
     * Creates a complete transcription analyses panel, that is used in the JTabbedPane.
     * The <code>TrackViewer</code> instance is used to set up the menu and
     * result panels.
     *
     * @param trackViewer the track viewer for which the transcription analyses should be carried out.
     * @return complete snp detection panel
     */
    private Component getTranscriptAnalysesPanel(TrackViewer trackViewer) {
        TranscriptionAnalysesPanel transAnalysesPanel = new TranscriptionAnalysesPanel(trackViewer);
        this.transcAnalysesPanelList.add(transAnalysesPanel);
        return transAnalysesPanel;
    }

    void setParent(TranscriptionAnalysesFrameI mainViewer) {
        this.mainViewer = mainViewer;
    }

}
