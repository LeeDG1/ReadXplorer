/*
 * ResultPanelCoveredAnnos.java
 *
 * Created on 27.01.2012, 14:31:15
 */
package de.cebitec.vamp.genomeAnalyses;

import de.cebitec.vamp.databackend.dataObjects.PersistantAnnotation;
import de.cebitec.vamp.exporter.excel.ExcelExportFileChooser;
import de.cebitec.vamp.view.dataVisualisation.BoundsInfoManager;
import javax.swing.DefaultListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 * Panel showing a result of an analysis filtering for annotations with a 
 * min and max certain readcount.
 * 
 * @author -Rolf Hilker-
 */
public class ResultPanelCoveredAnnos extends javax.swing.JPanel {
    
    private static final long serialVersionUID = 1L;

    private BoundsInfoManager bim;
    private CoveredAnnotationResult coveredAnnosResult;
    
    /**
     * Panel showing a result of an analysis filtering for annotations with a
     * min and max certain readcount.
     * @param coveredAnnosParameters parameter set used for this annotation filtering
     */
    public ResultPanelCoveredAnnos() {
        initComponents();
        
        DefaultListSelectionModel model = (DefaultListSelectionModel) this.coveredAnnosTable.getSelectionModel();
        model.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                showCoveredAnnoPosition();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        coveredAnnosPane = new javax.swing.JScrollPane();
        coveredAnnosTable = new javax.swing.JTable();
        exportButton = new javax.swing.JButton();
        parametersLabel = new javax.swing.JLabel();
        statisticsButton = new javax.swing.JButton();

        coveredAnnosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Annotation", "Strand", "Start", "Stop", "Length", "Covered Percent", "Covered Bases"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        coveredAnnosPane.setViewportView(coveredAnnosTable);
        coveredAnnosTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelCoveredAnnos.class, "ResultPanelCoveredAnnos.coveredAnnosTable.columnModel.title0")); // NOI18N
        coveredAnnosTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelCoveredAnnos.class, "ResultPanelCoveredAnnos.coveredAnnosTable.columnModel.title3")); // NOI18N
        coveredAnnosTable.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelCoveredAnnos.class, "ResultPanelCoveredAnnos.coveredAnnosTable.columnModel.title1")); // NOI18N
        coveredAnnosTable.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelCoveredAnnos.class, "ResultPanelCoveredAnnos.coveredAnnosTable.columnModel.title2")); // NOI18N
        coveredAnnosTable.getColumnModel().getColumn(4).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelCoveredAnnos.class, "ResultPanelCoveredAnnos.coveredAnnosTable.columnModel.title6")); // NOI18N
        coveredAnnosTable.getColumnModel().getColumn(5).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelCoveredAnnos.class, "ResultPanelCoveredAnnos.coveredAnnosTable.columnModel.title4")); // NOI18N
        coveredAnnosTable.getColumnModel().getColumn(6).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelCoveredAnnos.class, "ResultPanelCoveredAnnos.coveredAnnosTable.columnModel.title5")); // NOI18N

        exportButton.setText(org.openide.util.NbBundle.getMessage(ResultPanelCoveredAnnos.class, "ResultPanelCoveredAnnos.exportButton.text")); // NOI18N
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        parametersLabel.setText(org.openide.util.NbBundle.getMessage(ResultPanelCoveredAnnos.class, "ResultPanelCoveredAnnos.parametersLabel.text")); // NOI18N

        statisticsButton.setText(org.openide.util.NbBundle.getMessage(ResultPanelCoveredAnnos.class, "ResultPanelCoveredAnnos.statisticsButton.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(parametersLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statisticsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportButton))
            .addComponent(coveredAnnosPane, javax.swing.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(coveredAnnosPane, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportButton)
                    .addComponent(statisticsButton)
                    .addComponent(parametersLabel)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        CoveredAnnosColumns coveredAnnosData = new CoveredAnnosColumns(this.coveredAnnosResult);
        ExcelExportFileChooser fileChooser = new ExcelExportFileChooser(new String[]{"xls"}, "xls", coveredAnnosData); 
    }//GEN-LAST:event_exportButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane coveredAnnosPane;
    private javax.swing.JTable coveredAnnosTable;
    private javax.swing.JButton exportButton;
    private javax.swing.JLabel parametersLabel;
    private javax.swing.JButton statisticsButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Updates the navigator bar of all viewers to the start position of the selected annotation.
     */
    private void showCoveredAnnoPosition() {
        DefaultListSelectionModel model = (DefaultListSelectionModel) this.coveredAnnosTable.getSelectionModel();
        int selectedView = model.getLeadSelectionIndex();
        int selectedModel = this.coveredAnnosTable.convertRowIndexToModel(selectedView);
        PersistantAnnotation annotation = (PersistantAnnotation) this.coveredAnnosTable.getModel().getValueAt(selectedModel, 0);
        int pos = annotation.isFwdStrand() ? annotation.getStart() : annotation.getStop();

        bim.navigatorBarUpdated(pos);
    }

    public void setBoundsInfoManager(BoundsInfoManager boundsInformationManager) {
        this.bim = boundsInformationManager;
    }

    /**
     * Adds a list of filtered annotations to this panel.
     * @param coveredAnnosResult 
     */
    public void addCoveredAnnos(CoveredAnnotationResult coveredAnnosResult) {
        final int nbColumns = 7;
        if (this.coveredAnnosResult == null) {
            this.coveredAnnosResult = coveredAnnosResult;
        } else {
            this.coveredAnnosResult.getResults().addAll(coveredAnnosResult.getResults());
        }
        DefaultTableModel model = (DefaultTableModel) this.coveredAnnosTable.getModel();        

        PersistantAnnotation anno;
        for (CoveredAnnotation coveredAnno : this.coveredAnnosResult.getResults()) {
            
            Object[] rowData = new Object[nbColumns];
            anno = coveredAnno.getCoveredAnnotation();
            rowData[0] = anno;
            rowData[1] = anno.isFwdStrand() ? "Fwd" : "Rev";
            rowData[2] = anno.getStart();
            rowData[3] = anno.getStop();
            rowData[4] = anno.getStop() - anno.getStart();
            rowData[5] = coveredAnno.getPercentCovered();
            rowData[6] = coveredAnno.getNoCoveredBases();

            model.addRow(rowData);
        }

        TableRowSorter<TableModel> sorter = new TableRowSorter<>();
        this.coveredAnnosTable.setRowSorter(sorter);
        sorter.setModel(model);
        
        this.parametersLabel.setText(org.openide.util.NbBundle.getMessage(ResultPanelCoveredAnnos.class,
                "ResultPanelCoveredAnnos.parametersLabel.text", coveredAnnosResult.getParameters().getMinCoveredPercent(), 
                coveredAnnosResult.getParameters().getMinCoverageCount()));
    }
    
    /**
     * @return the number of annotations filtered during the associated analysis
     */
    public int getResultSize() {
        return this.coveredAnnosResult.getResults().size();
    }
}
