package de.cebitec.vamp.tools.externalViewer;

import de.cebitec.vamp.controller.ViewController;
import de.cebitec.vamp.databackend.connector.TrackConnector;
import de.cebitec.vamp.view.dataVisualisation.basePanel.BasePanel;
import de.cebitec.vamp.view.dataVisualisation.basePanel.BasePanelFactory;
import de.cebitec.vamp.view.dataVisualisation.histogramViewer.HistogramViewer;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.util.logging.Logger;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.Utilities;

/**
 * @author ddopmmeier, rhilker
 * 
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//de.cebitec.vamp.tools.externalViewer//ExternalViewer//EN", autostore = false)
public final class ExternalViewerTopComponent extends TopComponent {

    private static ExternalViewerTopComponent instance;
    private static final long serialVersionUID = 1L;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "de/cebitec/vamp/tools/externalViewer/externalViewer.png";
    private static final String PREFERRED_ID = "ExternalViewerTopComponent";

    private TrackConnector trackConnector;
    private BasePanel alignmentBasePanel;
    private BasePanel histogramBasePanel;
    private BasePanel seqPairBasePanel;
    private CardLayout cards;

    private static String HISTOGRAMCARD = "histo";
    private static String ALIGNMENTCARD = "alignment";
    private static String SEQPAIRCARD = "sequencePair";
    
    private String selectedViewer;

    public ExternalViewerTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ExternalViewerTopComponent.class, "CTL_ExternalViewerTopComponent"));
        setToolTipText(NbBundle.getMessage(ExternalViewerTopComponent.class, "HINT_ExternalViewerTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        switchPanel = new javax.swing.JPanel();
        histogramButton = new javax.swing.JButton();
        alignmentButton = new javax.swing.JButton();
        colorHistogramBox = new javax.swing.JCheckBox();
        sequencePairButton = new javax.swing.JButton();
        viewerPanel = new javax.swing.JPanel();
        cardPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(histogramButton, org.openide.util.NbBundle.getMessage(ExternalViewerTopComponent.class, "ExternalViewerTopComponent.histogramButton.text")); // NOI18N
        histogramButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                histogramButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(alignmentButton, org.openide.util.NbBundle.getMessage(ExternalViewerTopComponent.class, "ExternalViewerTopComponent.alignmentButton.text")); // NOI18N
        alignmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alignmentButtonActionPerformed(evt);
            }
        });

        colorHistogramBox.setFont(new java.awt.Font("Dialog", 1, 10));
        org.openide.awt.Mnemonics.setLocalizedText(colorHistogramBox, org.openide.util.NbBundle.getMessage(ExternalViewerTopComponent.class, "ExternalViewerTopComponent.colorHistogramBox.text")); // NOI18N
        colorHistogramBox.setMinimumSize(new java.awt.Dimension(50, 22));
        colorHistogramBox.setPreferredSize(new java.awt.Dimension(100, 22));
        colorHistogramBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorHistogramBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(sequencePairButton, org.openide.util.NbBundle.getMessage(ExternalViewerTopComponent.class, "ExternalViewerTopComponent.sequencePairButton.text")); // NOI18N
        sequencePairButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sequencePairButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout switchPanelLayout = new javax.swing.GroupLayout(switchPanel);
        switchPanel.setLayout(switchPanelLayout);
        switchPanelLayout.setHorizontalGroup(
            switchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(switchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(switchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(histogramButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(alignmentButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sequencePairButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(54, Short.MAX_VALUE))
            .addGroup(switchPanelLayout.createSequentialGroup()
                .addComponent(colorHistogramBox, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                .addGap(46, 46, 46))
        );
        switchPanelLayout.setVerticalGroup(
            switchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(switchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(histogramButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(alignmentButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sequencePairButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(colorHistogramBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(171, Short.MAX_VALUE))
        );

        add(switchPanel, java.awt.BorderLayout.WEST);

        viewerPanel.setPreferredSize(new java.awt.Dimension(490, 400));
        viewerPanel.setLayout(new java.awt.BorderLayout());

        cardPanel.setPreferredSize(new java.awt.Dimension(470, 400));
        cardPanel.setLayout(new java.awt.CardLayout());
        viewerPanel.add(cardPanel, java.awt.BorderLayout.CENTER);

        add(viewerPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void histogramButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_histogramButtonActionPerformed
        this.selectedViewer = HISTOGRAMCARD;
        this.changeViewerStatus(this.selectedViewer, true);
        this.changeViewerStatus(ALIGNMENTCARD, false);
        this.changeViewerStatus(SEQPAIRCARD, false);
        cards.show(cardPanel, HISTOGRAMCARD);
}//GEN-LAST:event_histogramButtonActionPerformed

    private void alignmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alignmentButtonActionPerformed
        this.selectedViewer = ALIGNMENTCARD;
        this.changeViewerStatus(HISTOGRAMCARD, false);
        this.changeViewerStatus(this.selectedViewer, true);
        this.changeViewerStatus(SEQPAIRCARD, false);
        //alignmentBasePanel.getViewer().setActive(true); //to ensure size calculation is performed correctly
        cards.show(cardPanel, ALIGNMENTCARD);
}//GEN-LAST:event_alignmentButtonActionPerformed

    private void colorHistogramBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorHistogramBoxActionPerformed
        HistogramViewer vi = (HistogramViewer) histogramBasePanel.getViewer();
        vi.isColored(colorHistogramBox.isSelected());
        vi.boundsChangedHook();
        vi.repaint();
}//GEN-LAST:event_colorHistogramBoxActionPerformed

private void sequencePairButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sequencePairButtonActionPerformed
        this.selectedViewer = SEQPAIRCARD;
        this.changeViewerStatus(HISTOGRAMCARD, false);
        this.changeViewerStatus(ALIGNMENTCARD, false);
        this.changeViewerStatus(this.selectedViewer, true);
        this.cards.show(cardPanel, SEQPAIRCARD);
}//GEN-LAST:event_sequencePairButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton alignmentButton;
    private javax.swing.JPanel cardPanel;
    private javax.swing.JCheckBox colorHistogramBox;
    private javax.swing.JButton histogramButton;
    private javax.swing.JButton sequencePairButton;
    private javax.swing.JPanel switchPanel;
    private javax.swing.JPanel viewerPanel;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized ExternalViewerTopComponent getDefault() {
        if (instance == null) {
            instance = new ExternalViewerTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the ExternalViewerTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ExternalViewerTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(ExternalViewerTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ExternalViewerTopComponent) {
            return (ExternalViewerTopComponent) win;
        }
        Logger.getLogger(ExternalViewerTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }

    @Override
    public void componentOpened() {
        ViewController viewCon = Utilities.actionsGlobalContext().lookup(ViewController.class);
        BasePanelFactory factory = viewCon.getBasePanelFac();

        if (this.trackConnector.getSeqPairToTrackID() > 0) {
            this.seqPairBasePanel = factory.getSeqPairBasePanel(this.trackConnector);
            this.changeViewerStatus(SEQPAIRCARD, false);
            this.cardPanel.add(this.seqPairBasePanel, SEQPAIRCARD);
        } else {
            this.sequencePairButton.setEnabled(false);
        }

        this.histogramBasePanel = factory.getHistogrammViewerBasePanel(this.trackConnector);
        this.changeViewerStatus(HISTOGRAMCARD, true);
        this.selectedViewer = HISTOGRAMCARD;
        this.alignmentBasePanel = factory.getAlignmentViewBasePanel(this.trackConnector);
        this.alignmentBasePanel.setPreferredSize(new Dimension(490,400));
        this.changeViewerStatus(ALIGNMENTCARD, false);
        this.cards = (CardLayout) this.cardPanel.getLayout();
        
        this.cardPanel.add(this.alignmentBasePanel, ALIGNMENTCARD);
        this.cardPanel.add(this.histogramBasePanel, HISTOGRAMCARD);
        this.cards.show(this.cardPanel, HISTOGRAMCARD);
        this.histogramButton.setEnabled(false);
        
    }

    @Override
    public void componentClosed() {
        this.alignmentBasePanel.close();
        this.histogramBasePanel.close();
        this.alignmentBasePanel = null;
        this.histogramBasePanel = null;
        if (this.seqPairBasePanel != null){
            this.seqPairBasePanel.close();
            this.seqPairBasePanel = null;
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    public void setTrackConnector(TrackConnector trackConnector){
        this.trackConnector = trackConnector;
    }
    
    
    /*
     * Overriding these two methods ensures that only displayed components are updated
     * and thus increases performance of the viewers.
     */
    @Override
    public void componentShowing(){
        changeViewerStatus(getActiveViewer(), true);
    }
    
    @Override
    public void componentHidden(){
        changeViewerStatus(getActiveViewer(), false);
    }
    
    /**
     * @return the property representing the currently active viewer
     */
    public String getActiveViewer(){
        return this.selectedViewer;
    }  
    

    /**
     * Update the viewer status of the selectedViewer
     * @param selectedViewer the viewer whose status is to be changed
     * @param activated true, if the viewer should be activated, false, if not
     */
    public void changeViewerStatus(String selectedViewer, boolean activated) {
        if (selectedViewer.equals(HISTOGRAMCARD)) {
            this.histogramBasePanel.getViewer().setActive(activated);
             this.histogramButton.setEnabled(!activated);
        }
        if (selectedViewer.equals(ALIGNMENTCARD)) {
            this.alignmentBasePanel.getViewer().setActive(activated);
             this.alignmentButton.setEnabled(!activated);
        }
        if (this.seqPairBasePanel != null && selectedViewer.equals(SEQPAIRCARD)) {
            this.seqPairBasePanel.getViewer().setActive(activated);
        }
    }
}
