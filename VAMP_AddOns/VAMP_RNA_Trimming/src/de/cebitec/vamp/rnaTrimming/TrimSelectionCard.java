/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cebitec.vamp.rnaTrimming;

import de.cebitec.vamp.rnaTrimming.TrimMethod;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.openide.util.NbBundle;

/**
 *
 * @author jeff
 */
public class TrimSelectionCard extends javax.swing.JPanel {
    private File sourceFile;
    private File referenceFile;

    /** 
     * Creates new form TrimSelectionCard
     */
    public TrimSelectionCard() {
        initComponents();
        this.sourceFileField.getDocument().addDocumentListener(
        new DocumentListener() {
            private String lastContent = "";
            @Override
            public void insertUpdate(DocumentEvent e) {
                update(e);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                update(e);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                update(e);
            }
            
            private void update(DocumentEvent e) {
                firePropertyChange(RNATrimAction.PROP_SOURCEPATH, lastContent, sourceFileField.getText());
                lastContent = sourceFileField.getText();
            }
            
        });
        
    }
    
    private File showFileOpenDialogAndChangePrefs(String prefName, FileNameExtensionFilter fileNameExtensionFilter,
            JTextField textField) {
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(fileNameExtensionFilter);
        Preferences prefs2 = Preferences.userNodeForPackage(TrimSelectionCard.class);
        String path = prefs2.get(prefName, null);
        if(path!=null){
            fc.setCurrentDirectory(new File(path));
        }
        int result = fc.showOpenDialog(this);

        if (result == 0) {
            // file chosen
            File file = fc.getSelectedFile();

            if (file.canRead()) {
                Preferences prefs = Preferences.userNodeForPackage(TrimSelectionCard.class);
                prefs.put(prefName, file.getAbsolutePath());
                textField.setText(file.getAbsolutePath());
                try {
                    prefs.flush();
                } catch (BackingStoreException ex) {
                    Logger.getLogger(TrimSelectionCard.class.getName()).log(Level.SEVERE, null, ex);
                }
                return file;
            } else {
                Logger.getLogger(TrimSelectionCard.class.getName()).log(Level.WARNING, "Could not read file");
            }
        }
        return null;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sourceFileLabel = new javax.swing.JLabel();
        sourceFileField = new javax.swing.JTextField();
        openSourceButton = new javax.swing.JButton();
        trimMaximumLabel = new javax.swing.JLabel();
        trimMaximumSlider = new javax.swing.JSlider();
        trimMethodLabel = new javax.swing.JLabel();
        trimMethodCombo = new javax.swing.JComboBox();
        sourceFileLabel1 = new javax.swing.JLabel();
        referenceFileField = new javax.swing.JTextField();
        openReferenceButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(sourceFileLabel, org.openide.util.NbBundle.getMessage(TrimSelectionCard.class, "TrimSelectionCard.sourceFileLabel.text")); // NOI18N

        sourceFileField.setText(org.openide.util.NbBundle.getMessage(TrimSelectionCard.class, "TrimSelectionCard.sourceFileField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(openSourceButton, org.openide.util.NbBundle.getMessage(TrimSelectionCard.class, "TrimSelectionCard.openSourceButton.text")); // NOI18N
        openSourceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSourceButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(trimMaximumLabel, org.openide.util.NbBundle.getMessage(TrimSelectionCard.class, "TrimSelectionCard.trimMaximumLabel.text")); // NOI18N

        trimMaximumSlider.setMajorTickSpacing(10);
        trimMaximumSlider.setMaximum(35);
        trimMaximumSlider.setMinorTickSpacing(1);
        trimMaximumSlider.setPaintLabels(true);
        trimMaximumSlider.setPaintTicks(true);
        trimMaximumSlider.setSnapToTicks(true);
        trimMaximumSlider.setValue(5);

        org.openide.awt.Mnemonics.setLocalizedText(trimMethodLabel, org.openide.util.NbBundle.getMessage(TrimSelectionCard.class, "TrimSelectionCard.trimMethodLabel.text")); // NOI18N

        trimMethodCombo.setModel( new javax.swing.DefaultComboBoxModel(new TrimMethod[] {
            RegularExpressionTrimMethod.createNewInstance(RegularExpressionTrimMethod.Type.VARIABLE_RIGHT),
            RegularExpressionTrimMethod.createNewInstance(RegularExpressionTrimMethod.Type.VARIABLE_LEFT),
            RegularExpressionTrimMethod.createNewInstance(RegularExpressionTrimMethod.Type.VARIABLE_BOTH),
            RegularExpressionTrimMethod.createNewInstance(RegularExpressionTrimMethod.Type.FIXED_RIGHT),
            RegularExpressionTrimMethod.createNewInstance(RegularExpressionTrimMethod.Type.FIXED_LEFT),
            RegularExpressionTrimMethod.createNewInstance(RegularExpressionTrimMethod.Type.FIXED_BOTH)
        }));
        trimMethodCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trimMethodComboActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(sourceFileLabel1, org.openide.util.NbBundle.getMessage(TrimSelectionCard.class, "TrimSelectionCard.sourceFileLabel1.text")); // NOI18N

        referenceFileField.setText(org.openide.util.NbBundle.getMessage(TrimSelectionCard.class, "TrimSelectionCard.referenceFileField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(openReferenceButton, org.openide.util.NbBundle.getMessage(TrimSelectionCard.class, "TrimSelectionCard.openReferenceButton.text")); // NOI18N
        openReferenceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openReferenceButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(trimMaximumSlider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(trimMaximumLabel)
                            .add(trimMethodLabel)
                            .add(trimMethodCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(sourceFileLabel1))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(referenceFileField)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(openReferenceButton))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(sourceFileLabel)
                                .add(0, 269, Short.MAX_VALUE))
                            .add(layout.createSequentialGroup()
                                .add(sourceFileField)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(openSourceButton)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(sourceFileLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(referenceFileField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(openReferenceButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(sourceFileLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(sourceFileField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(openSourceButton))
                .add(11, 11, 11)
                .add(trimMaximumLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(trimMaximumSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(trimMethodLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(trimMethodCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(111, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void openSourceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openSourceButtonActionPerformed
        File file = this.showFileOpenDialogAndChangePrefs("TrimSelection.Filepath",
                new FileNameExtensionFilter("SAM Sequence Mapping File", "sam"),
                sourceFileField);
        if (file!=null) {
            sourceFile = file;
        }
    }//GEN-LAST:event_openSourceButtonActionPerformed
    
    public String getSourcePath() {
        return this.sourceFileField.getText();
    }
    
    public String getReferencePath() {
        return this.referenceFileField.getText();
    }
    
    public int getTrimMaximum() {
        return this.trimMaximumSlider.getValue();
    }
    
    public TrimMethod getTrimMethod() {
        return (TrimMethod) this.trimMethodCombo.getSelectedItem();
    }
    
    private void trimMethodComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trimMethodComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trimMethodComboActionPerformed

    private void openReferenceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openReferenceButtonActionPerformed
        File file = this.showFileOpenDialogAndChangePrefs("TrimSelection.Referencepath",
                new FileNameExtensionFilter("Fasta File", "fasta"), 
                referenceFileField);
        if (file!=null) {
            referenceFile = file;
        }
    }//GEN-LAST:event_openReferenceButtonActionPerformed
    
    @Override
    public String getName() {
        return NbBundle.getMessage(OverviewCard.class, "CTL_SelectionCard.name");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton openReferenceButton;
    private javax.swing.JButton openSourceButton;
    private javax.swing.JTextField referenceFileField;
    private javax.swing.JTextField sourceFileField;
    private javax.swing.JLabel sourceFileLabel;
    private javax.swing.JLabel sourceFileLabel1;
    private javax.swing.JLabel trimMaximumLabel;
    private javax.swing.JSlider trimMaximumSlider;
    private javax.swing.JComboBox trimMethodCombo;
    private javax.swing.JLabel trimMethodLabel;
    // End of variables declaration//GEN-END:variables
}
