package de.cebitec.readXplorer.coverageAnalysis;

import de.cebitec.vamp.util.TabWithCloseX;
import java.awt.event.ContainerEvent;
import java.awt.event.ContainerListener;
import javax.swing.JPanel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * TopComponent of the coverage analysis. It displays all results of all carried 
 * out coverage analyses.
 *
 * @author Tobias Zimmermann, Rolf Hilker <rhilker at mikrobio.med.uni-giessen.de>
 */
@ConvertAsProperties(
        dtd = "-//CoverageAnalysis//CoverageAnalysisTopComponent//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "CoverageAnalysisTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "CoverageAnalysis.CoverageAnalysisTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_CoverageAnalysisTopComponent",
        preferredID = "CoverageAnalysisTopComponent")
@Messages({
    "CTL_CoverageAnalysisTopComponent=Coverage Analysis Window",
    "HINT_CoverageAnalysisTopComponent=This is a Coverage Analysis Result window"
})
public final class CoverageAnalysisTopComponent extends TopComponent {

    public static final String PREFERRED_ID = "CoverageAnalysisTopComponent";
    private static final long serialVersionUID = 1L;

    /**
     * TopComponent of the coverage analysis. It displays all results of
     * all carried out coverage analyses.
     */
    public CoverageAnalysisTopComponent() {
        initComponents();
        setName(Bundle.CTL_CoverageAnalysisTopComponent());
        setToolTipText(Bundle.HINT_CoverageAnalysisTopComponent());
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);
        
        // add listener to close TopComponent when no tabs are shown
        this.coverageAnalysisTabbedPanel.addContainerListener(new ContainerListener() {
            @Override
            public void componentAdded(ContainerEvent e) {
            }

            @Override
            public void componentRemoved(ContainerEvent e) {
                if (coverageAnalysisTabbedPanel.getTabCount() == 0) {
                    WindowManager.getDefault().findTopComponent(PREFERRED_ID).close();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        coverageAnalysisTabbedPanel = new javax.swing.JTabbedPane();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(coverageAnalysisTabbedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(coverageAnalysisTabbedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane coverageAnalysisTabbedPanel;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

     /**
     * This method needs to be called in order to open a new tab for a
     * covered feature detection. Make sure to call {@link setAnalysisContext()}
     * first in order to display the correct context for the analysis result.
     * @param panelName title of the new tab to create
     * @param resultPanel the panel to place in the new tab
     */
    public void openAnalysisTab(String panelName, JPanel resultPanel) {
        this.coverageAnalysisTabbedPanel.add(panelName, resultPanel);
        this.coverageAnalysisTabbedPanel.setTabComponentAt(this.coverageAnalysisTabbedPanel.getTabCount()
                - 1, new TabWithCloseX(this.coverageAnalysisTabbedPanel));
        this.coverageAnalysisTabbedPanel.setSelectedIndex(this.coverageAnalysisTabbedPanel.getTabCount() 
                - 1);
    }    
    
     /**
     * @return true, if this component already contains other components, false otherwise.
     */
    public boolean hasComponents() {
        return this.coverageAnalysisTabbedPanel.getComponentCount() > 0;
    }
}
