/*
 * PositionTableJobView.java
 *
 * Created on 07.12.2011, 11:09:52
 */
package de.cebitec.vamp.ui.importer;

import de.cebitec.vamp.parser.TrackJob;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 * @author rhilker
 * 
 * The position table view holds all data for track for which the missing position table
 * should be imported.
 */
public class PositionTableJobView extends javax.swing.JPanel implements ListSelectionListener {

    private List<TrackJob> positionTableTracks;
    private boolean hasJobs;

    /** Creates new form PositionTableJobView */
    public PositionTableJobView() {
        positionTableTracks = new ArrayList<TrackJob>();
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File", "Track", "Reference"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(PositionTableJobView.class, "PositionTableJobView.jTable1.columnModel.title0_1")); // NOI18N
        jTable1.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(PositionTableJobView.class, "PositionTableJobView.jTable1.columnModel.title1")); // NOI18N
        jTable1.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(PositionTableJobView.class, "PositionTableJobView.jTable1.columnModel.title2")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    public TrackJob getSelectedItem() {
        return positionTableTracks.get(jTable1.getSelectedRow());
    }

    public void add(TrackJob positionTableJob) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.addRow(new Object[]{
                    positionTableJob.getFile().getName(),
                    positionTableJob.getID(),
                    positionTableJob.getRefGen().getDescription()});
        positionTableTracks.add(positionTableJob);

        if (!hasJobs) {
            hasJobs = true;
            firePropertyChange(ImportSetupCard.PROP_HAS_JOBS, null, hasJobs);
        }
    }

    public void remove(TrackJob positionTableJob) {
        int index = positionTableTracks.indexOf(positionTableJob);
        positionTableTracks.remove(positionTableJob);

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.removeRow(index);

        if (positionTableTracks.isEmpty()) {
            hasJobs = false;
            firePropertyChange(ImportSetupCard.PROP_HAS_JOBS, null, hasJobs);
        }
    }

    public List<TrackJob> getJobs() {
        return positionTableTracks;
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        ListSelectionModel model = (ListSelectionModel) e.getSource();
        if (model.isSelectionEmpty()) {
            firePropertyChange(ImportSetupCard.PROP_JOB_SELECTED, null, Boolean.FALSE);
        } else {
            firePropertyChange(ImportSetupCard.PROP_JOB_SELECTED, null, Boolean.TRUE);
        }
    }

    public boolean IsRowSelected() {
        ListSelectionModel model = jTable1.getSelectionModel();
        return !model.isSelectionEmpty();
    }
}
