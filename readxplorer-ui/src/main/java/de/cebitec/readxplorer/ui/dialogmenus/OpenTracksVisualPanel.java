/*
 * Copyright (C) 2014 Institute for Bioinformatics and Systems Biology, University Giessen, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.cebitec.readxplorer.ui.dialogmenus;


import de.cebitec.readxplorer.api.objects.JobPanel;
import de.cebitec.readxplorer.databackend.connector.ProjectConnector;
import de.cebitec.readxplorer.databackend.connector.ReferenceConnector;
import de.cebitec.readxplorer.databackend.dataobjects.PersistentTrack;
import de.cebitec.readxplorer.ui.dialogmenus.explorer.CustomOutlineCellRenderer;
import de.cebitec.readxplorer.ui.dialogmenus.explorer.StandardItem;
import de.cebitec.readxplorer.ui.dialogmenus.explorer.StandardNode;
import java.awt.BorderLayout;
import java.beans.IntrospectionException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.OutlineView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;


/**
 * A panel for the selection of tracks for a given reference.
 *
 * @author Rolf Hilker <rolf.hilker at mikrobio.med.uni-giessen.de>
 */
public class OpenTracksVisualPanel extends JobPanel implements
        ExplorerManager.Provider {

    private static final long serialVersionUID = 1L;

    private final ExplorerManager explorerManager;
    private final OutlineView outlineView;
    private final ReferenceConnector refGenConnector;
    private final List<PersistentTrack> selectedTracks;


    /**
     * Creates a new panel for the selection of tracks for a given reference.
     * <p>
     * @param referenceID id of the reference genome
     */
    public OpenTracksVisualPanel( int referenceID ) {
        this.selectedTracks = new ArrayList<>();
        this.refGenConnector = ProjectConnector.getInstance().getRefGenomeConnector( referenceID );
        this.explorerManager = new ExplorerManager();
        //Create the outline view showing the explorer
        this.outlineView = new OutlineView();
        this.initComponents();
        this.initAdditionalComponents();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        trackListPanel = new javax.swing.JPanel();
        combineTracksBox = new javax.swing.JCheckBox();
        buttonSelectAll = new javax.swing.JButton();
        buttonDeselectAll = new javax.swing.JButton();

        javax.swing.GroupLayout trackListPanelLayout = new javax.swing.GroupLayout(trackListPanel);
        trackListPanel.setLayout(trackListPanelLayout);
        trackListPanelLayout.setHorizontalGroup(
            trackListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        trackListPanelLayout.setVerticalGroup(
            trackListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 176, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(combineTracksBox, org.openide.util.NbBundle.getMessage(OpenTracksVisualPanel.class, "OpenTracksVisualPanel.combineTracksBox.text")); // NOI18N
        combineTracksBox.setToolTipText(org.openide.util.NbBundle.getMessage(OpenTracksVisualPanel.class, "OpenTracksVisualPanel.combineTracksBox.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(buttonSelectAll, org.openide.util.NbBundle.getMessage(OpenTracksVisualPanel.class, "OpenTracksVisualPanel.buttonSelectAll.text")); // NOI18N
        buttonSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSelectAllActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(buttonDeselectAll, org.openide.util.NbBundle.getMessage(OpenTracksVisualPanel.class, "OpenTracksVisualPanel.buttonDeselectAll.text")); // NOI18N
        buttonDeselectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeselectAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(trackListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(combineTracksBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonSelectAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonDeselectAll)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(trackListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combineTracksBox)
                    .addComponent(buttonSelectAll)
                    .addComponent(buttonDeselectAll)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSelectAllActionPerformed
        this.updateSelectionOfAllItems( true );
    }//GEN-LAST:event_buttonSelectAllActionPerformed

    private void buttonDeselectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeselectAllActionPerformed
        this.updateSelectionOfAllItems( false );
    }//GEN-LAST:event_buttonDeselectAllActionPerformed


    /**
     * Either selects or deselects all items contained in the outline view and
     * the explorer manager.
     * <p>
     * @param selectAll true, if all items shall be selected, false otherwise
     */
    private void updateSelectionOfAllItems( boolean selectAll ) {
        StandardItem.setSelectionOfAllItems( outlineView, explorerManager.getRootContext().getChildren().getNodes(), selectAll );
        this.isRequiredInfoSet();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDeselectAll;
    private javax.swing.JButton buttonSelectAll;
    private javax.swing.JCheckBox combineTracksBox;
    private javax.swing.JPanel trackListPanel;
    // End of variables declaration//GEN-END:variables


    private void initAdditionalComponents() {
        trackListPanel.setLayout( new BorderLayout() );

        Node rootNode = new AbstractNode( new RootChildren() );
        explorerManager.setRootContext( rootNode );

        //Set the columns of the outline view
        //do not show the default property window
        //this outlineview is meant to be a read-only list
        outlineView.setDefaultActionAllowed( false );
        //using the name of the property
        //followed by the text to be displayed in the column header:
        outlineView.setPropertyColumns( "selected", "Select" );
        //Hide the root node, since we only care about the children:
        outlineView.getOutline().setRootVisible( false ); //Add the OutlineView to the TopComponent:
        outlineView.getOutline().setDefaultRenderer( Node.Property.class, new CustomOutlineCellRenderer() );

        trackListPanel.add( outlineView, BorderLayout.CENTER );
        outlineView.getOutline().getColumnModel().getColumn( 1 ).setMaxWidth( 50 );
        //add listener for changes in the cell selection
        outlineView.getOutline().addMouseListener( this.createMouseClickListener( outlineView.getOutline(), 0 ) );
        outlineView.getOutline().addMouseListener( this.createMouseClickListener( outlineView.getOutline(), 1 ) );
    }


    @Override
    public String getName() {
        return "Track Selection";
    }


    @Override
    public ExplorerManager getExplorerManager() {
        return this.explorerManager;
    }


    /**
     * @return <code>true</code>, if the all selected tracks shall be combined,
     *         <code>false</code> otherwise.
     */
    public boolean isCombineTracks() {
        return this.combineTracksBox.isSelected();
    }


    /**
     * Enables or disables the combine tracks checkbox. Standard value is true.
     * <p>
     * @param enabled true, if the combine tracks checkbox shall be enabled,
     *                false otherwise
     */
    public void setCombineTracksEnabled( boolean enabled ) {
        this.combineTracksBox.setVisible( enabled );
    }


    /**
     * @return The list of selected tracks from this panel.
     */
    public List<PersistentTrack> getSelectedTracks() {
        return Collections.unmodifiableList( selectedTracks );
    }


    /**
     * Stores all seleceted tracks in the internal selectedTracks list.
     */
    public void storeSelectedTracks() {

        List<Node> markedNodes = getAllMarkedNodes();
        for( Node node : markedNodes ) {
            StandardNode markedNode = (StandardNode) node;
            selectedTracks.add( ((TrackItem) markedNode.getData()).getTrack() );
        }
        
    }


    /**
     * @return All nodes marked in the explorer manager.
     */
    public List<Node> getAllMarkedNodes() {
        List<Node> nodeList = Arrays.asList( explorerManager.getRootContext().getChildren().getNodes() );
        nodeList = StandardNode.getAllMarkedNodes( nodeList );
//        nodeList.addAll(Arrays.asList(explorerManager.getSelectedNodes()));
//        Set<Node> uniqueNodes = new HashSet<>(nodeList); //ensures, that each track only occurs once!
        return nodeList; //new ArrayList<>(uniqueNodes)
    }


    @Override
    public boolean isRequiredInfoSet() {
        this.checkSelectedRowBoxes();

        boolean requiredInfoSet = this.getAllMarkedNodes().size() > 0;
        if( requiredInfoSet ) {
            this.storeSelectedTracks();
        }
        else {
            this.selectedTracks.clear();
        }
        firePropertyChange( ChangeListeningWizardPanel.PROP_VALIDATE, null, requiredInfoSet );
        return requiredInfoSet;
    }


    /**
     * Checks the boxes of all currently selected nodes in the explorer.
     */
    private void checkSelectedRowBoxes() {
        Node[] selectedNodes = explorerManager.getSelectedNodes();
        for( int i = 0; i < selectedNodes.length; ++i ) {
            if( selectedNodes[i] instanceof TrackNode ) {
                StandardItem item = ((StandardNode) selectedNodes[i]).getData();
                if( item instanceof TrackItem ) {
                    if( !selectedTracks.contains( ((TrackItem) item).getTrack() ) && !item.getSelected() ) {
                        item.setSelected( true );
                    }
                }
            }
        }
        outlineView.repaint();
    }


    /**
     *
     */
    public class TrackItem extends StandardItem {

        private final PersistentTrack track;


        /**
         *
         * @param track
         */
        public TrackItem( PersistentTrack track ) {
            super();
            this.track = track;
        }


        public PersistentTrack getTrack() {
            return this.track;
        }


    }


    /**
     * A node object for a track.
     */
    public class TrackNode extends StandardNode {

        public TrackNode( TrackItem bean ) throws IntrospectionException {
            super( bean );
            this.setDisplayName( bean.getTrack().getDescription() );
            setIconBaseWithExtension( "de/cebitec/readxplorer/ui/visualisation/trackOpen.png" );
        }


    }


    public class RootChildren extends Children.Keys<List<PersistentTrack>> {

        @Override
        protected Node[] createNodes( List<PersistentTrack> trackList ) {
            Node[] trackNodes = new Node[trackList.size()];
            for( int i = 0; i < trackList.size(); i++ ) {
                try {
                    PersistentTrack track = trackList.get( i );
                    trackNodes[i] = new TrackNode( new TrackItem( track ) );
                }
                catch( IntrospectionException ex ) {
                    Exceptions.printStackTrace( ex );
                }
            }
            return trackNodes;
        }


        @Override
        protected void addNotify() {
            super.addNotify();
            Collection<List<PersistentTrack>> list = new ArrayList<>();
            list.add( refGenConnector.getAssociatedTracks() );
            this.setKeys( list );
        }


    }

}
