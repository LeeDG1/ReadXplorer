
/*
 * TrackNormailzationPanel.java
 *
 * Created on 18.01.2012, 14:05:04
 */
package de.cebitec.vamp.ui.visualisation.track.normalization;

import de.cebitec.vamp.view.dataVisualisation.trackViewer.NormalizationSettings;
import de.cebitec.vamp.controller.ViewController;
import de.cebitec.vamp.databackend.connector.TrackConnector;
import de.cebitec.vamp.view.dataVisualisation.abstractViewer.AbstractViewer;
import de.cebitec.vamp.view.dataVisualisation.basePanel.BasePanel;
import de.cebitec.vamp.view.dataVisualisation.trackViewer.MultipleTrackViewer;
import de.cebitec.vamp.view.dataVisualisation.trackViewer.TrackViewer;

import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JSpinner;

import javax.swing.SpinnerNumberModel;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.text.NumberFormatter;
import org.openide.util.Lookup.Result;

/**
 *
 * @author jstraube
 */
public class TrackNormalizationPanel extends javax.swing.JPanel {

    private TrackConnector trackCon;
    private List<TrackViewer> context;
    private boolean doubleTrack; 

    /** Creates new form TrackNormailzationPanel */
    public TrackNormalizationPanel() {
        initComponents();

    }

    public TrackNormalizationPanel(List<TrackViewer> context) {
        this.context = context;

    }

    /**
     * Sets a new track connector and recomputes the stats.
     * Use this method when switching to another track.
     * @param trackCon new track connector
     */
    public void setTrackConnector(TrackConnector trackCon) {
        this.trackCon = trackCon;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(200, 400));
        setLayout(new java.awt.GridLayout(1, 0));
        getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(TrackNormalizationPanel.class, "TrackNormalizationPanel.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public void setTrackName(String trackName) {

        this.getLayout().addLayoutComponent(trackName, new JLabel(trackName));

    }

    public void setComp(Result<ViewController> controller) {
        if (!controller.allInstances().isEmpty()) {
            for (final ViewController cont : controller.allInstances()) {

                for (final BasePanel bp : cont.getOpenTracks()) {
                    if (bp.getViewer() instanceof TrackViewer || bp.getViewer() instanceof MultipleTrackViewer) {
                        TrackViewer viewer = (TrackViewer) bp.getViewer();

                        viewer.addMouseListener(new MouseListener() {

                            @Override
                            public void mouseClicked(MouseEvent e) {
                                setNormalizationComponents(((TrackViewer) e.getSource()));
                            }

                            @Override
                            public void mousePressed(MouseEvent e) {
                            }

                            @Override
                            public void mouseReleased(MouseEvent e) {
                            }

                            @Override
                            public void mouseEntered(MouseEvent e) {
                            }

                            @Override
                            public void mouseExited(MouseEvent e) {
                            }
                        });
                    }else{
                        bp.getViewer();
                    }
                }
            }
        }
    }
    

    public void setNormalizationComponents(TrackViewer viewer) {
        final TrackViewer tv = viewer;
        this.removeAll();
        this.setLayout(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        int i = 0;
        int k = 0;
        for (String name : tv.getTrackCon().getAssociatedTrackNames()) {
            final JLabel l = new JLabel(name);
            l.setFont(new Font("Arial", Font.BOLD, 11));
            final JCheckBox log = new JCheckBox("Log2");
            final JCheckBox factor = new JCheckBox("Factor");
            final JSpinner scaleFactorSpinner = new JSpinner();
            final NormalizationSettings ns;

            trackCon = tv.getTrackCon();
            final int trackID = trackCon.getTrackIds().get(k);
            k++;

            //scaleFactor init and action 
            scaleFactorSpinner.setSize(30, 150);
            scaleFactorSpinner.setModel(
                    new SpinnerNumberModel(0.0, 0, 10, 0.1));

            if (tv.getNormSetting() == null) {
                ns = setNewNormSetting();
                tv.setNormSetting(ns);
            } else {
                ns = tv.getNormSetting();
                boolean isLogNorm = ns.getIsLogNorm(trackID);
                boolean hasNorm = ns.getHasNormFac(trackID);
                scaleFactorSpinner.setValue(ns.getFactors(trackID));
                log.setSelected(isLogNorm);
                factor.setSelected(hasNorm && !isLogNorm);
            }
            JSpinner.NumberEditor editor = (JSpinner.NumberEditor) scaleFactorSpinner.getEditor();
            final JFormattedTextField txt = editor.getTextField();
            ((NumberFormatter) txt.getFormatter()).setAllowsInvalid(false);
            DecimalFormat format = editor.getFormat();
            format.setMinimumFractionDigits(1);
            
            scaleFactorSpinner.addChangeListener(
                    new ChangeListener() {

                        @Override
                        public void stateChanged(ChangeEvent e) {

                            JSpinner spinn = (JSpinner) e.getSource();
                            double fac = (Double) spinn.getValue();
                            NormalizationSettings currentNS = tv.getNormSetting();
                            currentNS.setFactors(fac, trackID);
                            tv.setNormSetting(currentNS);
                            if (factor.isSelected()) {
                                tv.scaleValueChanged();
                            }
                        }
                    });

                        factor.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    JCheckBox check = (JCheckBox) e.getSource();
                    boolean isLogNorm = check.isSelected();
                    boolean isSel = isLogNorm | log.isSelected();

                    double fac = (Double) scaleFactorSpinner.getValue();
                    NormalizationSettings currentNS = tv.getNormSetting();
                    currentNS.setFactors(fac, trackID);
                    currentNS.setIsLogNorm(isSel & !isLogNorm, trackID);
                    currentNS.setHasNormFac(isSel, trackID);
                    tv.setNormSetting(currentNS);
                    tv.scaleValueChanged();
                    log.setSelected(isSel & !isLogNorm);

                }
            });
            
            
//log2 init and action
            log.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {

                    JCheckBox check = (JCheckBox) e.getSource();
                    boolean logIsSel = check.isSelected();
                    boolean isSel = logIsSel | factor.isSelected();
                    factor.setSelected(isSel & !logIsSel);
                    NormalizationSettings currentNS = tv.getNormSetting();
                    currentNS.setHasNormFac(isSel, trackID);
                    currentNS.setIsLogNorm(logIsSel, trackID);
                    tv.setNormSetting(currentNS);
                    tv.scaleValueChanged();

                }
            });




            c.fill = GridBagConstraints.HORIZONTAL;
            c.anchor = GridBagConstraints.NORTH;
            c.gridwidth = 2;
            c.gridx = 0;
            c.gridy = i;

            add(l, c);
            //c.fill = GridBagConstraints.HORIZONTAL;
            c.gridwidth = 1;
            c.gridx = 0;
            c.gridy = i + 1;
            add(log, c);
            // c.fill = GridBagConstraints.HORIZONTAL;
            c.insets = new Insets(0, 5, 0, 0);
            c.gridwidth = 1;
            c.gridx = 1;
            c.gridy = i + 1;
            add(factor, c);
            //c.fill = GridBagConstraints.HORIZONTAL;
            c.insets = new Insets(0, 0, 0, 0);
            c.gridwidth = 1;
            c.gridx = 2;
            c.gridy = i + 1;
            add(scaleFactorSpinner, c);
            i += 2;
        }

        updateUI();
    }
    
    private NormalizationSettings setNewNormSetting(){
                   List<Boolean> bools = new ArrayList<Boolean>();
                bools.add(0, false);
                bools.add(1, false);
                List<Double> factors = new ArrayList<Double>();
                factors.add(0, 0.0);
                factors.add(1, 0.0);
                List<Boolean> hasNorm = new ArrayList<Boolean>();
                hasNorm.add(0, false);
                hasNorm.add(1, false);
                return  new NormalizationSettings(trackCon.getTrackIds(), bools, factors,hasNorm);
    }
}
