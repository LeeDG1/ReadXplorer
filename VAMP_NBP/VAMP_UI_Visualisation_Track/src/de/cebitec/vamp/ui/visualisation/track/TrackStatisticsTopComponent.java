package de.cebitec.vamp.ui.visualisation.track;

import de.cebitec.vamp.view.dataVisualisation.referenceViewer.ReferenceViewer;
import de.cebitec.vamp.view.dataVisualisation.trackViewer.TrackViewer;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.logging.Logger;
import org.openide.util.LookupEvent;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.Lookup.Result;
import org.openide.util.LookupListener;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//de.cebitec.vamp.ui.visualisation.track//TrackStatistics//EN", autostore = false)
public final class TrackStatisticsTopComponent extends TopComponent implements LookupListener{

    private static final long serialVersionUID = 1L;

    private static TrackStatisticsTopComponent instance;
    private Result<TrackViewer> result;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "TrackStatisticsTopComponent";

    public TrackStatisticsTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(TrackStatisticsTopComponent.class, "CTL_TrackStatisticsTopComponent"));
        setToolTipText(NbBundle.getMessage(TrackStatisticsTopComponent.class, "HINT_TrackStatisticsTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        trackStatisticsPanel1 = new de.cebitec.vamp.view.dataVisualisation.trackViewer.TrackStatisticsPanel();

        setLayout(new java.awt.BorderLayout());
        add(trackStatisticsPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private de.cebitec.vamp.view.dataVisualisation.trackViewer.TrackStatisticsPanel trackStatisticsPanel1;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized TrackStatisticsTopComponent getDefault() {
        if (instance == null) {
            instance = new TrackStatisticsTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the TrackStatisticsTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized TrackStatisticsTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(TrackStatisticsTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof TrackStatisticsTopComponent) {
            return (TrackStatisticsTopComponent) win;
        }
        Logger.getLogger(TrackStatisticsTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        result = Utilities.actionsGlobalContext().lookupResult(TrackViewer.class);
        result.addLookupListener(this);
        resultChanged(new LookupEvent(result));
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        if (result.allInstances().isEmpty() && !Utilities.actionsGlobalContext().lookupAll(ReferenceViewer.class).isEmpty()){
            setVisible(false);
        }
        else{
            if (!isVisible()) setVisible(true);
            for (TrackViewer trackViewer : result.allInstances()) {
                trackStatisticsPanel1.setTrackConnector(trackViewer.getTrackCon());
                trackStatisticsPanel1.setTrackName(trackViewer.getName());

                // XXX is not working
                trackViewer.addPropertyChangeListener(TrackViewer.PROP_TRACK_ENTERED, new PropertyChangeListener() {

                    @Override
                    public void propertyChange(PropertyChangeEvent evt) {
                        trackStatisticsPanel1.setName((String) evt.getNewValue());
                    }
                });
            }
        }
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

}
