package de.cebitec.vamp.ui.visualisation.track;

import de.cebitec.vamp.databackend.connector.ITrackConnector;
//import de.cebitec.vamp.databackend.connector.ProjectConnector;
//import de.cebitec.vamp.databackend.connector.RunConnector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;

/**
 *
 * @author ddoppmeier
 */
public class TrackStatisticsPanel extends javax.swing.JPanel {

    private final static long serialVersionUID = 1239345;

    private ITrackConnector trackCon;

    /** Creates new form TrackNavigator */
    public TrackStatisticsPanel() {
        initComponents();
//        Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, "Do not use empty Constructor for this object! Standard constructor is only meant for GUI builder means");
    }

    public TrackStatisticsPanel(ITrackConnector trackCon){
        this.trackCon = trackCon;
        this.initComponents();
        this.computeStats();
    }

    public void setTrackConnector(ITrackConnector trackCon){
        this.trackCon = trackCon;
        this.computeStats();
    }

    public void setTrackName(String name){
        nameLabel.setText(name);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressbar = new javax.swing.JProgressBar();
        allReadsLabel = new javax.swing.JLabel();
        uniqueSequencesLabel = new javax.swing.JLabel();
        numUniqueMappingsAbsLabel = new javax.swing.JLabel();
        perfectMappingsLabel = new javax.swing.JLabel();
        bestMatchMappingsLabel = new javax.swing.JLabel();
        numMappingsLabel = new javax.swing.JLabel();
        uniqueSequencesAbsLabel = new javax.swing.JLabel();
        perfectMappingsAbsLabel = new javax.swing.JLabel();
        bestMatchMappingsAbsLabel = new javax.swing.JLabel();
        numMappingsAbsLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        perfectPercentage = new javax.swing.JLabel();
        bmPercentage = new javax.swing.JLabel();
        nerrorPercentage = new javax.swing.JLabel();
        labelNameLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        numberReadsAbsLabel = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Global Track Statistics"));
        setPreferredSize(new java.awt.Dimension(171, 200));

        allReadsLabel.setText("Unique Mappings:");

        uniqueSequencesLabel.setText("Unique Seq:");

        numUniqueMappingsAbsLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);

        perfectMappingsLabel.setText("Perfect:");

        bestMatchMappingsLabel.setText("Best-Match:");

        numMappingsLabel.setText("Mappings:");

        uniqueSequencesAbsLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);

        perfectMappingsAbsLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);

        bestMatchMappingsAbsLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);

        numMappingsAbsLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);

        jLabel1.setText("cov. perfect:");

        jLabel2.setText("cov. bm:");

        jLabel3.setText("cov. compl.:");

        perfectPercentage.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);

        bmPercentage.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);

        nerrorPercentage.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);

        labelNameLabel.setText("Name:");

        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);

        jLabel5.setText("Number Reads:");

        numberReadsAbsLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelNameLabel)
                            .addComponent(numMappingsLabel)
                            .addComponent(uniqueSequencesLabel)
                            .addComponent(allReadsLabel)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numberReadsAbsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                            .addComponent(numMappingsAbsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                            .addComponent(numUniqueMappingsAbsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                            .addComponent(uniqueSequencesAbsLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                            .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(bestMatchMappingsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bestMatchMappingsAbsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(perfectMappingsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(perfectMappingsAbsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(perfectPercentage, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bmPercentage, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nerrorPercentage, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(progressbar, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelNameLabel)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(numMappingsLabel)
                    .addComponent(numMappingsAbsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(allReadsLabel)
                    .addComponent(numUniqueMappingsAbsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(uniqueSequencesAbsLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uniqueSequencesLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(numberReadsAbsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(bestMatchMappingsAbsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bestMatchMappingsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(perfectMappingsLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(perfectMappingsAbsLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(perfectPercentage, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(bmPercentage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(nerrorPercentage, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel allReadsLabel;
    private javax.swing.JLabel bestMatchMappingsAbsLabel;
    private javax.swing.JLabel bestMatchMappingsLabel;
    private javax.swing.JLabel bmPercentage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel labelNameLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel nerrorPercentage;
    private javax.swing.JLabel numMappingsAbsLabel;
    private javax.swing.JLabel numMappingsLabel;
    private javax.swing.JLabel numUniqueMappingsAbsLabel;
    private javax.swing.JLabel numberReadsAbsLabel;
    private javax.swing.JLabel perfectMappingsAbsLabel;
    private javax.swing.JLabel perfectMappingsLabel;
    private javax.swing.JLabel perfectPercentage;
    private javax.swing.JProgressBar progressbar;
    private javax.swing.JLabel uniqueSequencesAbsLabel;
    private javax.swing.JLabel uniqueSequencesLabel;
    // End of variables declaration//GEN-END:variables

    private void computeStats(){
        Thread t = new Thread(new Runnable() {

            @Override
            public void run() {
                //RunConnector runC = ProjectConnector.getInstance().getRunConnector(trackCon.getRunId(),trackCon.getTrackID());
                boolean recalculated = false;
                
                int numOfMappings = trackCon.getNumOfMappings();
                if(numOfMappings == 0){
                   numOfMappings = trackCon.getNumOfMappingsCalculate();
                   recalculated = true;
                }
                numMappingsAbsLabel.setText(String.valueOf(numOfMappings));

                int numUniqueMappings = trackCon.getNumOfUniqueMappings();
                if (numUniqueMappings == 0) {
                    numUniqueMappings = trackCon.getNumOfUniqueMappingsCalculate();
                    Logger.getLogger(this.getClass().getName()).log(Level.INFO, "Updating statistic information");
                    //trackCon.updateStatisticsTable(numOfReads, numUniqueMappings);
                    recalculated = true;
                }
                numUniqueMappingsAbsLabel.setText(String.valueOf(numUniqueMappings));

                int numUniqueSequences = trackCon.getNumOfUniqueSequences();
                if (numUniqueSequences == 0) {
                    numUniqueSequences = trackCon.getNumOfUniqueSequencesCalculate();
                    recalculated = true;
                }
                uniqueSequencesAbsLabel.setText(String.valueOf(numUniqueSequences));
                        
                int numReads = trackCon.getNumOfReads();
                if (numReads == 0) {
                    numberReadsAbsLabel.setText("Not available"); //TODO: implement num of reads calc
                } else {
                    numberReadsAbsLabel.setText(String.valueOf(numReads));
                }
                
                int numOfPerfectMappings = trackCon.getNumOfPerfectUniqueMappings();
                if(numOfPerfectMappings == 0){
                    numOfPerfectMappings = trackCon.getNumOfPerfectUniqueMappingsCalculate();//TODO: decide whether unique or not!
                    recalculated = true;
                }
                perfectMappingsAbsLabel.setText(String.valueOf(numOfPerfectMappings));

                int numOfBestMatchMappings = trackCon.getNumOfUniqueBmMappings();
                if(numOfBestMatchMappings == 0){
                    numOfBestMatchMappings = trackCon.getNumOfUniqueBmMappingsCalculate();
                    recalculated = true;
                }
                bestMatchMappingsAbsLabel.setText(String.valueOf(numOfBestMatchMappings));

                double percentagePerfectCovered = trackCon.getPercentRefGenPerfectCovered();
                if(percentagePerfectCovered ==0){
                    percentagePerfectCovered = trackCon.getPercentRefGenPerfectCoveredCalculate();
                    recalculated = true;
                }
                
                double percentageBMCovered = trackCon.getPercentRefGenBmCovered();
                if(percentageBMCovered == 0){
                    percentageBMCovered = trackCon.getPercentRefGenBmCoveredCalculate();
                    recalculated = true;
                }
                
                double percentageNErrorCovered = trackCon.getPercentRefGenNErrorCovered();
                if(percentageNErrorCovered ==0){
                    percentageNErrorCovered = trackCon.getPercentRefGenNErrorCoveredCalculate();
                    recalculated = true;
                }
                
                if (recalculated){
                    trackCon.setStatistics(numOfMappings, numUniqueMappings, numUniqueSequences, 
                        numOfPerfectMappings, numOfBestMatchMappings, percentagePerfectCovered, 
                        percentageBMCovered, percentageNErrorCovered, numReads);
                }

                String perfectCov = String.format("%.2f%%", percentagePerfectCovered);
                String bmCov = String.format("%.2f%%", percentageBMCovered);
                String nErrorCov = String.format("%.2f%%", percentageNErrorCovered);

                perfectPercentage.setText(perfectCov);
                bmPercentage.setText(bmCov);
                nerrorPercentage.setText(nErrorCov);
                statsFinished();
            }
        }){
        };
        progressbar.setIndeterminate(true);

        t.setPriority(Thread.MIN_PRIORITY);
        t.start();
    }

    private void statsFinished(){
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                progressbar.setIndeterminate(false);
                progressbar.setVisible(false);
            }
        });
    }

    public void close() {
        trackCon = null;
    }

}
