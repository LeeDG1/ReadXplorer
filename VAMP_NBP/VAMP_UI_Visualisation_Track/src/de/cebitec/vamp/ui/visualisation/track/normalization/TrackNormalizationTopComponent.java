/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 *   This file is part of ProSE.
 *   Copyright (C) 2007-2010 CeBiTec, Bielefeld University
 * 
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 * 
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 * 
 *   You should have received a copy of the GNU General Public License
 *   along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package de.cebitec.vamp.ui.visualisation.track.normalization;

import de.cebitec.vamp.controller.ViewController;
import de.cebitec.vamp.view.dataVisualisation.referenceViewer.ReferenceViewer;
import de.cebitec.vamp.view.dataVisualisation.trackViewer.MultipleTrackViewer;
import de.cebitec.vamp.view.dataVisualisation.trackViewer.TrackViewer;
import java.awt.BorderLayout;
import java.util.logging.Logger;
import org.openide.util.LookupEvent;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup.Result;
import org.openide.util.LookupListener;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//de.cebitec.vamp.ui.visualisation.track.normalization//TrackNormalization//EN",autostore = false)
@TopComponent.Description(preferredID = "TrackNormalizationTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = false, position=950)
@ActionID(category = "Window", id = "de.cebitec.vamp.ui.visualisation.track.normalization.TrackNormalizationTopComponent")
@ActionReference(path = "Menu/Window" )

@TopComponent.OpenActionRegistration(displayName = "#CTL_TrackNormalizationAction",
preferredID = "TrackNormalizationTopComponent")

public final class TrackNormalizationTopComponent extends TopComponent implements LookupListener {
    
// private Result<ViewController> result;
    private Result<ViewController> result;
  //public TrackNormalizationPanel trackNormailzationPanel1 ;
    public TrackNormalizationTopComponent() {

        initComponents();
        setName(NbBundle.getMessage(TrackNormalizationTopComponent.class, "CTL_TrackNormalizationTopComponent"));
        setToolTipText(NbBundle.getMessage(TrackNormalizationTopComponent.class, "HINT_TrackNormalizationTopComponent"));
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        trackNormalizationPanel1 = new de.cebitec.vamp.ui.visualisation.track.normalization.TrackNormalizationPanel();

        setMinimumSize(new java.awt.Dimension(100, 100));
        setLayout(new java.awt.BorderLayout());
        add(trackNormalizationPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private de.cebitec.vamp.ui.visualisation.track.normalization.TrackNormalizationPanel trackNormalizationPanel1;
    // End of variables declaration//GEN-END:variables


    @Override
    public void componentClosed() {
       result.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }



        @Override
    public void componentOpened() {
        
        result = Utilities.actionsGlobalContext().lookupResult(ViewController.class);
        result.addLookupListener(this);
        resultChanged(new LookupEvent(result));
    }

    @Override
    public void resultChanged(LookupEvent ev) {
          
        if (result.allInstances().isEmpty() && !Utilities.actionsGlobalContext().lookupAll(ReferenceViewer.class).isEmpty()){
            setVisible(false);
        }
        else{
            if (!isVisible()){ setVisible(true); }
                trackNormalizationPanel1.setComp(result);

        }
    }
}
