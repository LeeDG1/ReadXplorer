/*
 * SNP_DetectionSetupPanel.java
 *
 * Created on 23.02.2011, 16:08:09
 */

package de.cebitec.vamp.tools.snp;

import de.cebitec.vamp.databackend.connector.TrackConnector;
import de.cebitec.vamp.objects.Snp;
import java.util.ArrayList;
import java.util.List;
import javax.swing.SwingWorker;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.RequestProcessor;
import org.openide.util.RequestProcessor.Task;
import org.openide.util.TaskListener;

/**
 *
 * @author jwinneba
 */
public class SNP_DetectionSetupPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;
    private TrackConnector con;
    private List<Snp> snps;

    /** Creates new form SNP_DetectionSetupPanel */
    public SNP_DetectionSetupPanel() {
        initComponents();
        snps = new ArrayList<Snp>();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        absNum = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jButton1.setText(org.openide.util.NbBundle.getMessage(SNP_DetectionSetupPanel.class, "SNP_DetectionSetupPanel.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jSpinner1.setValue(60);

        jLabel2.setText(org.openide.util.NbBundle.getMessage(SNP_DetectionSetupPanel.class, "SNP_DetectionSetupPanel.jLabel2.text")); // NOI18N

        jLabel3.setText(org.openide.util.NbBundle.getMessage(SNP_DetectionSetupPanel.class, "SNP_DetectionSetupPanel.jLabel3.text")); // NOI18N

        absNum.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        absNum.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        absNum.setText(org.openide.util.NbBundle.getMessage(SNP_DetectionSetupPanel.class, "SNP_DetectionSetupPanel.absNum.text")); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setRows(5);
        jTextArea1.setText(org.openide.util.NbBundle.getMessage(SNP_DetectionSetupPanel.class, "SNP_DetectionSetupPanel.jTextArea1.text")); // NOI18N
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(absNum)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(absNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String absN = absNum.getText();
        if(isValidNumer(absN)){
            final int num = Integer.parseInt(absN);
            final int percent = (Integer) jSpinner1.getValue();
            
            // TODO do this the elegant way
            class SnpWorker extends SwingWorker<List<Snp>, Object> {

                @Override
                protected List<Snp> doInBackground() {
                    snps = con.findSNPs(percent, num);
                    return snps;
                }

            }

            RequestProcessor rp = new RequestProcessor("SNP Threads", 2);
            final Task snpTask = rp.post(new SnpWorker());
            snpTask.addTaskListener(new TaskListener() {

                @Override
                public void taskFinished(org.openide.util.Task task) {
                    firePropertyChange("snpsLoaded", null, snps);
                    snpTask.removeTaskListener(this);
                }
            });
        } else {
            NotifyDescriptor nd = new NotifyDescriptor.Message("Please enter a valid positive number!", NotifyDescriptor.ERROR_MESSAGE);
            DialogDisplayer.getDefault().notify(nd);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private boolean isValidNumer(String num){
        try{
            int tmp = Integer.parseInt(num);
            if(tmp > 0){
                return true;
            } else {
                return false;
            }
        } catch (NumberFormatException ex){
            return false;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField absNum;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    public List<Snp> getSnps() {
        return snps;
    }

    public void setCon(TrackConnector con) {
        this.con = con;
    }

}
