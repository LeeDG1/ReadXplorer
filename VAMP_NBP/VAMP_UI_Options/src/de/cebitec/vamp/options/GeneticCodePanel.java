/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cebitec.vamp.options;

import org.openide.util.NbPreferences;
import de.cebitec.vamp.util.GeneticCodesStore;
import de.cebitec.vamp.util.Properties;
import javax.swing.ListSelectionModel;

/**
 * @author Rolf Hilker
 *
 * Panel for choosing the genetic code to use. Meaning which start and stop codons
 * should be used.
 */
final class GeneticCodePanel extends javax.swing.JPanel {

    private final GeneticCodeOptionsPanelController controller;

    GeneticCodePanel(GeneticCodeOptionsPanelController controller) {
        this.controller = controller;
        this.initComponents();
        this.initChooseCodeComboBox();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooseCodeLabel = new javax.swing.JLabel();
        geneticCodeScrolPane = new javax.swing.JScrollPane();
        geneticCodeList = new javax.swing.JList();

        org.openide.awt.Mnemonics.setLocalizedText(chooseCodeLabel, org.openide.util.NbBundle.getMessage(GeneticCodePanel.class, "GeneticCodePanel.chooseCodeLabel.text")); // NOI18N

        geneticCodeScrolPane.setViewportView(geneticCodeList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(geneticCodeScrolPane, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                    .addComponent(chooseCodeLabel))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(chooseCodeLabel)
                .addGap(18, 18, 18)
                .addComponent(geneticCodeScrolPane, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(91, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        this.geneticCodeList.setSelectedIndex(Integer.valueOf(NbPreferences.forModule(Object.class).get(Properties.GENETIC_CODE_INDEX, "0")));
    }

    void store() {
        // store modified settings
        // remember selected indices in geneticCodeList have to be conform with GeneticCodesStore order!
        String identifier = GeneticCodesStore.getGeneticCodeIdentifiers()[geneticCodeList.getSelectedIndex()];
        NbPreferences.forModule(Object.class).put(Properties.SEL_GENETIC_CODE, identifier);
        NbPreferences.forModule(Object.class).put(Properties.GENETIC_CODE_INDEX, String.valueOf(geneticCodeList.getSelectedIndex()));
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel chooseCodeLabel;
    private javax.swing.JList geneticCodeList;
    private javax.swing.JScrollPane geneticCodeScrolPane;
    // End of variables declaration//GEN-END:variables

    /**
     * Creates the content of the combo box containing the genetic codes.
     */
    private void initChooseCodeComboBox() {
        this.geneticCodeList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        final String[] identifiers = GeneticCodesStore.getGeneticCodeIdentifiers();
        final String[][] geneticCodes = GeneticCodesStore.getStartCodons();
        final String[] geneticCodesData = new String[identifiers.length];
        
        String[] startCodons;
        String startCodonsConcat;
        for (int i=0; i<identifiers.length; ++i){
            startCodons = geneticCodes[i];
            startCodonsConcat = "<html><b>(";
            for (int j=0; j<startCodons.length; ++j){
                startCodonsConcat = startCodonsConcat.concat(startCodons[j].concat(", "));
            }
            startCodonsConcat = startCodonsConcat.substring(0, startCodonsConcat.length()-2);
            geneticCodesData[i] = startCodonsConcat.concat(")</b> - <i>").concat(identifiers[i]).concat("</i></html>");
        }
        
        this.geneticCodeList.setModel(new javax.swing.AbstractListModel() {
            String[] geneticCodesDataModel = geneticCodesData.clone();

            @Override
            public int getSize() { 
                return this.geneticCodesDataModel.length;
            }

            @Override
            public Object getElementAt(int i) { 
                return this.geneticCodesDataModel[i];
            }
        });
    }
}
