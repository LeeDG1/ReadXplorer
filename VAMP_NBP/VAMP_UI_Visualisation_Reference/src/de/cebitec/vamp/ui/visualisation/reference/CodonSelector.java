package de.cebitec.vamp.ui.visualisation.reference;

import de.cebitec.vamp.util.Properties;
import de.cebitec.vamp.view.dataVisualisation.referenceViewer.ReferenceViewer;
import java.util.prefs.PreferenceChangeEvent;
import java.util.prefs.Preferences;
import org.openide.util.NbPreferences;
import de.cebitec.vamp.util.GeneticCodesStore;
import java.util.prefs.PreferenceChangeListener;
import javax.swing.GroupLayout.ParallelGroup;
import javax.swing.GroupLayout.SequentialGroup;
import javax.swing.JCheckBox;

/**
 *
 * @author ddoppmeier, rhilker
 */
public class CodonSelector extends javax.swing.JPanel {

    private final static long serialVersionUID = 24966;

    private ReferenceViewer viewer;
    private Preferences pref;

    /** Creates new form CodonSelector */
    public CodonSelector() {
        this.initComponents();
        this.initListener();
        this.updateComponents();
    }

    public void setGenomeViewer(ReferenceViewer viewer){
        this.viewer = viewer;
        this.checkBoxes();
    }

    /**
     * Used to check for boxes that are checked when a new viewer was selected.
     */
    private void checkBoxes(){
        //atgCheckbox.setSelected(this.viewer.getSequenceBar().isATGCodonShown());
        //this.viewer.getSequenceBar().whichCodonsSelected();
        //TODO: muss checken ob das hier noch gebraucht wird
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        basePanel = new javax.swing.JPanel();

        javax.swing.GroupLayout basePanelLayout = new javax.swing.GroupLayout(basePanel);
        basePanel.setLayout(basePanelLayout);
        basePanelLayout.setHorizontalGroup(
            basePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        basePanelLayout.setVerticalGroup(
            basePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setBorder(javax.swing.BorderFactory.createTitledBorder("Highlighted codons"));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 137, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 34, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel basePanel;
    // End of variables declaration//GEN-END:variables

    /**
     * Updates the codon selector according to the genetic code chosen.
     * If not the standard code is chosen new components have to be generated
     * and added to this panel.
     */
    private void initListener() {
        this.pref = NbPreferences.forModule(Object.class);
        this.pref.addPreferenceChangeListener(new PreferenceChangeListener() {
            @Override
            public void preferenceChange(PreferenceChangeEvent evt) {
                if (evt.getKey().equals(Properties.SEL_GENETIC_CODE)) {
                    CodonSelector.this.updateComponents();
                }
            }
        });
    }

    /**
     * Updates the components of this codon selector. When another genetic code
     * was chosen all old start codon checkboxes are removed and new checkboxes
     * are created.
     */
    private void updateComponents() {

        String[] startCodons = GeneticCodesStore.getGeneticCode(this.pref.get(Properties.SEL_GENETIC_CODE, Properties.STANDARD))[0];
        JCheckBox[] newBoxes = new JCheckBox[startCodons.length];
        for (int i = 0; i < startCodons.length; ++i) {

            //create as many checkboxes as needed and add them to this component
            final int index = i; //needs to be final for listener
            final JCheckBox newBox = new JCheckBox(startCodons[i]);//should be upper case already
            newBox.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    viewer.getSequenceBar().showCodons(index, newBox.isSelected());
                }
            });
            newBoxes[i] = newBox;
        }
        this.addBoxesToPanel(newBoxes);
    }

    /**
     * Adds the given array of JCheckboxes to this CodonSelectorPanel.
     * @param boxesToAdd the array of checkboxes to add to this component
     */
    private void addBoxesToPanel(final JCheckBox[] boxesToAdd) {

        this.removeAll();
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);

        if (boxesToAdd.length < 4){ //layout if less than 4 start codons
            SequentialGroup seqGroup = layout.createSequentialGroup();
            ParallelGroup parGroup = layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE);

            for (int i = 0; i < boxesToAdd.length; ++i) {
                seqGroup.addComponent(boxesToAdd[i]);
                parGroup.addComponent(boxesToAdd[i]);
            }

            layout.setHorizontalGroup(layout.createParallelGroup(
                    javax.swing.GroupLayout.Alignment.LEADING).addGroup(seqGroup));
            layout.setVerticalGroup(layout.createParallelGroup(
                    javax.swing.GroupLayout.Alignment.LEADING).addGroup(parGroup));
        } else
        if (boxesToAdd.length < 7){ //layout if less than 7 start codons
            ParallelGroup parGroup = layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING);
            ParallelGroup parGroup2 = layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING);
            ParallelGroup parGroup3 = layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING);
            ParallelGroup parGroup4 = layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE);
            ParallelGroup parGroup5 = layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE);

            int mod = 0;
            for (int i = 0; i < boxesToAdd.length; ++i) {
                mod = i%3; //group creation for horizontal groups
                if (mod == 0){
                    parGroup.addComponent(boxesToAdd[i]);
                } else
                if (mod == 1){
                    parGroup2.addComponent(boxesToAdd[i]);
                } else
                if (mod == 2){
                    parGroup3.addComponent(boxesToAdd[i]);
                }

                if (i < 3){ //group creation for vertical groups
                    parGroup4.addComponent(boxesToAdd[i]);
                } else {
                    parGroup5.addComponent(boxesToAdd[i]);
                }
            }

            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(parGroup)
                    .addGroup(parGroup2)
                    .addGroup(parGroup3))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(parGroup4)
                    .addGroup(parGroup5))
            );
        } else { //layout if less than 10 start codons, for more start codons implement something new
            SequentialGroup seqGroup = layout.createSequentialGroup();
            SequentialGroup seqGroup2 = layout.createSequentialGroup();
            SequentialGroup seqGroup3 = layout.createSequentialGroup();
            ParallelGroup parGroup = layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE);
            ParallelGroup parGroup2 = layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE);
            ParallelGroup parGroup3 = layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE);

            for (int i = 0; i < boxesToAdd.length; ++i) {
                if (i < 3){ //group creation for vertical groups
                    seqGroup.addComponent(boxesToAdd[i]);
                    parGroup.addComponent(boxesToAdd[i]);
                } else
                if (i < 6) {
                    seqGroup2.addComponent(boxesToAdd[i]);
                    parGroup2.addComponent(boxesToAdd[i]);
                } else {
                    seqGroup3.addComponent(boxesToAdd[i]);
                    parGroup3.addComponent(boxesToAdd[i]);
                }
            }

            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(seqGroup)
                        .addGroup(seqGroup2)
                        .addGroup(seqGroup3)))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(parGroup)
                    .addGroup(parGroup2)
                    .addGroup(parGroup3))
            );
        }

        //TODO: wenn schmaler als 3 boxen und neuer genetic code: parent size anpassen
    }

//    /**
//     * Calculates the preferred size of this panel.
//     * @return the preferred size of this panel
//     */
//    private Dimension calcPreferredSize(int nbBoxes) {
//        Dimension prefSize = this.getPreferredSize();
//        int prefHeight = CodonSelector.basicSize;
//        while (nbBoxes > 0) {
//            prefHeight += this.checkBoxheight;
//            nbBoxes -= 3;
//        }
//        return new Dimension(prefSize.width + 40, prefHeight);
//    }

}
