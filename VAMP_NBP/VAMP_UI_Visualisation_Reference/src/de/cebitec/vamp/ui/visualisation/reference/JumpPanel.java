package de.cebitec.vamp.ui.visualisation.reference;

import de.cebitec.vamp.databackend.connector.ProjectConnector;
import de.cebitec.vamp.databackend.connector.ReferenceConnector;
import de.cebitec.vamp.databackend.dataObjects.PersistantFeature;
import de.cebitec.vamp.databackend.dataObjects.PersistantReference;
import de.cebitec.vamp.view.dataVisualisation.BoundsInfoManager;
import de.cebitec.vamp.view.dataVisualisation.referenceViewer.IThumbnailView;
import de.cebitec.vamp.view.dataVisualisation.referenceViewer.ReferenceViewer;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.Utilities;

/**
 *
 * @author ddoppmeier
 */
public class JumpPanel extends javax.swing.JPanel implements LookupListener {

    private final static long serialVersionUID = 247246234;
    private int jumpPosition;
    private PersistantReference refGen;
    private ReferenceConnector refGenCon;
    private BoundsInfoManager boundsManager;
    private ReferenceViewer curRefViewer;
    private Lookup.Result<ReferenceViewer> res;

    public BoundsInfoManager getBoundsManager() {
        return boundsManager;
    }

    /** Creates new form JumpPanel */
    public JumpPanel() {
        initComponents();
        jumpPosition = 1;
        filterText.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                updateFilter();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateFilter();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateFilter();

            }
        });

        //Listener for TableSelect-Events
        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                int[] selectedRows = jTable1.getSelectedRows();
                if (selectedRows.length > 0) {
                    int correctedRow = jTable1.convertRowIndexToModel(selectedRows[0]);
                    PersistantFeature feature = (PersistantFeature) jTable1.getModel().getValueAt(correctedRow, 0);
                    if (feature.getStrand() == 1){
                        boundsManager.navigatorBarUpdated(feature.getStart());
                    } else {
                        boundsManager.navigatorBarUpdated(feature.getStop());
                    }
                }
            }
        });

        jTable1.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if ((e.getButton() == MouseEvent.BUTTON3) || (e.isPopupTrigger())) {
                    final IThumbnailView thumb = Lookup.getDefault().lookup(IThumbnailView.class);
                    if (thumb != null) {
                        thumb.showTablePopUp(jTable1, curRefViewer, e);
                    }
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
                if ((e.getButton() == MouseEvent.BUTTON3) || (e.isPopupTrigger())) {
                    final IThumbnailView thumb = Lookup.getDefault().lookup(IThumbnailView.class);
                    if (thumb != null) {
                        thumb.showTablePopUp(jTable1, curRefViewer, e);
                    }
                }
            }
        });

        //PropertyChangeListener for RevViewer
        res = Utilities.actionsGlobalContext().lookupResult(ReferenceViewer.class);
        res.addLookupListener(this);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jumpPositionLabel = new javax.swing.JLabel();
        jumpTextfield = new javax.swing.JTextField();
        jumpButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        filterProperties = new javax.swing.JPanel();
        jumpFilterLabel = new javax.swing.JLabel();
        filterText = new javax.swing.JTextField();
        filterForLabel = new javax.swing.JLabel();
        radioProduct = new javax.swing.JRadioButton();
        radioEC = new javax.swing.JRadioButton();
        radioFeatureButton = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Navigation"));
        setPreferredSize(new java.awt.Dimension(190, 500));

        jumpPositionLabel.setText("Jump to Position:");

        jumpTextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jumpTextfieldActionPerformed(evt);
            }
        });
        jumpTextfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jumpTextfieldKeyTyped(evt);
            }
        });

        jumpButton.setText("Go");
        jumpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jumpButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        filterProperties.setBorder(javax.swing.BorderFactory.createTitledBorder("FilterProperties"));

        jumpFilterLabel.setText("Filter:");

        filterForLabel.setText("Filter for:");

        buttonGroup1.add(radioProduct);
        radioProduct.setText("Product");
        radioProduct.setActionCommand("product");
        radioProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioProductActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioEC);
        radioEC.setText("EC-Number");
        radioEC.setActionCommand("ec");
        radioEC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioECActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioFeatureButton);
        radioFeatureButton.setSelected(true);
        radioFeatureButton.setText("Feature");
        radioFeatureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioFeatureButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filterPropertiesLayout = new javax.swing.GroupLayout(filterProperties);
        filterProperties.setLayout(filterPropertiesLayout);
        filterPropertiesLayout.setHorizontalGroup(
            filterPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPropertiesLayout.createSequentialGroup()
                .addGroup(filterPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filterForLabel)
                    .addComponent(jumpFilterLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(filterPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(filterPropertiesLayout.createSequentialGroup()
                        .addComponent(radioFeatureButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioProduct)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioEC))
                    .addComponent(filterText)))
        );
        filterPropertiesLayout.setVerticalGroup(
            filterPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPropertiesLayout.createSequentialGroup()
                .addGroup(filterPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jumpFilterLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filterPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterForLabel)
                    .addComponent(radioProduct)
                    .addComponent(radioEC)
                    .addComponent(radioFeatureButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                .addComponent(filterProperties, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(filterProperties, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jumpPositionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jumpTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jumpButton))
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jumpPositionLabel)
                    .addComponent(jumpTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jumpButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(116, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jumpTextfieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jumpTextfieldKeyTyped
        //jumpList.setSelectedValue(null, false);
        //DefaultListSelectionModel model = (DefaultListSelectionModel) jumpList.getSelectionModel();
        //model.clearSelection();
}//GEN-LAST:event_jumpTextfieldKeyTyped

    private void jumpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jumpButtonActionPerformed
        if (isValidInput(jumpTextfield.getText())) {
            jumpPosition = Integer.parseInt(jumpTextfield.getText());
            boundsManager.navigatorBarUpdated(jumpPosition);
        } else {
            JOptionPane.showMessageDialog(this, "Please enter a valid position!", "Invalid Position", JOptionPane.ERROR_MESSAGE);
        }
}//GEN-LAST:event_jumpButtonActionPerformed

    private void jumpTextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jumpTextfieldActionPerformed
        jumpButtonActionPerformed(evt);
    }//GEN-LAST:event_jumpTextfieldActionPerformed

    private void radioProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioProductActionPerformed
        clearFilter();
    }//GEN-LAST:event_radioProductActionPerformed

    private void radioECActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioECActionPerformed
        clearFilter();
    }//GEN-LAST:event_radioECActionPerformed

    private void radioFeatureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioFeatureButtonActionPerformed
        clearFilter();
    }//GEN-LAST:event_radioFeatureButtonActionPerformed

    private boolean isValidInput(String s) {
        try {
            int tmp = Integer.parseInt(s);
            if (tmp >= 1 && tmp <= refGen.getSequence().length()) {
                return true;
            } else {
                return false;
            }
        } catch (Exception e) {
            return false;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel filterForLabel;
    private javax.swing.JPanel filterProperties;
    private javax.swing.JTextField filterText;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jumpButton;
    private javax.swing.JLabel jumpFilterLabel;
    private javax.swing.JLabel jumpPositionLabel;
    private javax.swing.JTextField jumpTextfield;
    private javax.swing.JRadioButton radioEC;
    private javax.swing.JRadioButton radioFeatureButton;
    private javax.swing.JRadioButton radioProduct;
    // End of variables declaration//GEN-END:variables

    public void setReferenceGenome(PersistantReference refGen) {
        this.refGen = refGen;
        refGenCon = ProjectConnector.getInstance().getRefGenomeConnector(refGen.getId());
        fillFeatureList();
    }

    private void fillFeatureList() {
        List<PersistantFeature> feat = refGenCon.getFeaturesForRegion(0, refGen.getSequence().length());
        if (!feat.isEmpty()){
            Collections.sort(feat, new FeatureNameSorter());
            PersistantFeature[] featureData = feat.toArray(new PersistantFeature[0]);

            //Create new Model for Table
            jTable1.setModel(new FeatureTableModel(featureData));
            jTable1.setRowSorter(new TableRowSorter<TableModel>(jTable1.getModel()));
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(150);
            updateFilter();
        }
        
    }

    /*
     * Uses regular expression to filter all matching entries in Feature, Product- or EC-Column.
     */
    private void updateFilter() {
        RowFilter<TableModel, Object> rf = null;
        //If current expression doesn't parse, don't update.
        try {
            if (radioFeatureButton.isSelected()){
                rf = RowFilter.regexFilter(filterText.getText(), 0);
            } else
            if (radioProduct.isSelected()) {
                rf = RowFilter.regexFilter(filterText.getText(), 1);
            } else
            if (radioEC.isSelected()) {
                rf = RowFilter.regexFilter(filterText.getText(), 2);
            }

        } catch (java.util.regex.PatternSyntaxException e) {
            return;
        }
        ((TableRowSorter<TableModel>) jTable1.getRowSorter()).setRowFilter(rf);
    }

    public void setBoundsInfoManager(BoundsInfoManager boundsManager) {
        this.boundsManager = boundsManager;

    }

    @Override
    public void resultChanged(LookupEvent le) {
        for (ReferenceViewer refViewer : res.allInstances()) {
            curRefViewer = refViewer;
        }
    }

   
    void clearFilter() {
        this.filterText.setText("");
        this.updateFilter();
    }

    private class FeatureNameSorter implements Comparator<PersistantFeature> {

        @Override
        public int compare(PersistantFeature o1, PersistantFeature o2) {
            String name1 = o1.getLocus();
            String name2 = o2.getLocus();

            // null string is always "bigger" than anything else
            if (name1 == null && name2 != null) {
                return 1;
            } else if (name1 != null && name2 == null) {
                return -1;
            } else if (name1 == name2) { //== comparison desired here 4 nullcheck
                // both are null
                return 0;
            } else {
                return name1.compareTo(name2);
            }
        }
    }
}
