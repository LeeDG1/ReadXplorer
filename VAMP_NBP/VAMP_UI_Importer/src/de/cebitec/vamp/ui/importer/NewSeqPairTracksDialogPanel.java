/*
 * NewSeqPairTracksDialogPanel.java
 *
 * Created on 18.05.2011, 15:14:38
 */
package de.cebitec.vamp.ui.importer;

import de.cebitec.vamp.databackend.connector.ProjectConnector;
import de.cebitec.vamp.databackend.dataObjects.PersistantReference;
import de.cebitec.vamp.parser.ReferenceJob;
import de.cebitec.vamp.parser.common.ParserI;
import de.cebitec.vamp.parser.mappings.BAMSeqPairParser;
import de.cebitec.vamp.parser.mappings.MappingParserI;
import de.cebitec.vamp.parser.mappings.JokSeqPairParser;
import de.cebitec.vamp.parser.mappings.SAMSeqPairParser;
import java.awt.Component;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.openide.util.NbBundle;

/**
 * Panel allowing for input of two sequence pair mapping files.
 *
 * @author Rolf Hilker
 */
public class NewSeqPairTracksDialogPanel extends javax.swing.JPanel implements NewJobDialog {

    private static final long serialVersionUID = 776435254;
    private File mappingFile1;
    private File mappingFile2;
    private ReferenceJob[] refGenJobs;
    private MappingParserI[] parsers = new MappingParserI[]{new JokSeqPairParser(), new SAMSeqPairParser(), new BAMSeqPairParser()};
    private MappingParserI currentParser;
    private int distance; //distance of the sequences in a sequence pair in bp
    private short deviation; //deviation allowed from that distance in %
    private byte orientation; //0 = fr, 1 = rf, 2 = ff/rr

    /** Creates new form NewSeqPairTracksDialogPanel */
    public NewSeqPairTracksDialogPanel() {
        refGenJobs = getRefGenJobs();
        initComponents();
        // choose the default parser. first entry is shown in combobox by default
        currentParser = parsers[0];
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        refGenBox = new javax.swing.JComboBox(refGenJobs);
        refGenLabel = new javax.swing.JLabel();
        mappingFile1Label = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        chooseButton1 = new javax.swing.JButton();
        mappingFile1Field = new javax.swing.JTextField();
        descriptionField = new javax.swing.JTextField();
        descriptionLabel = new javax.swing.JLabel();
        parserComboBox = new javax.swing.JComboBox(parsers);
        mappingFile2Label = new javax.swing.JLabel();
        mappingFile2Field = new javax.swing.JTextField();
        chooseButton2 = new javax.swing.JButton();
        distanceField = new javax.swing.JTextField();
        deviationField = new javax.swing.JTextField();
        preferencesLabel = new javax.swing.JLabel();
        distanceLabel = new javax.swing.JLabel();
        deviationLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        orientation1Button = new javax.swing.JRadioButton();
        orientation3Button = new javax.swing.JRadioButton();
        orientation2Button = new javax.swing.JRadioButton();

        refGenLabel.setText(org.openide.util.NbBundle.getMessage(NewSeqPairTracksDialogPanel.class, "NewSeqPairTracksDialogPanel.refGenLabel.text")); // NOI18N

        mappingFile1Label.setText(org.openide.util.NbBundle.getMessage(NewSeqPairTracksDialogPanel.class, "NewSeqPairTracksDialogPanel.mappingFile1Label.text")); // NOI18N

        jLabel1.setText(org.openide.util.NbBundle.getMessage(NewSeqPairTracksDialogPanel.class, "NewSeqPairTracksDialogPanel.jLabel1.text")); // NOI18N

        chooseButton1.setText(org.openide.util.NbBundle.getMessage(NewSeqPairTracksDialogPanel.class, "NewSeqPairTracksDialogPanel.chooseButton1.text")); // NOI18N
        chooseButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseButton1ActionPerformed(evt);
            }
        });

        mappingFile1Field.setEditable(false);
        mappingFile1Field.setText(org.openide.util.NbBundle.getMessage(NewSeqPairTracksDialogPanel.class, "NewSeqPairTracksDialogPanel.mappingFile1Field.text")); // NOI18N

        descriptionLabel.setText(org.openide.util.NbBundle.getMessage(NewSeqPairTracksDialogPanel.class, "NewSeqPairTracksDialogPanel.descriptionLabel.text")); // NOI18N

        parserComboBox.setRenderer(new DefaultListCellRenderer(){
            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus){
                if(value instanceof ParserI){
                    return super.getListCellRendererComponent(list, ((ParserI) value).getParserName(), index, isSelected, cellHasFocus);
                } else {
                    return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                }
            }
        });
        parserComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parserComboBoxActionPerformed(evt);
            }
        });

        mappingFile2Label.setText(org.openide.util.NbBundle.getMessage(NewSeqPairTracksDialogPanel.class, "NewSeqPairTracksDialogPanel.mappingFile2Label.text")); // NOI18N

        mappingFile2Field.setEditable(false);
        mappingFile2Field.setText(org.openide.util.NbBundle.getMessage(NewSeqPairTracksDialogPanel.class, "NewSeqPairTracksDialogPanel.mappingFile2Field.text")); // NOI18N

        chooseButton2.setText(org.openide.util.NbBundle.getMessage(NewSeqPairTracksDialogPanel.class, "NewSeqPairTracksDialogPanel.chooseButton2.text")); // NOI18N
        chooseButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseButton2ActionPerformed(evt);
            }
        });

        distanceField.setText(org.openide.util.NbBundle.getMessage(NewSeqPairTracksDialogPanel.class, "NewSeqPairTracksDialogPanel.distanceField.text")); // NOI18N
        distanceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distanceFieldActionPerformed(evt);
            }
        });

        deviationField.setText(org.openide.util.NbBundle.getMessage(NewSeqPairTracksDialogPanel.class, "NewSeqPairTracksDialogPanel.deviationField.text")); // NOI18N
        deviationField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deviationFieldActionPerformed(evt);
            }
        });

        preferencesLabel.setText(org.openide.util.NbBundle.getMessage(NewSeqPairTracksDialogPanel.class, "NewSeqPairTracksDialogPanel.preferencesLabel.text")); // NOI18N

        distanceLabel.setText(org.openide.util.NbBundle.getMessage(NewSeqPairTracksDialogPanel.class, "NewSeqPairTracksDialogPanel.distanceLabel.text")); // NOI18N

        deviationLabel.setText(org.openide.util.NbBundle.getMessage(NewSeqPairTracksDialogPanel.class, "NewSeqPairTracksDialogPanel.deviationLabel.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(NewSeqPairTracksDialogPanel.class, "NewSeqPairTracksDialogPanel.jLabel2.text")); // NOI18N

        buttonGroup1.add(orientation1Button);
        orientation1Button.setSelected(true);
        orientation1Button.setText(org.openide.util.NbBundle.getMessage(NewSeqPairTracksDialogPanel.class, "NewSeqPairTracksDialogPanel.orientation1Button.text")); // NOI18N
        orientation1Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orientation1ButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(orientation3Button);
        orientation3Button.setText(org.openide.util.NbBundle.getMessage(NewSeqPairTracksDialogPanel.class, "NewSeqPairTracksDialogPanel.orientation3Button.text")); // NOI18N
        orientation3Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orientation3ButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(orientation2Button);
        orientation2Button.setText(org.openide.util.NbBundle.getMessage(NewSeqPairTracksDialogPanel.class, "NewSeqPairTracksDialogPanel.orientation2Button.text")); // NOI18N
        orientation2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orientation2ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(descriptionLabel)
                            .addComponent(preferencesLabel)
                            .addComponent(mappingFile2Label)
                            .addComponent(mappingFile1Label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(parserComboBox, 0, 336, Short.MAX_VALUE)
                            .addComponent(descriptionField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(mappingFile2Field, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                                    .addComponent(mappingFile1Field, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chooseButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(chooseButton2, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(distanceLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(distanceField, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(orientation1Button)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(deviationLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(deviationField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(orientation2Button)
                                        .addGap(18, 18, 18)
                                        .addComponent(orientation3Button))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(refGenLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refGenBox, 0, 361, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parserComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mappingFile1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseButton1)
                    .addComponent(mappingFile1Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mappingFile2Label)
                    .addComponent(mappingFile2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descriptionLabel))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(preferencesLabel)
                    .addComponent(deviationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(distanceLabel)
                    .addComponent(deviationLabel)
                    .addComponent(distanceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(orientation3Button)
                    .addComponent(orientation1Button)
                    .addComponent(orientation2Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refGenBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refGenLabel)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void chooseButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseButton1ActionPerformed
        this.openFileChooser(true);
}//GEN-LAST:event_chooseButton1ActionPerformed

    private void parserComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parserComboBoxActionPerformed
        MappingParserI newparser = (MappingParserI) parserComboBox.getSelectedItem();
        if (currentParser != newparser) {
            currentParser = newparser;
            mappingFile1 = null;
            mappingFile2 = null;
            mappingFile1Field.setText("");
            mappingFile2Field.setText("");
            descriptionField.setText("");
        }
}//GEN-LAST:event_parserComboBoxActionPerformed

    private void chooseButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseButton2ActionPerformed
        this.openFileChooser(false);
    }//GEN-LAST:event_chooseButton2ActionPerformed

    private void deviationFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deviationFieldActionPerformed
        this.setDeviation();
    }//GEN-LAST:event_deviationFieldActionPerformed

    private void distanceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distanceFieldActionPerformed
        this.setDistance();
    }//GEN-LAST:event_distanceFieldActionPerformed

    private void orientation1ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orientation1ButtonActionPerformed
        this.setOrientation("fr");
    }//GEN-LAST:event_orientation1ButtonActionPerformed

    private void orientation3ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orientation3ButtonActionPerformed
        this.setOrientation("ff/rr");
    }//GEN-LAST:event_orientation3ButtonActionPerformed

    private void orientation2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orientation2ButtonActionPerformed
        this.setOrientation("rf");
    }//GEN-LAST:event_orientation2ButtonActionPerformed

    
    private void openFileChooser(boolean isFstFile) {
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter(currentParser.getInputFileDescription(), currentParser.getFileExtensions()));
        Preferences prefs2 = Preferences.userNodeForPackage(NewSeqPairTracksDialogPanel.class);

        String path = prefs2.get("RefGenome.Filepath", null);
        if (path != null) {
            fc.setCurrentDirectory(new File(path));
        }
        int result = fc.showOpenDialog(this);

        File file = null;

        if (result == 0) {
            // file chosen
            file = fc.getSelectedFile();

            if (file.canRead()) {
                if (isFstFile){
                    mappingFile1 = file;
                    mappingFile1Field.setText(mappingFile1.getAbsolutePath());
                } else {
                    mappingFile2 = file;
                    mappingFile2Field.setText(mappingFile2.getAbsolutePath());
                }
                
                Preferences prefs = Preferences.userNodeForPackage(NewSeqPairTracksDialogPanel.class);
                prefs.put("RefGenome.Filepath", mappingFile1.getAbsolutePath());
                try {
                    prefs.flush();
                } catch (BackingStoreException ex) {
                    Logger.getLogger(NewTrackDialogPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                Logger.getLogger(NewTrackDialogPanel.class.getName()).log(Level.WARNING, "Couldn't read file");
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton chooseButton1;
    private javax.swing.JButton chooseButton2;
    private javax.swing.JTextField descriptionField;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextField deviationField;
    private javax.swing.JLabel deviationLabel;
    private javax.swing.JTextField distanceField;
    private javax.swing.JLabel distanceLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField mappingFile1Field;
    private javax.swing.JLabel mappingFile1Label;
    private javax.swing.JTextField mappingFile2Field;
    private javax.swing.JLabel mappingFile2Label;
    private javax.swing.JRadioButton orientation1Button;
    private javax.swing.JRadioButton orientation2Button;
    private javax.swing.JRadioButton orientation3Button;
    private javax.swing.JComboBox parserComboBox;
    private javax.swing.JLabel preferencesLabel;
    private javax.swing.JComboBox refGenBox;
    private javax.swing.JLabel refGenLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean isRequiredInfoSet() {
        if (mappingFile1 == null || mappingFile2 == null || refGenBox.getSelectedItem() == null 
            || descriptionField.getText().isEmpty() || !distancehasValidInput()  || !deviationHasValidInput()) {
            return false;
        } else {
            return true;
        }
    }

    public File getMappingFile1() {
        return this.mappingFile1;
    }

    public File getMappingFile2(){
        return this.mappingFile2;
    }

    public String getDescription() {
        return descriptionField.getText();
    }

    public ReferenceJob getReferenceJob() {
        return (ReferenceJob) refGenBox.getSelectedItem();
    }

    public MappingParserI getParser() {
        return currentParser;
    }
    
    /**
     * @return distance of the sequences in a sequence pair in bp (from start1 to stop2)
     */
    public int getDistance(){
        return this.distance;
    }
    
    /**
     * @return deviation allowed from that distance in %
     */
    public short getDeviation(){
        return this.deviation;
    }

    /**
     * @return  orientation of the reads: 0 means read1 = fwd, read2 = rev, 
     *          1 = rev, fwd, 2 = fwd, fwd or rev, rev
     */
    public byte getOrientation() {
        return this.orientation;
    }
    
    

    public void setReferenceJobs(List<ReferenceJob> jobs) {
        List<ReferenceJob> list = new ArrayList<ReferenceJob>();

        List<PersistantReference> dbGens = ProjectConnector.getInstance().getGenomes();
        for (Iterator<PersistantReference> it = dbGens.iterator(); it.hasNext();) {
            PersistantReference r = it.next();
            list.add(new ReferenceJob(r.getId(), null, null, r.getDescription(), r.getName(), r.getTimeStamp()));
        }

        list.addAll(jobs);

        ReferenceJob[] gens = new ReferenceJob[list.size()];
        for (int i = 0; i < list.size(); i++) {
            gens[i] = list.get(i);
        }

        refGenBox.setModel(new DefaultComboBoxModel(gens));
    }


    private ReferenceJob[] getRefGenJobs() {
        List<ReferenceJob> list = new ArrayList<ReferenceJob>();

        List<PersistantReference> dbGens = ProjectConnector.getInstance().getGenomes();
        for (Iterator<PersistantReference> it = dbGens.iterator(); it.hasNext();) {
            PersistantReference r = it.next();
            list.add(new ReferenceJob(r.getId(), null, null, r.getDescription(), r.getName(), r.getTimeStamp()));
        }

        ReferenceJob[] gens = new ReferenceJob[list.size()];
        for (int i = 0; i < list.size(); i++) {
            gens[i] = list.get(i);
        }

        return gens;
    }

    
    private boolean distancehasValidInput() {
        this.setDistance();
        return this.distance > 0;
    }

    
    private boolean deviationHasValidInput() {
        this.setDeviation();
        return this.deviation >= 0;
    }
    
    
    private void setDistance(){
        try {
            this.distance = Integer.valueOf(this.distanceField.getText());
        } catch (NumberFormatException e) {
            this.distanceField.setText(NbBundle.getMessage(NewSeqPairTracksDialogPanel.class, "NewSeqPairTracksDialogPanel.Number.Error"));
        }
    }
    
    
    private void setDeviation(){
        try {
            this.deviation = Short.valueOf(this.deviationField.getText());
        } catch (NumberFormatException e){
            this.deviationField.setText(NbBundle.getMessage(NewSeqPairTracksDialogPanel.class, "NewSeqPairTracksDialogPanel.Number.Error"));
            this.deviation = -1;
        }
    }

    private void setOrientation(String orientString) {
        if (orientString.equals("fr")) {
            this.orientation = 0;
        } else 
        if (orientString.equals("rf")){
            this.orientation = 1;
        } else 
        if (orientString.equals("ff/rr")){
            this.orientation = 2;
        }
        
    }

}
