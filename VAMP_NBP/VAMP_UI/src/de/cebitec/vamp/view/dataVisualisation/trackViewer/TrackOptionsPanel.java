package de.cebitec.vamp.view.dataVisualisation.trackViewer;

import de.cebitec.vamp.databackend.connector.ProjectConnector;
import de.cebitec.vamp.databackend.connector.TrackConnector;
import de.cebitec.vamp.databackend.dataObjects.PersistantReference;
import de.cebitec.vamp.databackend.dataObjects.PersistantTrack;
import de.cebitec.vamp.view.OpenTrackDialog;
import de.cebitec.vamp.view.dataVisualisation.BoundsInfoManager;
import de.cebitec.vamp.view.dataVisualisation.ExternalViewer;
import de.cebitec.vamp.view.dataVisualisation.basePanel.BasePanelFactory;
import de.cebitec.vamp.view.dataVisualisation.readPosition.ReadFrame;
import de.cebitec.vamp.view.dataVisualisation.snpDetection.SnpFrame;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextField;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.util.Exceptions;

/**
 *
 * @author ddoppmeier
 */
public class TrackOptionsPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 14234624;
    private ExternalViewer externalViewer;
    private SnpFrame snpDetection;
    private ReadFrame readPanel ;
    private BasePanelFactory basePanelFactory;
    private PersistantTrack track;
    private BoundsInfoManager boundsManager;
     PersistantReference refGen;
    PersistantTrack selectedTrack;
    OpenTrackDialog op;


    /** Creates new form TrackNavigatorPanel */
    public TrackOptionsPanel() {
        initComponents();
        Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, "Do not use empty Constructor for this object! Standard constructor is only meant for GUI builder means");

    }

    /** Creates new form TrackNavigatorPanel */
    public TrackOptionsPanel(BasePanelFactory basePanelFactory, PersistantTrack track, BoundsInfoManager boundsManager,PersistantReference refGen) {
        initComponents();
        this.refGen = refGen;
        this.basePanelFactory = basePanelFactory;
        this.track = track;
        this.boundsManager = boundsManager;
        //in development
        getCovInfoButton.setVisible(false);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        snpButton = new javax.swing.JButton();
        externalViewerButton = new javax.swing.JButton();
        readButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        getCovInfoButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        snpButton.setText("Find SNPs");
        snpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snpButtonActionPerformed(evt);
            }
        });

        externalViewerButton.setText("Open external viewer");
        externalViewerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                externalViewerButtonActionPerformed(evt);
            }
        });

        readButton.setText("Find Read");
        readButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readButtonActionPerformed(evt);
            }
        });

        jButton1.setText("Choose a track");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        getCovInfoButton.setText("Get coverage infos");
        getCovInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getCovInfoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(externalViewerButton, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(snpButton, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(readButton, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(getCovInfoButton, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(snpButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(readButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(externalViewerButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(getCovInfoButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void externalViewerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_externalViewerButtonActionPerformed
        externalViewerButton.setEnabled(false);
        externalViewer = new ExternalViewer(basePanelFactory, track, this);
        externalViewer.pack();
        externalViewer.setVisible(true);
    }//GEN-LAST:event_externalViewerButtonActionPerformed

    private void snpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snpButtonActionPerformed
        snpDetection = new SnpFrame(this, boundsManager, track);
        snpDetection.pack();
        snpButton.setEnabled(false);
        snpDetection.setVisible(true);
    }//GEN-LAST:event_snpButtonActionPerformed

    private void readButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readButtonActionPerformed
       readPanel = new ReadFrame(this, boundsManager, track);
       readPanel.pack();
       readButton.setEnabled(false);
       readPanel.setVisible(true);
    }//GEN-LAST:event_readButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      op =  new OpenTrackDialog(this,refGen);
      op.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    @SuppressWarnings("unchecked")
    /*you will get a list with the position and the associated coverage(fw+rv)
     *you can use it if you need the data
     * but the function isnt on the right position and there have to be a bit more
     * explanation
     */
    private void getCovInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getCovInfoButtonActionPerformed
        JTextField t = new JTextField();
        DialogDescriptor d =  new DialogDescriptor(t,"Get coverage Information");
        DialogDisplayer.getDefault().createDialog(d).setVisible(true);
        if(d.getValue().equals(DialogDescriptor.OK_OPTION)){
             TrackConnector con = ProjectConnector.getInstance().getTrackConnector(track);
            
             int from = 1;
             int to = 100000;

             String path = t.getText();
             File f = new File(path);

           
           PrintWriter output = null;
          
                try {

                    output  = new PrintWriter(new FileWriter(f));
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
        while(to <= refGen.getSequence().length()){
             HashMap<Integer,Integer>map = new HashMap<Integer, Integer>();
            map = con.getCoverageInfosofTrack(from,to);
                for(int i : map.keySet()){
                      
                    output.println(i+"  "+map.get(i));

                }
                if(to == refGen.getSequence().length()){
                  break;
                }
                from += 100000;
                to += 100000;

                if(to > refGen.getSequence().length()){
                    to = refGen.getSequence().length();
                }

            }
                output.flush();
                output.close();
                //map.clear();
            Logger.getLogger(this.getClass().getName()).log(Level.INFO, "Data is written to {0}", path);



        }
    }//GEN-LAST:event_getCovInfoButtonActionPerformed
    public void secondTrackSelected(){
      selectedTrack = op.getSelectedTrack();
     // track2Name.setText(selectedTrack.getDescription());
//      TrackConnector con = ProjectConnector.getInstance().getTrackConnector(track.getId(), selectedTrack.getId());
//      basePanelFactory.getTrackBasePanel2(track,selectedTrack ,refGen,con);
    
    }
    public void snpDetectionClosed(){
        if(snpDetection != null){
            snpDetection.close();
            snpDetection.setVisible(false);
            snpDetection = null;
            snpButton.setEnabled(true);
        }
    }

    public void readDetecionClosed(){
        if(readPanel!= null){
            readPanel.close();
            readPanel.setVisible(false);
            readPanel = null;
            readButton.setEnabled(true);
        }
    }
    
    public void viewerClosed(){
        // if user is fast enough to double-click the close X before this frame
        // disappears, a null pointer will occur
        if(externalViewer != null){
            externalViewer.setVisible(false);
            externalViewer.close();
            externalViewer = null;
            externalViewerButton.setEnabled(true);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton externalViewerButton;
    private javax.swing.JButton getCovInfoButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton readButton;
    private javax.swing.JButton snpButton;
    // End of variables declaration//GEN-END:variables

    public void close() {
        basePanelFactory = null;
        track = null;
        viewerClosed();
        snpDetectionClosed();
    }

}
