package de.cebitec.vamp.view.dataVisualisation.referenceViewer;

import de.cebitec.vamp.databackend.connector.ProjectConnector;
import de.cebitec.vamp.databackend.connector.ReferenceConnector;
import de.cebitec.vamp.databackend.dataObjects.PersistantFeature;
import de.cebitec.vamp.databackend.dataObjects.PersistantReference;
import de.cebitec.vamp.view.dataVisualisation.BoundsInfoManager;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JOptionPane;

/**
 *
 * @author ddoppmeier
 */
public class JumpPanel extends javax.swing.JPanel {

    private final static long serialVersionUID = 247246234;

    private int jumpPosition;
    private PersistantReference refGen;
    private ReferenceConnector refGenCon;
    private BoundsInfoManager boundsManager;

    /** Creates new form JumpPanel */
    public JumpPanel() {
        initComponents();
        jumpPosition = 1;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jumpPositionLabel = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jumpFeatureLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jumpList = new javax.swing.JList();
        jumpList.setSelectionModel(new DefaultListSelectionModel());
        jumpButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Navigation"));
        setPreferredSize(new java.awt.Dimension(190, 500));

        jumpPositionLabel.setText("Position:");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jumpFeatureLabel.setText("Feature:");

        jumpList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jumpList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jumpListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jumpList);

        jumpButton.setText("Go");
        jumpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jumpButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jumpPositionLabel)
                    .addComponent(jumpFeatureLabel))
                .addContainerGap())
            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jumpButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jumpPositionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jumpFeatureLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jumpButton))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        jumpList.setSelectedValue(null, false);
        DefaultListSelectionModel model = (DefaultListSelectionModel) jumpList.getSelectionModel();
        model.clearSelection();
}//GEN-LAST:event_jTextField1KeyTyped

    private void jumpListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jumpListValueChanged
        PersistantFeature f = (PersistantFeature) jumpList.getSelectedValue();
        if (f != null) {
            jumpPosition = f.getStart();
            jTextField1.setText(String.valueOf(jumpPosition));
            this.jumpButtonActionPerformed(null);
        }
}//GEN-LAST:event_jumpListValueChanged

    private void jumpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jumpButtonActionPerformed
        if(isValidInput(jTextField1.getText())){
            jumpPosition = Integer.parseInt(jTextField1.getText());
            boundsManager.navigatorBarUpdated(jumpPosition);
        } else {
            JOptionPane.showMessageDialog(this, "Please enter a valid position!", "Invalid Position", JOptionPane.ERROR_MESSAGE);
        }
}//GEN-LAST:event_jumpButtonActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        jumpButtonActionPerformed(evt);
    }//GEN-LAST:event_jTextField1ActionPerformed

    private boolean isValidInput(String s){
        try {
            int tmp = Integer.parseInt(s);
            if(tmp >= 1 && tmp <= refGen.getSequence().length()){
                return true;
            } else {
                return false;
            }
        } catch (Exception e) {
            return false;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton jumpButton;
    private javax.swing.JLabel jumpFeatureLabel;
    private javax.swing.JList jumpList;
    private javax.swing.JLabel jumpPositionLabel;
    // End of variables declaration//GEN-END:variables

    public void setReferenceGenome(PersistantReference refGen) {
        this.refGen = refGen;
        refGenCon = ProjectConnector.getInstance().getRefGenomeConnector(refGen.getId());
        fillFeatureList();
    }

    private void fillFeatureList() {
        List<PersistantFeature> feat = refGenCon.getFeaturesForRegion(0, refGen.getSequence().length());
        Collections.sort(feat, new FeatureNameSorter());
        PersistantFeature[] data = feat.toArray(new PersistantFeature[0]);
        jumpList.setListData(data);
    }

    public void setBoundsInfoManager(BoundsInfoManager boundsManager) {
        this.boundsManager = boundsManager;
    }

    private class FeatureNameSorter implements Comparator<PersistantFeature> {

        @Override
        public int compare(PersistantFeature o1, PersistantFeature o2) {
            String name1 = o1.getLocus();
            String name2 = o2.getLocus();

            // null string is always "bigger" than anything else
            if(name1 == null && name1 != null){
                return 1;
            } else if( name1 != null && name2 == null){
                return -1;
            } else if( name1 == name2){
                // both are null
                return 0;
            } else {
                return name1.compareTo(name2);
            }
        }
    }

}
