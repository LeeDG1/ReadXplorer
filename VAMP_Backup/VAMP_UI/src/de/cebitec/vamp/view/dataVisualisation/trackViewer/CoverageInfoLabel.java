package de.cebitec.vamp.view.dataVisualisation.trackViewer;

import de.cebitec.vamp.databackend.dataObjects.PersistantCoverage;
import de.cebitec.vamp.view.dataVisualisation.MousePositionListener;

/**
 *
 * @author jwinneba
 */
public class CoverageInfoLabel extends javax.swing.JPanel implements CoverageInfoI, MousePositionListener{

    private static final long serialVersionUID = 812385;
    private PersistantCoverage cov;
    private boolean mouseOverWanted;
    private boolean doubleTrackHackBoolean;

    /** Creates new form CoverageInfoPanel */
    public CoverageInfoLabel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        perfectCovLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        zeroFwdField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        zeroRevField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        bmCovLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        bestMatchFwdField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        bestMatchRevField = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        complCovLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        nFwdField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        nRevField = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        currentPositionLabel = new javax.swing.JLabel();

        perfectCovLabel.setText("Perfect cov.:");
        perfectCovLabel.setToolTipText("Number of perfect matches");

        jLabel5.setText("+");

        zeroFwdField.setEditable(false);
        zeroFwdField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        zeroFwdField.setToolTipText("");
        zeroFwdField.setMinimumSize(new java.awt.Dimension(20, 30));
        zeroFwdField.setPreferredSize(new java.awt.Dimension(18, 20));

        jLabel6.setText("/ -");

        zeroRevField.setEditable(false);
        zeroRevField.setToolTipText("");
        zeroRevField.setPreferredSize(zeroFwdField.getPreferredSize());

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setPreferredSize(new java.awt.Dimension(2, 20));

        bmCovLabel.setText("Best-Match cov.:");
        bmCovLabel.setToolTipText("<html>Number of matches<br>that are optimal for their related read");

        jLabel7.setText("+");

        bestMatchFwdField.setEditable(false);
        bestMatchFwdField.setToolTipText("");
        bestMatchFwdField.setPreferredSize(zeroFwdField.getPreferredSize());

        jLabel8.setText("/ -");

        bestMatchRevField.setEditable(false);
        bestMatchRevField.setToolTipText("");
        bestMatchRevField.setPreferredSize(zeroFwdField.getPreferredSize());

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setPreferredSize(new java.awt.Dimension(5, 20));

        complCovLabel.setText("Complete cov.:");
        complCovLabel.setToolTipText("Complete number of matches");

        jLabel9.setText("+");

        nFwdField.setEditable(false);
        nFwdField.setToolTipText("");
        nFwdField.setPreferredSize(zeroFwdField.getPreferredSize());

        jLabel10.setText("/ -");

        nRevField.setEditable(false);
        nRevField.setToolTipText("");
        nRevField.setPreferredSize(zeroFwdField.getPreferredSize());

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setPreferredSize(new java.awt.Dimension(5, 20));

        jLabel1.setText("Position:");

        currentPositionLabel.setPreferredSize(new java.awt.Dimension(40, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 8, Short.MAX_VALUE)
                .addComponent(perfectCovLabel)
                .addGap(5, 5, 5)
                .addComponent(jLabel5)
                .addGap(5, 5, 5)
                .addComponent(zeroFwdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jLabel6)
                .addGap(5, 5, 5)
                .addComponent(zeroRevField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(bmCovLabel)
                .addGap(5, 5, 5)
                .addComponent(jLabel7)
                .addGap(5, 5, 5)
                .addComponent(bestMatchFwdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jLabel8)
                .addGap(5, 5, 5)
                .addComponent(bestMatchRevField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(complCovLabel)
                .addGap(5, 5, 5)
                .addComponent(jLabel9)
                .addGap(5, 5, 5)
                .addComponent(nFwdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jLabel10)
                .addGap(5, 5, 5)
                .addComponent(nRevField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentPositionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 8, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentPositionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(perfectCovLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel5))
                    .addComponent(zeroFwdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel6))
                    .addComponent(zeroRevField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(bmCovLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel7))
                    .addComponent(bestMatchFwdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel8))
                    .addComponent(bestMatchRevField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(complCovLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel9))
                    .addComponent(nFwdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel10))
                    .addComponent(nRevField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel1)))
                .addContainerGap(8, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bestMatchFwdField;
    private javax.swing.JTextField bestMatchRevField;
    private javax.swing.JLabel bmCovLabel;
    private javax.swing.JLabel complCovLabel;
    private javax.swing.JLabel currentPositionLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField nFwdField;
    private javax.swing.JTextField nRevField;
    private javax.swing.JLabel perfectCovLabel;
    private javax.swing.JTextField zeroFwdField;
    private javax.swing.JTextField zeroRevField;
    // End of variables declaration//GEN-END:variables

    public void setZeroFwd(int count){
        if(count >= 0){
            zeroFwdField.setText(String.valueOf(count));
        } else {
            zeroFwdField.setText("");
        }
    }

    public void setZeroRev(int count){
        if(count >= 0){
            zeroRevField.setText(String.valueOf(count));
        } else {
            zeroRevField.setText("");
        }
    }

    public void setBmFwd(int count){
        if(count >= 0){
            bestMatchFwdField.setText(String.valueOf(count));
        } else {
            bestMatchFwdField.setText("");
        }
    }

    public void setBmRev(int count){
        if(count >= 0){
            bestMatchRevField.setText(String.valueOf(count));
        } else {
            bestMatchRevField.setText("");
        }
    }

    public void setNFwd(int count){
        if(count >= 0){
            nFwdField.setText(String.valueOf(count));
        } else {
            nFwdField.setText("");
        }
    }

    public void setNRev(int count){
        if(count >= 0){
            nRevField.setText(String.valueOf(count));
        } else {
            nRevField.setText("");
        }
    }

    @Override
    public void setCurrentMousePosition(int logPos) {
        if(/*mouseOverWanted &&*/ cov != null){

            if (!doubleTrackHackBoolean) {
                setZeroFwd(cov.getzFwMult(logPos));
                setZeroRev(cov.getzRvMult(logPos));
                setBmFwd(cov.getBmFwMult(logPos));
                setBmRev(cov.getBmRvMult(logPos));
                setNFwd(cov.getnFwMult(logPos));
                setNRev(cov.getnRvMult(logPos));
                currentPositionLabel.setText(String.valueOf(logPos));
            }
            // TODO there has to be a much nicer way, maybe alter PersistantTrack or something else
            else {
                setZeroFwd(cov.getnFwMult(logPos));
                setZeroRev(cov.getnRvMult(logPos));
                setBmFwd(cov.getNFwMultTrack1(logPos));
                setBmRev(cov.getNRvMultTrack1(logPos));
                setNFwd(cov.getNFwMultTrack2(logPos));
                setNRev(cov.getNRvMultTrack2(logPos));
                currentPositionLabel.setText(String.valueOf(logPos));
            }

        } else {
            setZeroFwd(-1);
            setZeroRev(-1);
            setBmFwd(-1);
            setBmRev(-1);
            setNFwd(-1);
            setNRev(-1);
            currentPositionLabel.setText("");
        }
    }

    @Override
    public void setMouseOverPaintingRequested(boolean requested) {
        mouseOverWanted = requested;
        if(!requested){
            setCurrentMousePosition(-1);
        }
    }

    @Override
    public void setCoverage(PersistantCoverage coverage) {
        this.cov = coverage;
    }

    @Override
    public PersistantCoverage getCoverage() {
        return cov;
    }

    /**
     * little (hack) method to show the two track coverage info
     */
    public void renameFields(){
        perfectCovLabel.setText("Diff cov.:");
        bmCovLabel.setText("Track 1 cov.:");
        complCovLabel.setText("Track 2 cov.:");
        doubleTrackHackBoolean = true;
    }

}
