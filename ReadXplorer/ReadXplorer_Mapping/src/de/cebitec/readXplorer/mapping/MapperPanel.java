package de.cebitec.readXplorer.mapping;

import de.cebitec.readXplorer.mapping.api.MappingApi;
import de.cebitec.readXplorer.util.FileUtils;
import de.cebitec.readXplorer.util.Properties;
import java.io.File;
import java.util.prefs.Preferences;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.openide.util.NbPreferences;

/**
 * MapperPanel is the gui part of the options panel to select the mapping script. 
 * The mapping script is a bash script that encapsulates the mapper 
 * functionality (which is often divided into multiple commands) 
 * into a single script.
 * 
 * @author Evgeny Anisiforov <evgeny at cebitec.uni-bielefeld.de>
 */
final class MapperPanel extends javax.swing.JPanel {
    private static final long serialVersionUID = 1L;

    private final MapperOptionsPanelController controller;
    private Preferences pref;
    
    MapperPanel(MapperOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        
        this.pref = NbPreferences.forModule(Object.class);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        mapperTextField = new javax.swing.JTextField();
        openButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(MapperPanel.class, "MapperPanel.jLabel1.text")); // NOI18N

        mapperTextField.setText(org.openide.util.NbBundle.getMessage(MapperPanel.class, "MapperPanel.mapperTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(openButton, org.openide.util.NbBundle.getMessage(MapperPanel.class, "MapperPanel.openButton.text")); // NOI18N
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 1, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mapperTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(openButton)))
                .addGap(8, 8, 8))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mapperTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openButton))
                .addContainerGap(11, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        File file = FileUtils.showFileOpenDialogAndChangePrefs(Properties.MAPPER_PATH,
                new FileNameExtensionFilter("Mapper Script File", "sh"),
                mapperTextField, MapperPanel.class, this);
    }//GEN-LAST:event_openButtonActionPerformed

    void load() {
        mapperTextField.setText(MappingApi.getMapperPath());
    }
    
    void store() {
        pref.put(Properties.MAPPER_PATH, mapperTextField.getText());
    }
    
    boolean valid() {
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField mapperTextField;
    private javax.swing.JButton openButton;
    // End of variables declaration//GEN-END:variables
}
