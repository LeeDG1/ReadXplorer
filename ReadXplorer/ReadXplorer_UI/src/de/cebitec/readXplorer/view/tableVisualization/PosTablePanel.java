package de.cebitec.readXplorer.view.tableVisualization;

import de.cebitec.readXplorer.databackend.dataObjects.PersistantReference;
import de.cebitec.readXplorer.parser.tables.TableType;
import de.cebitec.readXplorer.util.UneditableTableModel;
import javax.swing.DefaultListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 * Creates a new position table panel. A position table starts with a column
 * containing the position.
 * 
 * @author Rolf Hilker <rhilker at mikrobio.med.uni-giessen.de>
 */
public class PosTablePanel extends TablePanel {
    private static final long serialVersionUID = 1L;
    private final UneditableTableModel tableData;
    private PersistantReference reference;
    private TableType tableType;

    /**
     * Creates a new position table panel. A position table starts with a column
     * containing the position.
     * @param tableData The data to display in this panel's table.
     */
    public PosTablePanel(UneditableTableModel tableData) {
        this.tableData = tableData;
        this.initComponents();
        this.initAdditionalComponents();
    }

    /**
     * Initializes additionals stuff for this panel.
     */
    private void initAdditionalComponents() {
        this.dataTable.setModel(this.tableData);
        
        DefaultListSelectionModel model = (DefaultListSelectionModel) dataTable.getSelectionModel();
        model.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                
            final int posColumn = 0;
            final int chromColumn;
            switch (tableType) {
                case COVERAGE_ANALYSIS          : //fallthrough
                case RPKM_ANALYSIS              : //fallthrough
                case SNP_DETECTION              : //fallthrough
                case OPERON_DETECTION           : chromColumn = 3; break;
                case DIFF_GENE_EXPRESSION       : chromColumn = 1; break;
                case FEATURE_COVERAGE_ANALYSIS  : //fallthrough
                case TSS_DETECTION              : //fallthrough
                default                         : chromColumn = 2; break; //for all other tables
            }//TODO: feature position - map mit features im ram halten
            //TODO: after closing of ref and reopening, it does not react anymore
                TableUtils.showPosition(dataTable, posColumn, chromColumn, getBoundsInfoManager(), reference);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dataScrollPane = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        dataScrollPane.setViewportView(dataTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dataScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dataScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane dataScrollPane;
    private javax.swing.JTable dataTable;
    // End of variables declaration//GEN-END:variables

    /**
     * @return Number of rows in the complete data model.
     */
    @Override
    public int getDataSize() {
        if (tableData != null) {
            return tableData.getRowCount();
        } else {
            return 0;
        }
    }
    
    /**
     * @param reference The reference genome, for which this table was imported.
     */
    public void setReferenceGenome(PersistantReference reference) {
        this.reference = reference;
    }
    
    /**
     * @return The reference genome, for which this table was imported.
     */
    public PersistantReference getReferenceGenome() {
        return this.reference;
    }

    public void setTableType(TableType tableType) {
        this.tableType = tableType;
    }
}
