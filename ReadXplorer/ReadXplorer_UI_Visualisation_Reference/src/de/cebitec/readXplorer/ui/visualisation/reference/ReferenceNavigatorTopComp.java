package de.cebitec.readXplorer.ui.visualisation.reference;

import de.cebitec.readXplorer.view.TopComponentExtended;
import de.cebitec.readXplorer.view.dataVisualisation.referenceViewer.ReferenceViewer;
import java.util.logging.Logger;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.Lookup.Result;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//de.cebitec.readXplorer.ui.visualisation.reference//ReferenceNavigator//EN", autostore = false)
public final class ReferenceNavigatorTopComp extends TopComponentExtended implements LookupListener{

    private static final long serialVersionUID = 1L;

    private static ReferenceNavigatorTopComp instance;
    private Result<ReferenceViewer> result;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "ReferenceNavigatorTopComp";

    public ReferenceNavigatorTopComp() {
        initComponents();
        setName(NbBundle.getMessage(ReferenceNavigatorTopComp.class, "CTL_ReferenceNavigatorTopComp"));
        setToolTipText(NbBundle.getMessage(ReferenceNavigatorTopComp.class, "HINT_ReferenceNavigatorTopComp"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);

    }

    public void setRefViewer(ReferenceViewer viewer){
        jumpPanel.setReferenceGenome(viewer.getReference());
        jumpPanel.setBoundsInfoManager(viewer.getBoundsInformationManager());
        jumpPanel.setGenomeViewer(viewer);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jumpPanel = new de.cebitec.readXplorer.ui.visualisation.reference.JumpPanel();

        setLayout(new java.awt.BorderLayout());
        add(jumpPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private de.cebitec.readXplorer.ui.visualisation.reference.JumpPanel jumpPanel;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     * @return The default istance
     */
    public static synchronized ReferenceNavigatorTopComp getDefault() {
        if (instance == null) {
            instance = new ReferenceNavigatorTopComp();
        }
        return instance;
    }

    /**
     * Obtain the ReferenceNavigatorTopComp instance. Never call {@link #getDefault} directly!
     * @return The default instance
     */
    public static synchronized ReferenceNavigatorTopComp findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(ReferenceNavigatorTopComp.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ReferenceNavigatorTopComp) {
            return (ReferenceNavigatorTopComp) win;
        }
        Logger.getLogger(ReferenceNavigatorTopComp.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        result = Utilities.actionsGlobalContext().lookupResult(ReferenceViewer.class);
        result.addLookupListener(this);
        resultChanged(new LookupEvent(result));
    }


    @Override
    public void resultChanged(LookupEvent ev) {
        for (ReferenceViewer refViewer : result.allInstances()) {
            setRefViewer(refViewer);
        }
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);        
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

}
